<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Shallow and Pedantic</title><link>https://lutzky.net/posts/</link><description>All Posts | Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>lutzky@gmail.com (Ohad Lutzky)</managingEditor><webMaster>lutzky@gmail.com (Ohad Lutzky)</webMaster><lastBuildDate>Sun, 23 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/posts/" rel="self" type="application/rss+xml"/><item><title>Getting your code to your friends</title><link>https://lutzky.net/2023/04/23/software-distribution/</link><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2023/04/23/software-distribution/</guid><description><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>For as long as I&rsquo;ve been interested in software development, I&rsquo;ve been
interested in how software makes it onto a computer. &ldquo;Works on my machine&rdquo; was
never quite enough&hellip; how would it work on <em>someone else&rsquo;s</em> computer? Here&rsquo;s a
stroll down memory lane, starting from the 90s.</p>
<h2 id="qbasic-early-90s">QBasic (early 90s)</h2>
<p>In the early 90s, when I was about 8 years old, someone showed me that my
computer came with a piece of software called <a href="https://archive.org/details/msdos_qbasic_megapack" target="_blank" rel="noopener noreffer ">QBasic</a> - it came with
the MS-DOS operating system.  Although nobody in my family knew how to use it,
and this was long before I had access to the internet, it came with an
impressive set of examples as well as an interactive reference manual that I
recall as being very thorough. Having messed around with it and made a few
animations and utilities, I thought it would be cool to give copies to my
classmates to play around with; y&rsquo;know, like a professional software developer would.</p>
<figure><a class="lightgallery" href="/2023/04/23/software-distribution/feature_QBasic_Opening_Screen.png" title="/2023/04/23/software-distribution/feature_QBasic_Opening_Screen.png" data-thumbnail="/2023/04/23/software-distribution/feature_QBasic_Opening_Screen.png" data-sub-html="<h2>QBasic&rsquo;s opening screen</h2>">
        
    </a><figcaption class="image-caption">QBasic&rsquo;s opening screen</figcaption>
    </figure>
<p>The software, as I wrote it, was a collection of source code files - just text
files with a <code>.BAS</code> extension. For anyone to run those programs, they&rsquo;d have to
open QBasic themselves, select &ldquo;File→Open&rdquo;, navigate to my file, then use the
&ldquo;Run&rdquo; menu to actually run the program. And presumably figure out how to exit
QBasic when they&rsquo;re done.  Now, 8-year-olds in the 90s were used to computers
being slightly harder to operate, e.g. typing out a command or two to open a
game; indeed, friends did figure this out.  But this still felt like a <em>super
janky</em> way to distribute software.</p>
<p>What I actually wanted to do was provide a <em>&ldquo;self-contained&rdquo;</em> program, one where
you simply enter its name and it starts up, like any other DOS program I&rsquo;d seen.
Ideally, it would have the fashionable <code>.EXE</code> extension (the term &ldquo;<code>EXE</code> file&rdquo;
seemed pretty much synonymous with &ldquo;program&rdquo;).</p>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note - Batch files<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>What I wanted to do was allow people to run <code>LUTZKY1.BAS</code> with one command. This
could&rsquo;ve been accomplished by adding a file <code>LUTZKY1.BAT</code> (<code>BAT</code> for MS-DOS
Batch, not <code>BAS</code>) with these contents:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl"><span class="p">@</span><span class="c1">REM Turn off janky &#34;print each command&#34; behavior</span>
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="c1">REM Mind the load-bearing @ at the start of each line...</span>
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">ECHO</span> OFF
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">QBASIC /RUN LUTZKY1.BAS
</span></span></code></pre></td></tr></table>
</div>
</div><p>I would&rsquo;ve needed to terminate the program using the <code>SYSTEM</code> command rather
than <code>END</code>. This way, indeed typing <code>LUTZKY1</code> into the prompt would&rsquo;ve run my
program and exit normally. However:</p>
<ul>
<li>I don&rsquo;t think I knew how to do that</li>
<li>It still flashes the QBasic IDE on startup</li>
<li>I was still relying on QBasic being installed on the destination machine, and
I knew (though?) older versions of MS-DOS didn&rsquo;t include it.</li>
<li>Having things in multiple files still seemed &ldquo;off&rdquo;. I now wonder if I
could&rsquo;ve designed a file to work both as the batch file and as the BASIC file.</li>
</ul>
</div>
        </div>
    </div>
<p>I had heard rumor of the &ldquo;professional, expensive&rdquo; bit of software I needed - a
<em>compiler</em>, which would perform the right magic to me a shiny, self-contained
<code>LUTZKY1.EXE</code>. But this sounded like an expensive thing to even ask my parents
for, never mind the fact I had no idea where one <em>buys software</em> - the local
shops only seemed to stock games and office productivity software.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">In 2023, I found out that this software was called <a href="https://en.wikipedia.org/wiki/QuickBASIC" target="_blank" rel="noopener noreffer ">QuickBASIC</a>&hellip;
not confusing at all, surely the Q in QBasic didn&rsquo;t stand for &ldquo;Quick&rdquo; and they
weren&rsquo;t both abbreviated &ldquo;QB&rdquo;.</div>
        </div>
    </div>
<p>For whatever reason, this was important enough to me to try some truly wacky
stuff. I vaguely remember messing around blindly with files on my computer,
trying to generate an <code>EXE</code> file complete with an icon - efforts included taking
something called the &ldquo;PIF Editor&rdquo;, which creates shortcuts to files and
ostensibly adds icons to them&hellip; and replacing one of the system <code>EXE</code> files
with it, in case the filename was &ldquo;magical&rdquo;. The real magic was young me
learning the valuable lesson that I should&rsquo;ve made a backup of this file before
replacing it.</p>
<h2 id="visual-basic-late-90s">Visual Basic (late 90s)</h2>
<p>By the late 90s, Windows 9x came around along with Microsoft Office, which had a
wonderful capability: <a href="https://en.wikipedia.org/wiki/Visual_Basic_for_Applications" target="_blank" rel="noopener noreffer ">Visual Basic for Applications</a>. this gave me my
first experience writing actual GUI applications, strangely embedded within an
Excel spreadsheet. Most memorably, Pokémon was a huge deal at the time, and I
had created &ldquo;APCO - A Pokémon Card Organizer&rdquo; - a trivial deck building app.</p>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note - Pokémon<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>On April 1st, 1997, the very first episode of the Pokémon anime was shown on
Israel, on channel 6; I was the official &ldquo;hero of the day&rdquo; guest, as a Pokémon
expert. I got to this position by nitpicking on some &ldquo;kids&rsquo; portal&rdquo; website that
their Pokémon page contained inaccuracies, which landed me a job as their
Pokémon card strategy reviewer; I was 11, so they paid me in Pokémon cards.</p>
<!-- raw HTML omitted -->
<p>For the anime premiere I was interviewed by Dana Dvorin; I have sadly been
unable to find any footage of this hilariously awkward interview.</p>
</div>
        </div>
    </div>
<p>Once again, I wanted to distribute this software - perhaps using this magical
thing I now had access to called <em>The Internet</em>. And, once again, sending an
excel <code>XLS</code> file around with a big &ldquo;click me to start the actual program button&rdquo;
seemed, well, janky. Amazingly, a friend had a copy of &ldquo;really real Visual
Basic&rdquo; (the coveted <em>compiler</em> I had heard of), and was able to convert my janky
app-in-<code>XLS</code> to a proper shiny <code>EXE</code> file. Slight caveat - there was a runtime
library that had to be distributed alongside it, or it wouldn&rsquo;t work.</p>
<!-- raw HTML omitted -->
<p>This got me looking at <em>installers</em>. All &ldquo;serious&rdquo; software was proudly using
InstallShield (this was before these newfangled <code>.MSI</code> files - even the
installer was a shiny <code>.EXE</code>!), but looking at a trial version left me
scratching my head at how things should be organized. Finally, a self-extracting
RAR file (yay shareware WinRAR) did the trick. I vaguely recall successfully
uploading the finished product to some download site of the era, probably
Tucows.</p>
<figure><a class="lightgallery" href="/2023/04/23/software-distribution/installshield.png" title="/2023/04/23/software-distribution/installshield.png" data-thumbnail="/2023/04/23/software-distribution/installshield.png" data-sub-html="<h2>If your software didn&rsquo;t come this way in the 90s, was it even real software?</h2>">
        
    </a><figcaption class="image-caption">If your software didn&rsquo;t come this way in the 90s, was it even real software?</figcaption>
    </figure>
<h2 id="linux-early-2000s">Linux (early 2000s)</h2>
<p>In high school, I was first introduced to Linux. It (Mandrake 8.1) came in 3 CDs
burned by a guy who couldn&rsquo;t have seemed shadier if he had pulled them out of a
trench-coat.  Regardless, it was enlightening: How can this possibly be legally
free? Wait, it just <em>comes</em> with a compiler? What do you mean the compiler
doesn&rsquo;t contain a GUI? It was a fascinating dive into understanding what my
computer even <em>is</em>; while I was old enough to remember pre-Windows days, I had
switched to Linux from Windows 98<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, so all of my experience with
Windows was as a graphical wrapper running inside DOS. For instance, not having
drive letters (A, B nor C) was <em>wild</em>.</p>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note: Gentoo<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><!-- raw HTML omitted -->
<p>I didn&rsquo;t spend long with Mandrake before switching to Gentoo Linux, where
installing software is accomplished with the <code>emerge</code> command. The <code>emerge</code>
command magically (to me, at the time) gets the software from the internet and
<em>compiles</em> it. In my mind, I was Hackerman. In reality, it
was more often &ldquo;sorry dad, you can&rsquo;t use the computer today, a new version of
KDE just came out and the build will take a few hours&rdquo;. I stuck with Gentoo
until college<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, when a stack of remarkably slick-looking envelopes with
Ubuntu CDs showed up. At this point Linux started seeming serious, and the &ldquo;year
of the linux desktop&rdquo; meme started to get to me. Ubuntu also killed off
install-fests<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, as installing it was too easy to justify getting
friends and pizza together.</p>
<!-- raw HTML omitted -->
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>My grandma got my old PC with it, so I can proudly say my grandma is
a former Gentoo user. She exclusively used the browser, but whenever she needed
support I was the only one who could provide it, as any other support people
invariably tried to get her to find the &ldquo;start&rdquo; menu, even when the problem was
entirely within gmail.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If anyone has footage of the install-fest I was forced to
trick <a href="https://en.wikipedia.org/wiki/Moshik_Afia" target="_blank" rel="noopener noreffer ">Moshik Afia</a> to go to, as part of פעם בחיים on Yes, please send it my
way!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
</div>
        </div>
    </div>
<p>As I dove deeper into Linux, I realized I&rsquo;m seeing some of the older jank once
again. Lots of software came as shell scripts that ran <code>java</code>, meaning you had
to have the Java Runtime Environment installed. Python software came as scripts,
which needed not only Python itself installed, but usually some additional
python libraries. At this point I noticed the following:</p>
<ol>
<li>This only seems less janky in Linux because executables usually don&rsquo;t have
filename extensions; the difference between a &ldquo;clean <code>.EXE</code>&rdquo; and a &ldquo;janky
<code>.BAT</code>&rdquo; is tucked away in the file contents.</li>
<li>&ldquo;Proper&rdquo; C programs also need a bunch of stuff installed along with them.</li>
</ol>
<p>The Linux ecosystem has a dizzying array of solutions to this problem. From
meticulously<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> packaging DEB files through FlatPak/Snap/whatever
through Docker<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. I&rsquo;m the kind of nerd who&rsquo;s excitedly following
<a href="https://fasterthanli.me/series/building-a-rust-service-with-nix" target="_blank" rel="noopener noreffer ">FasterThanLime&rsquo;s series</a> about how Nix presumably does this
better than anything else.</p>
<h2 id="afterword---the-web">Afterword - the web</h2>
<!-- raw HTML omitted -->
<p>At some point, probably too gradually for me to notice, web apps became actual
apps. XMLHttpRequest is horribly named, but pretty transformative when used by
sites to dynamically fetch more information; Javascript had gradually
transformed to &ldquo;the Assembly language of the web&rdquo; (i.e. it&rsquo;s the thing stuff
compiles to<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>); but the really cool thing about web apps remains
distribution: Just give people the URL.</p>
<!-- raw HTML omitted -->
<p>Yes, there&rsquo;s work to do. You need a server, you need to handle its uptime and
connectivity (cloud has made this effectively trivial, even moreso for quick
demos with things like <a href="https://ngrok.com" target="_blank" rel="noopener noreffer ">ngrok</a>). The app itself also needs to be written
differently: updates are nontrivial, if any state is saved then
backwards-compatibility becomes difficult, you need to handle different browsers
(and different device types); it&rsquo;s not easy. But a giant ecosystem has developed
around solving these problems, and the infrastructure to use the web has become,
by comparison, effectively ubiquitous. And to my 8-year-old self, there&rsquo;d be
nothing cooler than that: &ldquo;Forget the floppies, just give a note with your
address to your classmates; it&rsquo;s basically guaranteed to work on their
computer&rdquo;.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Windows 2000 had pretty much skipped home PCs around me, and XP was new
and untrustworthy.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The <a href="https://www.debian.org/doc/manuals/maint-guide/" target="_blank" rel="noopener noreffer ">Debian New Maintainers&rsquo; Guide</a>, which explains how to do this, starts off with &ldquo;social dynamics of Debian&rdquo; before getting into the details of actually packaging anything.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Sometimes described as &ldquo;It works on your machine? Then we&rsquo;ll ship your machine.&rdquo; <a href="https://www.reddit.com/r/ProgrammerHumor/comments/cw58z7/it_works_on_my_machine/" target="_blank" rel="noopener noreffer ">credit</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>I think compiling stuff to WASM is becoming more popular nowadays.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description></item><item><title>I tried Rust</title><link>https://lutzky.net/2023/01/16/rust/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2023/01/16/rust/</guid><description><![CDATA[<h2 id="its-december-2022-lets-try-rust-">It&rsquo;s December 2022, let&rsquo;s try Rust 🦀</h2>
<p>As you can tell by previous posts on this blog, I used to be quite a fan of Go;
I use it at work often, and some features about it are legitimately great:
Package management, &ldquo;static duck typing&rdquo; (structural typing), providing
interfaces while stepping away from inheritance, all quite nice (and present in
Rust). I wasn&rsquo;t too unhappy with the repetitive error handling, generics are
finally coming into play, and nothing I write is anywhere near
performance-critical enough for me to care about GC overhead (though I did
glance firmly at the binary size once in a while). But come December, as I
decided to give <a href="https://adventofcode.com" target="_blank" rel="noopener noreffer ">Advent of Code</a> a go this year, I figured I&rsquo;d try to use
it to learn a new language: Rust.</p>
<p>Now, Rust has been steadily gaining popularity for a while, but two recent
events caused me to pay attention: In September, a CTO from Microsoft gave Rust
a <a href="https://www.theregister.com/2022/09/20/rust_microsoft_c/" target="_blank" rel="noopener noreffer ">significant endorsement</a>. In that same month,
Linus Torvalds effectively announced that <a href="https://www.zdnet.com/article/linus-torvalds-rust-will-go-into-linux-6-1/" target="_blank" rel="noopener noreffer ">Rust was coming to the Linux
kernel</a>. When those two agree on something, I figured, it&rsquo;s
probably worth paying attention.</p>
<p>To my delight, someone else &mdash; <a href="https://fasterthanli.me" target="_blank" rel="noopener noreffer ">fasterthanlime</a> &mdash; was doing Advent of Code in
Rust. In fact, he was doing a day-by-day <a href="https://fasterthanli.me/series/advent-of-code-2022" target="_blank" rel="noopener noreffer ">&ldquo;let&rsquo;s learn rust while solving Advent
of Code&rdquo;</a> series. <a href="https://fasterthanli.me/series/advent-of-code-2022/part-1" target="_blank" rel="noopener noreffer ">Part 1</a>
includes everything you need to get started, tooling and all, and a delightfully
unusual introduction to file I/O which I won&rsquo;t spoil.</p>
<div class="details admonition tip">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Other ways of getting started with Rust<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">When getting started with Rust, I tried a few things out from
<a href="https://www.rust-lang.org/learn" target="_blank" rel="noopener noreffer ">https://www.rust-lang.org/learn</a>, but my recommendation is this: Before
installing it, before going to the book, before any of that &mdash; go do
<a href="https://github.com/rust-lang/rustlings/" target="_blank" rel="noopener noreffer ">rustlings</a>, specifically use their
Gitpod link. This will set up a free gitpod &ldquo;cloud IDE&rdquo; (VSCode-based),
reasonably configured for Rust, and you can get right to live exercises.</div>
        </div>
    </div>
<p>Having spent some time with Rust, I now see more and more faults with other
programming languages. Others have written many words about this; fasterthanlime
has a couple of <a href="https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride" target="_blank" rel="noopener noreffer ">very</a> <a href="https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang" target="_blank" rel="noopener noreffer ">detailed</a> posts in this
direction; the folks at Discord wrote a great post about <a href="https://discord.com/blog/why-discord-is-switching-from-go-to-rust" target="_blank" rel="noopener noreffer ">switching from go to
rust to eliminate GC latency</a>. But I&rsquo;d like to talk about
something far, far simpler.</p>
<p>Let&rsquo;s talk about null checks.</p>
<h2 id="things-that-may-or-may-not-be-there">Things that may or may not be there</h2>
<p>My initial sense of Rust is that it involves a lot of fighting with the
compiler&hellip; and the compiler being right. Getting code to build is much more
difficult than I&rsquo;m used to, but when it builds &mdash; it works. Not always, but with
a much higher likelihood than I&rsquo;ve seen elsewhere. To explain this phenomenon,
let&rsquo;s take a look at cases when data is allowed to be absent.</p>
<p>It is often useful, in code, to deal with something that may or may not be
present. I&rsquo;ve recently had the unpleasant experience of dealing with
soccer<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> for work<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>; I still don&rsquo;t quite get it, so this
example might not make any sense, but bear with me: Let&rsquo;s imagine that a soccer
<code>Team</code> has several <code>players</code> (each of which is a <code>Person</code> with a <code>name</code> and
<code>age</code>), and may or may not have a <code>coach</code>, who is also a <code>Person</code>. In JSON, that
would look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;players&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Doe&#34;</span><span class="p">,</span> <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">24</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Richard Roe&#34;</span><span class="p">,</span> <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Might be absent:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nt">&#34;coach&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Mark Moe&#34;</span><span class="p">,</span> <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">53</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Suppose you write some code to handle such a <code>Team</code>, and, say, return whether or
not any of the players are older than the coach.</p>
<h3 id="go">Go</h3>
<p>In Go, you&rsquo;d probably end up doing something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nx">Team</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Players</span> <span class="p">[]</span><span class="nx">Person</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Coach</span> <span class="o">*</span><span class="nx">Person</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span> <span class="nx">Team</span><span class="p">)</span> <span class="nf">anyPlayersOlderThanCoach</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Coach</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="c1">// YOU WILL FORGET
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span>      <span class="c1">// TO DO THIS PART,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>                   <span class="c1">// I ASSURE YOU.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="nx">in</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Players</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Age</span> <span class="p">&gt;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Coach</span><span class="p">.</span><span class="nx">Age</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// ...so ^^^^^^^ will sometimes crash.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>At some point you will encounter a team without a coach, and your code will
panic and exit with an error. It won&rsquo;t even be a useful error message &mdash; it&rsquo;ll be
something like this (but probably with many more goroutines).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">panic: runtime error: invalid memory address or nil pointer dereference
</span></span><span class="line"><span class="cl">[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x480c76]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">goroutine 1 [running]:
</span></span><span class="line"><span class="cl">main.main()
</span></span><span class="line"><span class="cl">  /tmp/sandbox3217875017/prog.go:17 +0x16
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Program exited./Op
</span></span></code></pre></td></tr></table>
</div>
</div><p>The issue is that the null (well, <code>nil</code>) pointer is used as a way to indicate
&ldquo;something that is not there&rdquo;, and Go &mdash; just like C &mdash; uses pointers both to
indicate &ldquo;we&rsquo;re dealing with pointing at memory addresses&rdquo; and to indicate
&ldquo;we&rsquo;re dealing with something that may be absent&rdquo;.</p>
<p>Worse yet, because most teams <em>do</em> have coaches, this will be a rare case. It&rsquo;ll
likely be shuffled off into the back of the bug queue as a &ldquo;rare crash&rdquo;, waiting
to jump on you when somehow a coach-free team makes it to the world cup finals.</p>
<h3 id="rust">Rust</h3>
<p>Although rust does support pointers (null and otherwise), those are usually
relegated to <a href="https://doc.rust-lang.org/std/keyword.unsafe.html" target="_blank" rel="noopener noreffer "><code>unsafe</code></a> code. In day-to-day rust, indicating that a
value might be absent is done using <a href="https://doc.rust-lang.org/std/option/index.html" target="_blank" rel="noopener noreffer "><code>std::Option</code></a>. If you were
recreating the same naive approach as Go, you&rsquo;d end up writing something like
this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Team</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">players</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">coach</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Team</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">fn</span> <span class="nf">any_players_older_than_coach</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Don&#39;t code like this, but...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">coach</span><span class="p">.</span><span class="n">as_ref</span><span class="p">().</span><span class="n">is_none</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// This is the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="w">                     </span><span class="c1">// part you will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w">                                  </span><span class="c1">// forget to do.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">coach_age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">coach</span><span class="p">.</span><span class="n">as_ref</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">age</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ...so this part will crash:      ^^^^^^^^
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">players</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">any</span><span class="p">(</span><span class="o">|</span><span class="n">p</span><span class="o">|</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="n">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">coach_age</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Yes, Rust&rsquo;s support for functional-style programming blows Go&rsquo;s out of the
water. Yes, I&rsquo;m salty.</div>
        </div>
    </div>
<p>The error you&rsquo;d get for forgetting to check whether <code>coach.as_ref().is_none()</code>
is actually a bit better:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">thread &#39;main&#39; panicked at &#39;called `Option::unwrap()` on
</span></span><span class="line"><span class="cl">a `None` value&#39;, src/main.rs:13:45
</span></span></code></pre></td></tr></table>
</div>
</div><p>However, there&rsquo;s an extremely handy smoking gun here &mdash; <code>unwrap</code> itself. That&rsquo;s
not a function that usually gets used in production<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> code. A
reviewer or linter should be able to catch it. The function should actually be
written like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">Team</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">fn</span> <span class="nf">any_players_older_than_coach</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">coach</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nb">Some</span><span class="p">(</span><span class="n">definitely_a_coach</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">players</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">any</span><span class="p">(</span><span class="o">|</span><span class="n">p</span><span class="o">|</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="n">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">definitely_a_coach</span><span class="p">.</span><span class="n">age</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c1">// definitely_a_coach can be called &#34;coach&#34; as well,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">      </span><span class="c1">// and usually would - but it&#39;s a different variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">      </span><span class="c1">// with a different type.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Importantly, the type of <code>definitely_a_coach</code> is <em>not</em> <code>Option&lt;Person&gt;</code> &mdash; it&rsquo;s
<code>Person</code>. That is, when using <code>match</code> (which is fairly standard), the guarantee
that &ldquo;you made sure the thing is actually there&rdquo; happens <em>at compile time</em>.
Omitting the <code>None</code> case is a compilation error.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This is a great example of how Rust moves head-scratches from runtime to
compile-time. It&rsquo;s a big part of why it&rsquo;s harder to get Rust code to build.</div>
        </div>
    </div>
<p>In fact, there&rsquo;s an equivalent way to write this, shorter, but providing the
same safety guarantees:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">Team</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">fn</span> <span class="nf">any_players_older_than_coach</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">definitely_a_coach</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">coach</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">players</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">any</span><span class="p">(</span><span class="o">|</span><span class="n">p</span><span class="o">|</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="n">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">definitely_a_coach</span><span class="p">.</span><span class="n">age</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kc">false</span><span class="w"> </span><span class="c1">// Omitting this is also a compilation error;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">          </span><span class="c1">// it won&#39;t let you forget the &#34;else&#34; case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Importantly, the syntax that <em>might</em> panic (<code>unwrap</code>) is quite different, easy
to pick out, and does not have to be used at all. In contrast, in other
languages, like Go, we don&rsquo;t get the opportunity to notice that it&rsquo;s happening.
The <code>coach</code> pointer gets dereferenced using the same syntax, whether or not it&rsquo;s
guaranteed to not be <code>nil</code>.</p>
<h3 id="other-languages">Other languages</h3>
<h4 id="haskell">Haskell</h4>
<p>This seems to be equivalent to the Haskell <code>Maybe</code> type. If I were smart enough
to code in Haskell, I&rsquo;d be sure. One of the nice things about Rust is that it
allows writing code in imperative style without understanding monads.</p>
<h4 id="java">Java</h4>
<p>Java 8 introduced <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener noreffer "><code>java.util.Optional</code></a>, which does the same
thing as Rust&rsquo;s <code>Option</code>. However, the safety guarantees are more limited:</p>
<ul>
<li>
<p>You can check <code>ifPresent()</code> and use <code>get()</code>, but this is no better than
checking if a standard reference would be <code>null</code> (that is &mdash; nothing makes sure
that you did so, and if nothing is there &mdash; <code>get()</code> throws an exception).</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Apparently some external inspectors do check for this, e.g.
<a href="https://rules.sonarsource.com/java/RSPEC-3655" target="_blank" rel="noopener noreffer ">https://rules.sonarsource.com/java/RSPEC-3655</a></div>
        </div>
    </div>
</li>
<li>
<p>You can use <code>orElse(defaultValue)</code>, which makes sense in some cases, but not
always (what if it&rsquo;s a temperature-in-celsius that might be absent? You can&rsquo;t
use 0° as a default value).</p>
</li>
<li>
<p>You can use various other methods like <code>filter</code> and <code>map</code>, but that requires
callback-style programming (which I don&rsquo;t <em>think</em> is the norm for Java).</p>
</li>
</ul>
<p>At the end of the day, Java&rsquo;s legacy is probably a limiting factor here &mdash; your
code likely needs to interoperate with a pile of code that simply uses <code>null</code>
the traditional way for &ldquo;thing that is not there&rdquo;.</p>
<p>Finally, researching for this post showed at least one guide claiming the
following as <a href="https://www.baeldung.com/java-optional#misuages" target="_blank" rel="noopener noreffer ">Misuse of
<code>Optional</code></a>:</p>
<ul>
<li>Passing an <code>Optional</code> parameter to a method</li>
<li>Having an <code>Optional</code> field (also discussed <a href="https://stackoverflow.com/questions/23454952/uses-for-optional" target="_blank" rel="noopener noreffer ">here</a>), exactly
as we&rsquo;re doing here.</li>
</ul>
<p>&hellip;so I guess you&rsquo;re stuck null-checking for those cases.</p>
<h4 id="c">C++</h4>
<p>C++17 adds <a href="https://en.cppreference.com/w/cpp/utility/optional" target="_blank" rel="noopener noreffer ">std::optional</a>. I haven&rsquo;t tried it out, but judging
from <a href="https://devblogs.microsoft.com/cppblog/stdoptional-how-when-and-why/" target="_blank" rel="noopener noreffer ">a quick read</a>, it appears to be more robust than
Java&rsquo;s, but still far less safe than Rust&rsquo;s: You&rsquo;re still checking <code>has_value()</code>
and risking an exception when calling <code>value()</code> (&hellip;does your codebase even
<a href="https://google.github.io/styleguide/cppguide.html#Exceptions" target="_blank" rel="noopener noreffer ">allow for exceptions</a>?), or using <code>value_or</code> if a
sentinel value is acceptable.</p>
<h2 id="why-does-this-matter">Why does this matter?</h2>
<p>Go is often regarded as a memory-safe<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> language. And that&rsquo;s technically
correct in this case &mdash; if you get a null dereference, your code will simply
crash, as opposed to some crazy Undefined Behavior. Presumably your production
setup is resilient to crashes, and you&rsquo;ll catch these crashes in pre-production
anyway.</p>
<p>&hellip;except, it&rsquo;ll take you a while to do that. And the crash will seem quite
esoteric, and might not even happen in pre-production (does your test data
contain teams without coaches?)&hellip; and, once again, if a coach-free team
suddenly plays a very popular match, are you really set up to deal with such
consistent crashes?</p>
<p>It&rsquo;s possible to build automatic tooling for detecting these cases, and people
far smarter than myself are already doing so. Unfortunately, applying them to
legacy code is an even harder. I&rsquo;ve seen such a &ldquo;you did not check for null&rdquo;
static analyzer completely miss a case quite similar to the above; and while we
did catch it in pre-production, a lot of people wasted a lot of needless time on
it.</p>
<p>This is also only one (relatively-simple) example of what Rust does about
safety. A more elaborate example is <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html" target="_blank" rel="noopener noreffer ">mutexes</a>: A rust mutex &ldquo;holds&rdquo;
the protected data, requiring you to <code>lock()</code> it to even access the data. This
means that the type-system guarantees that the mutex protects whatever it&rsquo;s
meant to protect. In Go, however, the protected value just <a href="https://dmitri.shuralyov.com/idiomatic-go#mutex-hat" target="_blank" rel="noopener noreffer ">wears the mutex as a
hat</a> &mdash; so the compiler has no clue. (There&rsquo;s at least one person
<a href="https://github.com/dragazo/rustex" target="_blank" rel="noopener noreffer ">porting this idea into C++</a>)</p>
<p>So examine your programming language; see what safety guarantees you&rsquo;d like it
to have (try to use the ones it already does!); and perhaps look at Rust for a
bit of inspiration.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Short for &mdash; did you know? &mdash; Association Football. I live in Ireland,
which plays multiple kinds of football, so I find &ldquo;soccer&rdquo; to be the more
specific term.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I really don&rsquo;t like watching any kind of sportsball, but there was
a fair bit of excitement around the recent FIFA World Cup, and my
involvement extended to having to watch some of those matches. Live 🙄. In
contrast, to relax in the evenings, I did AoC &mdash; so I effectively watch
soccer for a living and code for fun.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Rust actually has many useful-while-prototyping functions, like
<a href="https://doc.rust-lang.org/std/macro.todo.html" target="_blank" rel="noopener noreffer "><code>todo!()</code></a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>And people use that reasoning to build some pretty cool stuff, like
<a href="https://gokrazy.org" target="_blank" rel="noopener noreffer ">https://gokrazy.org</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>Remote White Noise</title><link>https://lutzky.net/2022/05/21/remote-white-noise/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2022/05/21/remote-white-noise/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>One young-child-parenting trick that has worked well for us is white noise. It might be because it emulates in-the-womb-noises, drowns out other noises, or gives baby something to fixate on - but it often does a great job of calming him to sleep. Nearly a year old now, he thankfully doesn&rsquo;t usually need it for night sleeps, but it&rsquo;s helpful for a &ldquo;cranky-because-tired&rdquo; nap or getting him to sleep for another half-hour when he decides to wake up very early.</p>
<p>There are quite a few ways to play white noise, and many cheap mobile battery-powered devices will do the trick just fine. However, I wanted a bit more control, at least for when we&rsquo;re at home:</p>
<ul>
<li>It&rsquo;d be useful to turn on the noise remotely, as entering a cranky baby&rsquo;s room sometimes riles him up.</li>
<li>It&rsquo;d be useful to (gradually!) turn <em>off</em> the noise remotely, especially as my wife doesn&rsquo;t like the sound and it can be made worse with a baby monitor.</li>
<li>I&rsquo;d like to customize the sound itself (we&rsquo;re actually going for more of a <a href="https://www.youtube.com/watch?v=ZXtimhT-ff4" target="_blank" rel="noopener noreffer ">pink</a>/<a href="https://www.youtube.com/watch?v=RqzGzwTY-6w" target="_blank" rel="noopener noreffer ">brown</a> noise)</li>
</ul>
<p>After trying out several options, I went for using a Google Home Mini; we have several of those lying around (they used to come as free gifts with various purchases), the audio quality is reasonable, and it&rsquo;s compact and clean-looking. Although it does respond to a &ldquo;play white noise&rdquo; command, that plays <a href="http://www.gstatic.com/voice_delight/sounds/long/pink_noise.mp3" target="_blank" rel="noopener noreffer ">this 1-hour-long segment</a>, which is too short. Instead, I created a 10 hour version with customized parameters like so (mostly inspired <a href="https://askubuntu.com/questions/789465/generate-white-noise-to-calm-a-baby" target="_blank" rel="noopener noreffer ">here</a>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sox -c1 -n result.ogg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  synth <span class="m">36000</span> brownnoise synth pinknoise <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  mix synth sine amod 0.1 <span class="m">90</span>
</span></span><span class="line"><span class="cl">ffmpeg -i result.ogg result.mp3
</span></span></code></pre></td></tr></table>
</div>
</div><p>Why is the conversion to MP3 important? See <a href="#quirks" rel="">quirks</a>.</p>
<p>The rest is a matter of hooking it up to <a href="https://www.home-assistant.io/" target="_blank" rel="noopener noreffer ">homeassistant</a>. The <code>media_player.play_media</code> service gets it to play just fine. To make it easy to toggle, I created an <a href="https://www.home-assistant.io/integrations/input_boolean/" target="_blank" rel="noopener noreffer ">input boolean</a> and automation to start or stop media when it changes. Because the google home can also be stopped directly, I added a second automation which sets the input boolean off when that happens.</p>
<h2 id="main-dashboard-toggle">Main dashboard toggle</h2>
<p>Having the white-noise-toggle on the main dashboard (an old chromebook in kiosk mode) is quite useful, especially when babysitters are involved. (There&rsquo;s also a physical button, driven by ESPHome, in the nursery - but that&rsquo;s not quite remote).</p>
<p>My wife had a great idea for styling this toggle - showing a picture of the baby awake when the white noise is off, and asleep when it&rsquo;s on:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">picture-entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">show_state</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">show_name</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">entity</span><span class="p">:</span><span class="w"> </span><span class="l">input_boolean.white_noise_toggle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">state_image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;off&#34;: </span><span class="l">local/awake.jpg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;on&#34;: </span><span class="l">local/sleeping.jpg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">White Noise</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tap_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">action</span><span class="p">:</span><span class="w"> </span><span class="l">toggle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">hold_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">action</span><span class="p">:</span><span class="w"> </span><span class="l">more-info</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>hold_action: more-info</code> thing is quite useful, as it can quickly indicate how long the white noise was on, approximating how long the nap has been so far (assuming the white noise does its job).</p>
<h2 id="secondary-controls">Secondary controls</h2>
<p>For additional control, in a separate <a href="https://www.home-assistant.io/dashboards/views/" target="_blank" rel="noopener noreffer ">tab</a> of the dashboard, I have the following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">vertical-stack</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cards</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">entities</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">entity</span><span class="p">:</span><span class="w"> </span><span class="l">media_player.googlehome1234</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">custom:slider-entity-row</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">mdi:volume-high</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">White noise volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">entity</span><span class="p">:</span><span class="w"> </span><span class="l">input_boolean.white_noise_toggle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">secondary_info</span><span class="p">:</span><span class="w"> </span><span class="l">last-changed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">markdown</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">content</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Note: White noise volume is usually 40%. If it&#39;s off, it shows as 0%.&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This allows easily controlling the volume (when it&rsquo;s on!), reminds us of what the &ldquo;usual&rdquo; volume setting is, and also quickly displays how long ago it was last toggled. <code>slider-entity-row</code> is an extension, which can be obtained <a href="https://github.com/thomasloven/lovelace-slider-entity-row" target="_blank" rel="noopener noreffer ">here</a>.</p>
<h2 id="quirks">Quirks</h2>
<p>While this setup works quite well, it has a couple of annoying quirks. Firstly, the Google Home plays a fairly loud chime before starting to play the white noise. Secondly, this involves the Google Home loading a ~300MB file. Originally I used ogg, and although it&rsquo;s usually cached, in some cases this could be a ~30-second process, with no user feedback visible. I&rsquo;ve considered having the script play a shorter clip multiple times over, but the playback has unpleasant gaps in that case (and risks repeating that loud chime).</p>
<p>However, it seems that when pointing to an <em>mp3</em> file, audio starts playing immediately, without having to first finish downloading the whole file. The Google Home is pretty opaque about this, but experimentation seems to show this is consistent.</p>
<h2 id="afterword">Afterword</h2>
<p>Overall, this process of getting familiar with HomeAssistant and its various integrations has been delightful, with great community support and debuggability. My first thoughts were &ldquo;I don&rsquo;t need this - my projects are simple and I can code them myself&rdquo; - but the plethora of readily available integrations and the polished UI has made it well worth my time learning, and making changes is a breeze. And if my child sleeps better for it, that&rsquo;s a win in my book.</p>
]]></description></item><item><title>Preloading disk encryption keys</title><link>https://lutzky.net/2022/01/26/preload-key/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2022/01/26/preload-key/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>I run a small home server, which - among other things - has backups of data from cloud providers, in case I lose access to them; this data is sensitive and should therefore be encrypted. However, disk encryption requires a secret, and there are - generally speaking - four ways to go about that:</p>
<ul>
<li>Store the key on the same server as the encrypted disk</li>
<li>Store the key on detachable media, attached to the same server as the encrypted disk</li>
<li>Store the key on a different server</li>
<li>Store the key in your brain (this is known as a &ldquo;passphrase&rdquo; or &ldquo;password&rdquo;)</li>
</ul>
<p>Using a separate server is a bit more complicated than I&rsquo;d like to go (and is not always supported, e.g. in the free version of TrueNAS Core), and storing the key on the same server won&rsquo;t protect me in case the server is stolen. For my usecase, it&rsquo;s an easily burgler-accessible NUC. Detchable media will have to remain attached, as I want to be able to reboot remotely (I&rsquo;ve heard some interesting suggestions, e.g. &ldquo;store the key in a USB key glued to your desk so the burgler will probably just disconnect it from the server&rdquo;). The last option is the simplest and most convenient, except when rebooting.</p>
<p>When rebooting an encrypted system that uses a passphrase, you essentially have to do the following:</p>
<ol>
<li>Learn that a reboot is required (about once every 12 days on my server, for a kernel security update)</li>
<li>Connect to the server to reboot it</li>
<li>Wait for it to reboot</li>
<li>Connect to the server again to input the passphrases</li>
</ol>
<p>I always hate actions with a &ldquo;wait&rdquo; part to them, so I figured - wouldn&rsquo;t it be nice to input the passphrases as part of the reboot process? That way I essentially shave off steps 3 and 4. The idea is to allow <em>just the next boot</em> to load the encrypted bits without entering any passwords, authorized by, well, someone who knows the relevant passwords. Hopefully burglars aren&rsquo;t sophisticated enough to target my machine on kernel patch days.</p>
<p>My particular system uses ZFS-on-linux with a couple of encrypted filesystems, and the following is an implementation using systemd and Go. I do think the idea is useful enough for other passphrase-encrypted systems (e.g. LUKS).</p>
<p>The overall design is:</p>
<ol>
<li>Before rebooting, you run the go binary on the server as root. It will:
<ol>
<li>Figure out which ZFS filesystems currently have a loaded key</li>
<li>Ask for the password for those (and check that it&rsquo;s correct)</li>
<li>Create <code>/zfs-reboot-passphrase.sh</code> with the passphrases embedded
<ul>
<li><code>shellescape</code> turns out to be useful, as <code>fmt.Sprintf(&quot;%q&quot;, password)</code> insists on using double quotes, which doesn&rsquo;t prevent bash from interpreting strings.</li>
</ul>
</li>
</ol>
</li>
<li>On boot, the <code>zfs-reboot-passphrase</code> systemd service will check if <code>/zfs-reboot-passphrase.sh</code> exists and run it. It will:
<ol>
<li>Load the embedded passphrases and mount the relevant filesystems</li>
<li><code>shred -u</code> itself - rewrite itself with random data to prevent undeletion, and then delete itself.</li>
</ol>
</li>
</ol>
<p>The specific implementation isn&rsquo;t super-clean nor important, but I&rsquo;m attaching it as-is (buyer beware) for completeness. Hopefully it serves as inspiration for something useful.</p>
<p><strong><code>/lib/systemd/system/zfs-reboot-passphrase.service</code>:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[Unit]</span>
</span></span><span class="line"><span class="cl"><span class="na">Description</span><span class="o">=</span><span class="s">Mount remaining ZFS filesystems with passphrase</span>
</span></span><span class="line"><span class="cl"><span class="na">After</span><span class="o">=</span><span class="s">zfs.service</span>
</span></span><span class="line"><span class="cl"><span class="na">ConditionPathExists</span><span class="o">=</span><span class="s">/zfs-reboot-passphrase.sh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Service]</span>
</span></span><span class="line"><span class="cl"><span class="na">Type</span><span class="o">=</span><span class="s">oneshot</span>
</span></span><span class="line"><span class="cl"><span class="na">ExecStart</span><span class="o">=</span><span class="s">/zfs-reboot-passphrase.sh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>
</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong><code>load_keys.tmpl</code>:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="o">{{</span> range <span class="nv">$path</span>, <span class="nv">$password</span> :<span class="o">=</span> .<span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="o">{{</span> <span class="nv">$password</span> <span class="o">}}</span> <span class="p">|</span> zfs load-key <span class="o">{{</span> <span class="nv">$path</span> <span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="o">{{</span> end <span class="o">}}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">{{</span> range <span class="nv">$path</span>, <span class="nv">$password</span> :<span class="o">=</span> . <span class="o">}}</span>
</span></span><span class="line"><span class="cl">zfs mount <span class="o">{{</span> <span class="nv">$path</span> <span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="o">{{</span> end <span class="o">}}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> shred -u <span class="nv">$0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong><code>main.go</code>:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;embed&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;flag&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;io&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;os/exec&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;os/user&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;text/template&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;golang.org/x/term&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;gopkg.in/alessio/shellescape.v1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//go:embed *.tmpl
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">templatesFS</span> <span class="nx">embed</span><span class="p">.</span><span class="nx">FS</span>
</span></span><span class="line"><span class="cl">  <span class="nx">templates</span>   <span class="p">=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nf">ParseFS</span><span class="p">(</span><span class="nx">templatesFS</span><span class="p">,</span> <span class="s">&#34;*.tmpl&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">skipPasswordCheck</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">Bool</span><span class="p">(</span><span class="s">&#34;skip_password_check&#34;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;Do not check entered passwords&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">outputFile</span>        <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;output_file&#34;</span><span class="p">,</span> <span class="s">&#34;/zfs-reboot-passphrase.sh&#34;</span><span class="p">,</span> <span class="s">&#34;Write output to this file (blank is stdout)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">mustBeRoot</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">fileSystems</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">fileSystemsWithKeyStatus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">templateData</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">fs</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">fileSystems</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">password</span> <span class="o">:=</span> <span class="nf">getPassword</span><span class="p">(</span><span class="nx">fs</span><span class="p">);</span> <span class="nx">password</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">templateData</span><span class="p">[</span><span class="nx">fs</span><span class="p">]</span> <span class="p">=</span> <span class="nx">shellescape</span><span class="p">.</span><span class="nf">Quote</span><span class="p">(</span><span class="nx">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Skipping&#34;</span><span class="p">,</span> <span class="nx">fs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">out</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">*</span><span class="nx">outputFile</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">    <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="o">*</span><span class="nx">outputFile</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">O_RDWR</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_CREATE</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_TRUNC</span><span class="p">,</span> <span class="mo">0700</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nb">panic</span><span class="p">(</span><span class="s">&#34;Can&#39;t write to &#34;</span> <span class="o">+</span> <span class="o">*</span><span class="nx">outputFile</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">templates</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nx">out</span><span class="p">,</span> <span class="nx">templateData</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">out</span> <span class="o">!=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Wrote&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">outputFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getPassword</span><span class="p">(</span><span class="nx">fs</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Password for %s (empty to skip): &#34;</span><span class="p">,</span> <span class="nx">fs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pass</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">term</span><span class="p">.</span><span class="nf">ReadPassword</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">.</span><span class="nf">Fd</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">continue</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">fs</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Password mismatch: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">continue</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">pass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">mustBeRoot</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">u</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">Current</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">panic</span><span class="p">(</span><span class="s">&#34;Could not check I&#39;m root&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Uid</span> <span class="o">!=</span> <span class="s">&#34;0&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">panic</span><span class="p">(</span><span class="s">&#34;Must run as root&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">fileSystemsWithKeyStatus</span><span class="p">()</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">result</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">  <span class="nx">keyStatus</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;zfs&#34;</span><span class="p">,</span> <span class="s">&#34;get&#34;</span><span class="p">,</span> <span class="s">&#34;-H&#34;</span><span class="p">,</span> <span class="s">&#34;-t&#34;</span><span class="p">,</span> <span class="s">&#34;filesystem&#34;</span><span class="p">,</span> <span class="s">&#34;keystatus&#34;</span><span class="p">).</span><span class="nf">Output</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to check filesystems with keys: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">line</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">keyStatus</span><span class="p">),</span> <span class="s">&#34;\n&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">spl</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Fields</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">line</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">spl</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">spl</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#34;available&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">spl</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">checkPassword</span><span class="p">(</span><span class="nx">fs</span><span class="p">,</span> <span class="nx">password</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">*</span><span class="nx">skipPasswordCheck</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;zfs&#34;</span><span class="p">,</span> <span class="s">&#34;load-key&#34;</span><span class="p">,</span> <span class="s">&#34;-n&#34;</span><span class="p">,</span> <span class="nx">fs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stdin</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">StdinPipe</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to send password to zfs load-key: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">stdin</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">io</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">stdin</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">CombinedOutput</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;password verification failed: %s&#34;</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">output</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Newborn parenting software - part 3</title><link>https://lutzky.net/2021/10/10/software-parenting-3/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2021/10/10/software-parenting-3/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>As noted in the <a href="https://lutzky.net/2021/10/05/software-parenting-2/" rel="">previous post</a>, I decided that the implementation is more appropriate for a microcontroller than a full-fledged computer. While the Arduino is probably the best-known microcontroller, the standard one doesn&rsquo;t have wifi (the one with wifi is ~$50). The ESP8266, on the other hand, is a microcontroller chip with wifi capabilities, available<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> on dev boards like the NodeMCU for about $2 apiece - so I bought a few of them. The ESP8266 is sometimes used as a wifi add-on for Arduino, but it&rsquo;s quite capable as a microcontroller on its own (and the newer ESP32 is faster).</p>
<p>So what&rsquo;s the difference between a (very small) computer and a microcontroller? A Raspberry Pi boots off an SD card, usually to a full-fledged Linux operating system; you&rsquo;d operate it either directly with a monitor and keyboard, or connect remotely using SSH. You can install/create software on it as you would on a &ldquo;full-size&rdquo; computer, and I usually do this in Go (although Python is more popular). Conversely, a microcontroller will usually run only one program, which you need to build on a separate computer, connect it over USB to the microcontroller board, and flash it. This has a number of advantages, including simplicity and pretty-much-instant boot.</p>
<p>Coding for the ESP8266 can be done using the same tooling as Arduino - namely, in C++<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, on the Arduino IDE. However, during this project I learned of <a href="https://platformio.org/" target="_blank" rel="noopener noreffer ">PlatformIO</a>, which is far more comfortable to work with: It&rsquo;s integrated into VSCode, and git, auto-formatting, autocomplete and <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim" target="_blank" rel="noopener noreffer ">VIM keybindings</a> all work nicely. It also provides a more organized approach to unit testing (practically absent in Arduino IDE) and per-project dependency management (you can list what each project needs and have it auto-install). This made the project fun enough for a few iterations.</p>
<p>One quirk of working with the BabyBuddy API is that reporting a diaper change requires supplying the time of change, even if our intention is &ldquo;right now&rdquo;. That&rsquo;s easy enough on a Linux system, but microcontrollers don&rsquo;t generally have clocks. Thankfully, libraries such as <a href="https://github.com/mcxiaoke/ESPDateTime" target="_blank" rel="noopener noreffer ">ESPDateTime</a> provide NTP support baked right into your program. At this point, the NodeMCU version worked, and replaced the previous implementation:</p>
<figure><a class="lightgallery" href="/2021/10/10/software-parenting-3/poobuttons-v2.jpg" title="/2021/10/10/software-parenting-3/poobuttons-v2.jpg" data-thumbnail="/2021/10/10/software-parenting-3/poobuttons-v2.jpg" data-sub-html="<h2>Poobuttons v2 - nodeMCU on breadboard</h2>">
        
    </a><figcaption class="image-caption">Poobuttons v2 - nodeMCU on breadboard</figcaption>
    </figure>
<p>Indeed, this version fits neatly onto a single (full-sized) breadboard. It&rsquo;s not quite <a href="https://www.youtube.com/watch?v=PE-_rJqvDhQ" target="_blank" rel="noopener noreffer ">Ben Eater</a> grade, but the NodeMCU is pretty good for breadboard mounting, and using solid-core jumpers let me make it much neater than the previous iteration. However, at this point we realized there was a missing feature: We were never quite sure if we had pressed the button, especially if we were performing a diaper change together<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> . A couple of LEDs can only convey so much information.</p>
<p>I decided to repurpose my <a href="https://lutzky.net/2021/03/14/pitemp/" target="_blank" rel="noopener noreffer ">shitty cardboard LCD case</a> for this project. These tactile buttons have quite short feet - they don&rsquo;t make it through the cardboard, and I insisted on avoiding using a perfboard and soldering iron - as, at the time, I had neither. I ultimately decided to reuse the mini-breadboard from <a href="https://lutzky.net/2021/10/05/software-parenting-2/" rel="">the previous version</a>; like many (all?) breadboards, its bottom is an adhesive pad; I didn&rsquo;t even bother to remove the resistors from V1, they add a certain design flare to it. With a few iterations on the UI, it was wife-approved: Custom characters are fully supported in C++ (though, not in Go), so I got nice labels for the tactile buttons, as well as a heartbeat<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> to indicate that NTP is still working.</p>
<figure><a class="lightgallery" href="/2021/10/10/software-parenting-3/poobuttons-v3.jpg" title="/2021/10/10/software-parenting-3/poobuttons-v3.jpg" data-thumbnail="/2021/10/10/software-parenting-3/poobuttons-v3.jpg" data-sub-html="<h2>Poobuttons v3 - nodeMCU with LCD in cardboard</h2>">
        
    </a><figcaption class="image-caption">Poobuttons v3 - nodeMCU with LCD in cardboard</figcaption>
    </figure>
<p>Overall, the project has been a blast, and the result is everyday-useful. Working on it has made me realize how much I need my own space for late-night electronics projects, but that&rsquo;s a project for another day.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Actually available - as in, as opposed to Raspberry Pi 0w, they&rsquo;re in stock in many places at the moment.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Unfortunately, <a href="https://tinygo.org/docs/reference/microcontrollers/nodemcu/" target="_blank" rel="noopener noreffer ">TinyGo does not yet support wifi</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>We call this procedure <a href="https://www.youtube.com/watch?v=BI75uWxEajA" target="_blank" rel="noopener noreffer ">Formula 1</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>2nd row from the bottom, rightmost column; you can see it fading out in this shot. It blinks every second. Although the photo doesn&rsquo;t show it, the LCD&rsquo;s contrast is actually great in-person.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>Newborn parenting software - part 2</title><link>https://lutzky.net/2021/10/05/software-parenting-2/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2021/10/05/software-parenting-2/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>With BabyBuddy now installed and running properly (see <a href="https://lutzky.net/2021/10/03/software-parenting-1/" rel="">previous post</a>), and an always-on display showing the latest information, we now got into the swing of using it. We loved the timeline for &ldquo;what happened while I as sleeping&rdquo;; we loved the food amount reports; and because we had a consistent &ldquo;feed, then change, then wait 15 minutes with baby upright to reduce spit-up&rdquo; system, the display&rsquo;s &ldquo;time since last change&rdquo; box was super useful as well. However, as you might imagine, we did <em>not</em> love handling a freshly-re-diapered baby with one hand while using the other to unlock the phone and navigate to the &ldquo;yes he pooped now&rdquo; page in a web app.</p>
<p>My first idea was to create voice commands for the Nest Home Mini in the room. However, it&rsquo;s prone to misunderstanding us; you have to enunciate, and even then the speech recognition is mostly tuned to preexisting Google Assistant commands, and tends to guess that we aren&rsquo;t really saying words like &ldquo;pee&rdquo; or &ldquo;poo&rdquo;. Furthermore, the baby might be crying, or worse yet - lightly sleeping, at risk of being woken up by our voice (or the assistant&rsquo;s). What we needed was a button (well, two - one for pee and one for poo).</p>
<p>I had a Raspberry Pi ZeroW lying around <a href="https://lutzky.net/2021/03/14/pitemp/" rel="">from a previous project</a> and decided to use it for this (the small OLED display wasn&rsquo;t used for this project, but I didn&rsquo;t find a good reason to take it off yet; more on that later). With bits I had from a generic &ldquo;learn electronics&rdquo; kit (which I bought for the specific purpose of having such bits), I created the user interface: Two buttons, a green LED for &ldquo;OK&rdquo;, a red LED for &ldquo;something went wrong&rdquo;; all tied together by some jumper cables and a mini breadboard. The Raspberry Pi would handle communicating with BabyBuddy&rsquo;s API (over wifi), reading the buttons, and driving the LEDs. The setup was indeed quite similar to PiTemp&rsquo;s with the software written in Go, cross-compiled, and run on startup using systemd.</p>
<figure><a class="lightgallery" href="/2021/10/05/software-parenting-2/poobuttons-rpi0w.jpg" title="/2021/10/05/software-parenting-2/poobuttons-rpi0w.jpg" data-thumbnail="/2021/10/05/software-parenting-2/poobuttons-rpi0w.jpg" data-sub-html="<h2>PooButtons on Raspberry Pi ZeroW</h2>">
        
    </a><figcaption class="image-caption">PooButtons on Raspberry Pi ZeroW</figcaption>
    </figure>
<p>One annoying quirk with the Raspberry Pi Zero for this is that it would register phantom button presses; they&rsquo;d be quite rare, fewer than 5 a day, but that&rsquo;s certainly enough to mess up diaper reporting. I&rsquo;m not sure if it&rsquo;s something about the particular GPIO pins I used (GPIO24, GPIO22), and disconnecting the OLED display didn&rsquo;t work. I ended up following the old joke:</p>
<blockquote>
<p>How many software engineers does it take to change a lightbulb?</p>
<p>None, it&rsquo;s a hardware problem.</p>
<p>How many hardware engineers does it take to change a lightbulb?</p>
<p>None, they&rsquo;ll fix it in the software drivers.</p>
</blockquote>
<p>Specifically it ended up looking something like this (with another goroutine listening on the resulting channel):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">debounceTime</span> <span class="p">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stableTime</span>   <span class="p">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">listenButtons</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pull</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">PullUp</span>
</span></span><span class="line"><span class="cl">  <span class="nx">edge</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">FallingEdge</span>
</span></span><span class="line"><span class="cl">  <span class="nx">level</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">Low</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">pin</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="nx">gpio</span><span class="p">.</span><span class="nx">PinIO</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pinButton1</span><span class="p">,</span>  <span class="c1">// GPIO24
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">pinButton2</span><span class="p">,</span>  <span class="c1">// GPIO22
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">n</span> <span class="o">:=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pin</span> <span class="o">:=</span> <span class="nx">pin</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">debounceTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">In</span><span class="p">(</span><span class="nx">pull</span><span class="p">,</span> <span class="nx">edge</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Failed to set pin to input: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">WaitForEdge</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Got edge, waiting %v for stability&#34;</span><span class="p">,</span> <span class="nx">stableTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">stableTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">Read</span><span class="p">()</span> <span class="o">==</span> <span class="nx">level</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal was stable, counting as press&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal did not remain stable, discarding&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;WaitForEdge returned false, ignoring&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s not ideal, but it seemed to work; certainly seemed like it should be library code, for someone smarter to debug. Indeed, it turns out that the <code>periph.io</code> library had a <a href="https://pkg.go.dev/periph.io/x/conn/v3@v3.6.8/gpio/gpioutil#Debounce" target="_blank" rel="noopener noreffer ">Debounce function</a> to help with this, but at the time it <a href="https://github.com/periph/conn/issues/5" target="_blank" rel="noopener noreffer ">wasn&rsquo;t implemented at all</a> (and now that I&rsquo;ve spent some time on it, it&rsquo;s partially implemented).</p>
<p>Ultimately, the device worked rather well, and the button pushes were quite satisfying, especially after a particularly nasty diaper change (AKA a poonami). However, it did leave a lot to be desired: The cabling was flimsy and patchy (the pins coming from the ribbon were easy to disconnect), and using a Raspberry Pi here was overkill. Indeed, I ended up using that Raspberry Pi (and OLED display) as a <a href="https://pikvm.org/" target="_blank" rel="noopener noreffer ">PiKVM</a>, and using a microcontroller for the diaper change buttons instead. More on that in the next post.</p>
]]></description></item><item><title>Newborn parenting software - part 1</title><link>https://lutzky.net/2021/10/03/software-parenting-1/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2021/10/03/software-parenting-1/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>A few months ago, I became a father. To help overcome some of the challenges of raising a newborn, I decided to employ my standard MO - software; preferably the kind where I understand what it&rsquo;s doing. It&rsquo;s been working well, and I learned a lot doing it - several blog posts&rsquo; worth, in fact.</p>
<p>For this story to make sense, it bears mentioning that our conditions are pretty much optimal for it: My employer provides a generous parental leave for the non-birth parent; we decided in advance to formula-feed, which allows us to share that load, which means we need to communicate about it; my partner is an early bird whereas I am a night-owl, meaning we essentially have separate shifts necessitating a handoff; and, critically, we&rsquo;re the type of people who <em>like</em> everything being super-organized and scheduled and spreadsheet-y (calms us down, gives us an illusion of control). Furthermore, our baby is remarkably consistent, being hungry right about every 3 hours - so the question we ended up constantly asking (of each other and our phones) was &ldquo;how long since the baby ate&rdquo;.</p>
<p>We knew in advance we&rsquo;d need some sort of a baby tracking app, of which there are <em>many</em>. After some research, I found that few of the free ones are designed to be used from multiple devices (e.g. dad&rsquo;s and mom&rsquo;s phones), which is a hard requirement. We found two contenders: Baby+ and BabyBuddy.</p>
<h2 id="baby">Baby+</h2>
<p><a href="https://philips-digital.com/baby-new/" target="_blank" rel="noopener noreffer ">Baby+</a> is an Android and iPhone app for tracking babies; it follows <a href="https://philips-digital.com/pregnancy-new/" target="_blank" rel="noopener noreffer ">pregnancy+</a>, which we were quite happy with (especially as, before the birth, our responsiveness requirements were looser - I&rsquo;ll get to that). It can track quite a few things, but not Tummy Time for one (in our case it turns out to be pretty important). Like pregnancy+, the design is very aesthetically pleasing, and it regularly shows timely, short, and useful articles for the parents.</p>
<p>While the app does have cloud sync, it doesn&rsquo;t have a web UI (it&rsquo;s phone/tablet-only) nor an open HTTP API for me to reasonably code against. It does have an export function, but it&rsquo;s only really intended for importing by the app itself as backup. It&rsquo;s super-clunky to work with - I know because I ended up using it to perform some analysis with a spreadsheet(&ldquo;how long is the baby going between feeds&rdquo;).</p>
<p>The biggest disadvantage of Baby+ is that it doesn&rsquo;t <em>really</em> support multiple users. From the app&rsquo;s internal FAQ (only available after installing it and setting up an account):</p>
<blockquote>
<p><strong>How can I use this app with my partner?</strong></p>
<p>You can share the app by logging in with the <strong>same email and password</strong>. If you use your device and enter data (e.g. a note) then you need to minimise or close the app for it to send the new data to the server <em>[&hellip;]</em>.</p>
<p><strong>Important</strong>: the app is designed to be used by on person at a a time <em>[&hellip;]</em> otherwise data can be overwritten or deleted. <em>[&hellip;]</em> allow a few mins for the data to sync (the second device should also have the app closed for a few mins at this point so it can fetch the data <em>[&hellip;]</em>).</p>
<p>Please note that you will encounter data loss if you are using the app on two devices at the same time.</p>
</blockquote>
<p>I&rsquo;d guess that the app basically talks to the server on startup, compares timestamps of its entire database, and downloads or uploads the entire database depending on which version is newer. The startup time checks out:</p>
<p>Starting Baby+ on an android phone, after closing it so it syncs, takes about 7 seconds; an eternity in screaming-baby-debug-time. Furthermore, that doesn&rsquo;t include sync time, and old data will be shown for a few more seconds before the sync is complete; that starts off with slight frights (&ldquo;the baby didn&rsquo;t eat for 5 hours?! oh, wait, actually 1 hour&rdquo;), and eventually devolves into distrusting the app.</p>
<p>This felt like a silly problem to have; almost any web-based app would have none of these issues. Furthermore, I thought, there&rsquo;s surely an open-source one where I could fix any annoyances I have myself. Indeed, that would be BabyBuddy.</p>
<h2 id="babybuddy">BabyBuddy</h2>
<p><a href="https://github.com/babybuddy/babybuddy" target="_blank" rel="noopener noreffer ">BabyBuddy</a> is an open-source web app, self-described as &ldquo;to help caregivers track sleep, feedings, diaper changes, and tummy time to learn about and predict baby&rsquo;s needs without (as much) guess work&rdquo;. I describe it as &ldquo;the dumbest-sounding idea ever - sleep-deprived parents of newborns creating and maintaining baby-tracking software as a hobby&rdquo;. It turns out to be wonderful, and is what we use today. It requires self-hosting (but provides a button to do that easily on Heroku), but works remarkably well. It didn&rsquo;t work <em>exactly</em> like I wanted, but that just provided ample opportunity to hack on it.</p>
<p>Before we could use it, I had to make it more mobile-friendly. While it technically worked on phones, it had several usability issues, which I described in <a href="https://github.com/babybuddy/babybuddy/issues/229" target="_blank" rel="noopener noreffer ">#229</a>: horizontal scrolling was needed in places; the &ldquo;Timeline&rdquo; view didn&rsquo;t show a lot of the critical bits of info, requiring more clicks; the contrast was too low for sunlight; and more. Fortunately, through some wonderful collaboration from the author, I was able to quickly get it into a wife-acceptable state and transition us over from Baby+.</p>
<p>As I hacked on the project, I added a <a href="https://gitpod.io" target="_blank" rel="noopener noreffer ">Gitpod</a> <a href="https://github.com/babybuddy/babybuddy/blob/master/.gitpod.yml" target="_blank" rel="noopener noreffer ">config</a> and a link to the README. This allows people to hack on Babybuddy without installing any software whatsoever - everything is done through, essentially, a free tier cloud instance (on which my config will install everything needed) with a browser-builtin VSCode UI. I used this today to whip up <a href="https://github.com/babybuddy/babybuddy/pull/316" target="_blank" rel="noopener noreffer ">another pull request</a>.</p>
<p>In addition to being quick and comfortable to use, BabyBuddy allowed me to set up two integrations that I had in mind. The first is an always-on display, essentially intended as &ldquo;the baby clock&rdquo;. It&rsquo;s positioned by the couch where we usually feed, so it&rsquo;s great as a feeding timer as well. I had started out with an old tablet (Huawei T3 Mediapad) running <a href="https://github.com/thanksmister/wallpanel-android" target="_blank" rel="noopener noreffer ">wallpanel</a> - this is a form of &ldquo;kiosk&rdquo; application, which locks the device into a mode where it always runs the browser on a particular page (the device has no other credentials on it, so it&rsquo;s reasonably safe). The tablet&rsquo;s battery, unfortunately, did <em>not</em> like that - seemingly having the screen on discharges it faster than it can charge, and after a few weeks the tablet refused to charge at all. I&rsquo;ve therefore switched to using an old ASUS C100P Chromebook running <a href="https://chrome.google.com/webstore/detail/kiosk/afhcomalholahplbjhnmahkoekoijban?hl=en" target="_blank" rel="noopener noreffer ">kiosk</a> - this gives the benefit of having a physical keyboard, useful for entering the food amounts.</p>
<p>The second integration I call &ldquo;poobuttons&rdquo; - a couple of tactile buttons on the changing dresser which tell BabyBuddy to mark a diaper (they are labeled &ldquo;poo&rdquo; and &ldquo;pee&rdquo;). This is both easier than fumbling with a phone touchscreen and, frankly, way more satisfying. The next posts will detail the iterations of these buttons and how I built them.</p>
<p>This has been a wonderful and challenging journey so far. I wonder what else I&rsquo;ll find myself building.</p>
]]></description></item><item><title>Code comments</title><link>https://lutzky.net/2021/05/02/comments/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2021/05/02/comments/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>Good code comments only describe <em>why</em> the code is (or isn&rsquo;t!) doing something.</p>
<p>When teaching coding or reviewing code, I sometimes encounter comments describing <em>what</em> it&rsquo;s doing, and those are almost always harmful.</p>
<p>To be clear, I&rsquo;m talking about <em>code comments</em>, not <em>documentation comments</em>. This nuance is different in every language and setup, but for Go, this is it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// UsefulFunction does useful things. This is a documentation
</span></span></span><span class="line"><span class="cl"><span class="c1">// comment, and will be displayed in godoc, IDE autocomplete,
</span></span></span><span class="line"><span class="cl"><span class="c1">// and more.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">UsefulFunction</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// this and all of the below are code comments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// count visitors //
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// x is the visitor counter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">x</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">x</span><span class="o">++</span> <span class="c1">// increment x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="why">Document &ldquo;why&rdquo;</h2>
<p>In some code, things are done for non-intuitive reasons. It&rsquo;s worth pointing that out - it makes your code easier to read for a newcomer trying to understand why it&rsquo;s written that way. In this example, technically <code>sumOfIntsWithThreshold</code> will work absolutely correctly without its input being sorted, but it <a href="https://stackoverflow.com/questions/11227809" target="_blank" rel="noopener noreffer ">turns out that it will be faster if it is</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// improves performance; see https://stackoverflow.com/questions/11227809
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">x</span> <span class="o">:=</span> <span class="nf">sumOfIntsWithThreshold</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Other good &ldquo;why&rdquo; examples are code being written in a less-intuitive way to make a particular test possible or to avoid a specific edge-case - be sure to note what those are.</p>
<p>If a well-researched algorithm is being used, definitely add a reference to it, including the best URL you have for someone who wants a quick overview of how it works.</p>
<h2 id="why-not">Document &ldquo;why not&rdquo;</h2>
<p>In some code, the reader might see something missing, a pattern apparently broken. Sometimes this is for a good reason, as keeping with the pattern would cause a bug. More specifically, you might be <em>fixing</em> a bug by breaking the pattern.</p>
<p>In this example, especially if you&rsquo;re removing a line <code>sort.Strings(c)</code>, it&rsquo;s a good idea to leave a comment explaining why it shouldn&rsquo;t be there.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sort</span><span class="p">.</span><span class="nf">Strings</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sort</span><span class="p">.</span><span class="nf">Strings</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// don&#39;t sort c, we need to keep its original order for foo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">foo</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="trivial">Don&rsquo;t document &ldquo;what&rdquo; when it&rsquo;s trivial</h2>
<p>You might be asking yourself &ldquo;what&rsquo;s the harm in a comment if it isn&rsquo;t needed. The answer is that it can be misleading; code will function correctly even if it&rsquo;s out-of-sync with its comments, so comments aren&rsquo;t always updated when code is changed, leading to this canonical example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// increment x by 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">x</span> <span class="o">+=</span> <span class="mi">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In less-trivial cases, the reader can be left scratching their head for far longer than they would&rsquo;ve if the comment weren&rsquo;t there in the first place.</p>
<h2 id="sections">Documenting &ldquo;sections&rdquo; is a code smell</h2>
<p>If your code looks is divided using comments into &ldquo;sections&rdquo;, it&rsquo;s probably long and difficult to reason about:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ServeSite</span><span class="p">(</span><span class="nx">o</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//// Get site data ////
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">f</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;data.md&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">parser</span> <span class="o">:=</span> <span class="nx">markdown</span><span class="p">.</span><span class="nf">NewParser</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//// Get layout data ////
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">f2</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;layout.cfg&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f2</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">layoutReader</span> <span class="o">:=</span> <span class="nx">awesomelayout</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">layoutOpts</span><span class="p">.</span><span class="nx">Defaults</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Name &#34;data&#34; is already in use&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">dataOfLayout</span> <span class="o">:=</span> <span class="nx">layoutReader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">f2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//// Set up HTML renderer ////
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">renderer</span> <span class="o">:=</span> <span class="nx">htmlrender</span><span class="p">.</span><span class="nf">NewRenderer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">renderer</span><span class="p">.</span><span class="nf">SetHTMLMode</span><span class="p">(</span><span class="s">&#34;my-favorite-html-style&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">renderer</span><span class="p">.</span><span class="nf">SetCompression</span><span class="p">(</span><span class="s">&#34;max-compression&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataOfLayout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This gets even messier if you don&rsquo;t sneakily omit error handling. In any case, the section headers are reasonable (albeit not great) candidates for function names:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ServeSite</span><span class="p">(</span><span class="nx">o</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">siteData</span> <span class="o">:=</span> <span class="nf">getSiteData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">layoutData</span> <span class="o">:=</span> <span class="nf">getLayoutData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">renderer</span> <span class="o">:=</span> <span class="nf">setupHTMLRenderer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataOfLayout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getSiteData</span><span class="p">()</span> <span class="nx">markdown</span><span class="p">.</span><span class="nx">Data</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;data.md&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">p</span> <span class="o">:=</span> <span class="nx">markdown</span><span class="p">.</span><span class="nf">NewParser</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getLayoutData</span><span class="p">()</span> <span class="nx">awesomelayout</span><span class="p">.</span><span class="nx">Data</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;layout.cfg&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">awesomelayout</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">layoutOpts</span><span class="p">.</span><span class="nx">Defaults</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">layoutReader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">setupHTMLRenderer</span><span class="p">()</span> <span class="nx">htmlrenderer</span><span class="p">.</span><span class="nx">Renderer</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">htmlrender</span><span class="p">.</span><span class="nf">NewRenderer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">r</span><span class="p">.</span><span class="nf">SetHTMLMode</span><span class="p">(</span><span class="s">&#34;my-favorite-html-style&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">r</span><span class="p">.</span><span class="nf">SetCompression</span><span class="p">(</span><span class="s">&#34;max-compression&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">r</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The main <code>ServeSite</code> function is now much easier to read. The &ldquo;section names&rdquo; are now function names, and are less likely to fall out of date. And as a bonus, the scope of many variables is reduced - so the reader doesn&rsquo;t have to keep them in mind, and we can use short names for them.</p>
<h2 id="code-scars">Don&rsquo;t leave code scars around</h2>
<p>Finally, just a pet peeve - while it&rsquo;s absolutely fine to &ldquo;comment out&rdquo; code while developing, you usually shouldn&rsquo;t commit this to version control. I like calling these &ldquo;code scars&rdquo;:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">x</span> <span class="o">:=</span> <span class="nf">getMaxValue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">// x = 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">handle</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In this case, <code>x = 3</code> was there for testing &ldquo;what if <code>getMaxValue</code> returns 3&rdquo;. You should not commit this. However, a possible exception can be if you&rsquo;re documenting &ldquo;why not&rdquo; as above - if it comes with an explanation.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Code is meant to be read by machines and humans, with comments generally being intended for humans to read. Therefore, all of these should be taken as guidelines rather than gospel. Hopefully this post can be of some use for people trying to reason about comment etiquette, or perhaps for code reviewers wanting to point their reviewees at a preexisting summary.</p>]]></description></item><item><title>PiTemp</title><link>https://lutzky.net/2021/03/14/pitemp/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2021/03/14/pitemp/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>I had been looking for an excuse to mess around with Raspberry Pi for a while, and found one: I wanted a graph of temperature and humidity over time, and - while we&rsquo;re at it - a nice display of those two. Technically speaking, I already have a Nest thermostat which should provide those, but it won&rsquo;t display humidity and there&rsquo;s no easy way to get a graph off it (besides, then I&rsquo;d need another excuse for messing around with a Pi).</p>
<p>The code for the final result is in <a href="https://github.com/lutzky/pitemp" target="_blank" rel="noopener noreffer ">https://github.com/lutzky/pitemp</a>.</p>
<h2 id="stage-1-lcd-and-dht">Stage 1: LCD and DHT</h2>
<p>Hardware:</p>
<ul>
<li>A <a href="https://www.raspberrypi.org/products/raspberry-pi-zero-w/" target="_blank" rel="noopener noreffer ">Raspberry Pi Zero W</a> a friend gave me (that&rsquo;ll become important later on)</li>
<li>A <a href="https://www.amazon.co.uk/gp/product/B07L83K6CF" target="_blank" rel="noopener noreffer ">DHT11</a> temperature &amp; humidity sensor</li>
<li>A <a href="https://www.amazon.co.uk/gp/product/B07QNKCLJM" target="_blank" rel="noopener noreffer ">4x20 character LCD</a>; apparently an HD44780 controller or compatible.</li>
</ul>
<p>This was my first time coding for hardware on the raspberry pi, and it went fairly well.</p>
<h3 id="lcd-quirks">LCD quirks</h3>
<p>Getting the degree symbol (°, ASCII <code>0xb0</code>) was a bit of a challenge. While the official HD44780 spec shows it should be available with &ldquo;ROM Code A02&rdquo; (i.e. Latin mode), it&rsquo;s not clear if this can be toggled in software, and the characters my unit displayed matched &ldquo;ROM Code A00&rdquo; (Japanese)&hellip; mostly, that is. Some characters were malformed, and the <a href="https://github.com/d2r2/go-hd44780" target="_blank" rel="noopener noreffer ">unofficial library I used</a> didn&rsquo;t support custom characters (which the hardware seems to support). Fortunately, the Japanese ROM code had a Handakuten symbol (ﾟ, like the circle from ぽ but as a separate character), which is close enough.</p>
<p>The LCD was also quite slow to refresh, the way I was using it; any faster than 1 hz would lead to corruption, meaning that the &ldquo;second-by-second&rdquo; clock display I wanted wasn&rsquo;t feasible.</p>
<p>Finally, the LCD unit is much, <em>much</em> large than the Raspberry Pi Zero, and has to be wired awkwardly to it. With some covid-lockdown-induced creativity, a twist tie, and a bit of sewing thread (!), I turned the box it came in into a &ldquo;case&rdquo;.</p>
<figure><a class="lightgallery" href="/2021/03/14/pitemp/lcd_box.jpg" title="/2021/03/14/pitemp/lcd_box.jpg" data-thumbnail="/2021/03/14/pitemp/lcd_box.jpg" data-sub-html="<h2>LCD in a cardboard box &ldquo;case&rdquo;</h2>">
        
    </a><figcaption class="image-caption">LCD in a cardboard box &ldquo;case&rdquo;</figcaption>
    </figure>
<h3 id="cross-compilation">Cross compilation</h3>
<p>While the Pi Zero is certainly <em>capable</em> of being a fully-fledged Go development environment, it&rsquo;s not a fast one (and me using a cheap old SD card isn&rsquo;t helping). I got a much faster edit-compile-run loop by working on my main laptop, cross-compiling for ARM, and <code>scp</code>-ing the result over. That&rsquo;s despite Go&rsquo;s hefty statically-build binaries (7-12MB for these, depending on stripping).</p>
<p>Cross compiling is done like so (e.g. in a <a href="https://github.com/lutzky/pitemp/blob/main/build.sh" target="_blank" rel="noopener noreffer ">convenience script</a>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install gcc-arm-linux-gnueabi
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CC</span><span class="o">=</span>arm-linux-gnueabi-gcc <span class="nv">CGO_ENABLED</span><span class="o">=</span><span class="m">1</span> <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARM</span><span class="o">=</span><span class="m">6</span> <span class="nv">GOARCH</span><span class="o">=</span>arm
</span></span><span class="line"><span class="cl">go -o main.arm build main.go
</span></span></code></pre></td></tr></table>
</div>
</div><p>For build-and-run-on-save, this can be used with <code>entr</code>. However, because you can&rsquo;t modify an executable file as it runs (in this case), you need to use a temporary file. On my laptop, I run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">find <span class="p">|</span> entr -c -s <span class="s2">&#34;./build.sh &amp;&amp; scp main.arm TARGET-MACHINE:main.arm.new
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Then, on the pi, I run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ls main.arm.new <span class="p">|</span> sudo entr -r -c -s <span class="s2">&#34;cp main.arm.new main &amp;&amp; exec ./main&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="stage-2-pioled">Stage 2: PiOLED</h2>
<p>I looked for a not-so-ridiculously-large display, and found <a href="https://www.adafruit.com/product/3527" target="_blank" rel="noopener noreffer ">adafruit&rsquo;s PiOLED</a> to be perfect. Its HAT form factor makes for a much tidier device, and the display itself is reminiscent of the 2007 Sansa Clip m300 (albeit monochromatic). Library support is also much better, thanks to <a href="http://periph.io" target="_blank" rel="noopener noreffer ">http://periph.io</a>.</p>
<p>That being said, my friend soldered the Pi&rsquo;s pins on &ldquo;downwards&rdquo;, as this is apparently more convenient when using it on a breadboard. I figured it&rsquo;s time to order my own Pi Zero (you can get them with the pins pre-soldered, facing &ldquo;up&rdquo;); I later found that <a href="https://pkg.go.dev/periph.io/x/devices/v3/ssd1306#Opts" target="_blank" rel="noopener noreffer ">this might be configurable</a>, but it&rsquo;d still be pretty awkward.</p>
<p>The PiOLED library (actually periph.io&rsquo;s ssd1306 library) essentially lets you render an <code>image.Image</code>; since these are also trivially renderable to PNG, I could speed up development even further by adding an HTTP endpoint to serve the current image, even if the hardware isn&rsquo;t present; this also let me zoom into the rendered image instead of squinting at the actual display, making it easier to align things pixel-by-pixel. I eventually ended up separating the code into two binaries - <code>pitemp</code> would communicate with the sensors and provide an HTTP endpoint, whereas <code>pitemp_pioled</code> (and <code>pitemp_lcd</code>) would communicate with <code>pitemp</code> and the physical display (or run in <code>--simulator</code> mode on my laptop, for HTTP-endpoint-only rendering).</p>
<p>I&rsquo;m quite happy with the final result:</p>
<figure><a class="lightgallery" href="/2021/03/14/pitemp/pioled.jpg" title="/2021/03/14/pitemp/pioled.jpg" data-thumbnail="/2021/03/14/pitemp/pioled.jpg" data-sub-html="<h2>PiTemp with PiOLED</h2>">
        
    </a><figcaption class="image-caption">PiTemp with PiOLED</figcaption>
    </figure>
<p>Happy hacking!</p>
]]></description></item><item><title>Server drawer</title><link>https://lutzky.net/2021/01/03/server-drawer/</link><pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/2021/01/03/server-drawer/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>This is as good a time as any to give a quick tour of my &ldquo;homelab&rdquo; or server drawer.</p>
<p>The external view is rather innocuous: A visually inoffensive Nest Wifi, a rather elegant Nest Thermostat (shame that the display can&rsquo;t be always-on), and the gorgeous Nintendo Switch dock cover my partner got me. The TV aerial is tucked to the back, a reasonable compromise between &ldquo;gets reception&rdquo; and &ldquo;hidden away and ugly&rdquo;. The TV is mounted on upside-down IKEA boxes which we painted to roughly match the rest, hiding some botched carpentry behind the TV.</p>
<figure><a class="lightgallery" href="/2021/01/03/server-drawer/external.jpg" title="/2021/01/03/server-drawer/external.jpg" data-thumbnail="/2021/01/03/server-drawer/external.jpg" data-sub-html="<h2>External view</h2>">
        
    </a><figcaption class="image-caption">External view</figcaption>
    </figure>
<p>You may note some cables heading down through a hole in the woodwork (yeah, I could probably make them a bit neater on the way down):</p>
<figure><a class="lightgallery" href="/2021/01/03/server-drawer/hole.jpg" title="/2021/01/03/server-drawer/hole.jpg" data-thumbnail="/2021/01/03/server-drawer/hole.jpg" data-sub-html="<h2>Through the hole</h2>">
        
    </a><figcaption class="image-caption">Through the hole</figcaption>
    </figure>
<p>When opened, the drawer shows the Virgin Media router (in <a href="https://www.virginmedia.com/help/virgin-media-hub-modem-mode" target="_blank" rel="noopener noreffer ">Modem Mode</a>), hooked up to the Nest Wifi and back into a small switch. The TV is hardwired in, and so is the NUC i3 media server (&ldquo;Michael&rdquo;, replacing the previous server &ldquo;George&rdquo;). The NUC is wearing a 4TB USB HDD as a hat. Everything is quite low-powered, and Michael usually hovers around 42°C.</p>
<figure><a class="lightgallery" href="/2021/01/03/server-drawer/top.jpg" title="/2021/01/03/server-drawer/top.jpg" data-thumbnail="/2021/01/03/server-drawer/top.jpg" data-sub-html="<h2>Top view</h2>">
        
    </a><figcaption class="image-caption">Top view</figcaption>
    </figure>
<p>Finally, here&rsquo;s how everything is powered. The guy who built it thought 10 sockets (8 in the drawer, 2 behind the TV) was overkill. It was not.</p>
<figure><a class="lightgallery" href="/2021/01/03/server-drawer/power.jpg" title="/2021/01/03/server-drawer/power.jpg" data-thumbnail="/2021/01/03/server-drawer/power.jpg" data-sub-html="<h2>Power view</h2>">
        
    </a><figcaption class="image-caption">Power view</figcaption>
    </figure>
]]></description></item></channel></rss>