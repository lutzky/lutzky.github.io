[{"content":"As noted in the previous post, I decided that the implementation is more appropriate for a microcontroller than a full-fledged computer. While the Arduino is probably the best-known microcontroller, the standard one doesn\u0026rsquo;t have wifi (the one with wifi is ~$50). The ESP8266, on the other hand, is a microcontroller chip with wifi capabilities, available1 on dev boards like the NodeMCU for about $2 apiece - so I bought a few of them. The ESP8266 is sometimes used as a wifi add-on for Arduino, but it\u0026rsquo;s quite capable as a microcontroller on its own (and the newer ESP32 is faster).\nSo what\u0026rsquo;s the difference between a (very small) computer and a microcontroller? A Raspberry Pi boots off an SD card, usually to a full-fledged Linux operating system; you\u0026rsquo;d operate it either directly with a monitor and keyboard, or connect remotely using SSH. You can install/create software on it as you would on a \u0026ldquo;full-size\u0026rdquo; computer, and I usually do this in Go (although Python is more popular). Conversely, a microcontroller will usually run only one program, which you need to build on a separate computer, connect it over USB to the microcontroller board, and flash it. This has a number of advantages, including simplicity and pretty-much-instant boot.\nCoding for the ESP8266 can be done using the same tooling as Arduino - namely, in C++2, on the Arduino IDE. However, during this project I learned of PlatformIO, which is far more comfortable to work with: It\u0026rsquo;s integrated into VSCode, and git, auto-formatting, autocomplete and VIM keybindings all work nicely. It also provides a more organized approach to unit testing (practically absent in Arduino IDE) and per-project dependency management (you can list what each project needs and have it auto-install). This made the project fun enough for a few iterations.\nOne quirk of working with the BabyBuddy API is that reporting a diaper requires supplying the current time, even if our intention is \u0026ldquo;right now\u0026rdquo;. That\u0026rsquo;s easy enough on a Linux system, but microcontrollers don\u0026rsquo;t generally have clocks. Thankfully, libraries such as ESPDateTime provide NTP support baked right into your program. At this point, the NodeMCU version worked, and replaced the previous implementation:\n\nIndeed, this version fits neatly onto a single (full-sized) breadboard. It\u0026rsquo;s not quite Ben Eater grade, but the NodeMCU is pretty good for breadboard mounting, and using solid-core jumpers let me make it much neater than the previous iteration. However, at this point we realized there was a missing feature: We were never quite sure if we had pressed the button, especially if we were performing a diaper change together3 . A couple of LEDs can only convey so much information.\nI decided to repurpose my shitty cardboard LCD case for this project. These tactile buttons have quite short feet - they don\u0026rsquo;t make it through the cardboard, and I insisted on avoiding using a perfboard and soldering iron - as, at the time, I had neither. I ultimately decided to reuse the mini-breadboard from the previous version; like many (all?) breadboards, its bottom is an adhesive pad; I didn\u0026rsquo;t even bother to remove the resistors from V1, they add a certain design flare to it. With a few iterations on the UI, it was wife-approved: Custom characters are fully supported in C++ (though, not in Go), so I got nice labels for the tactile buttons, as well as a heartbeat4 to indicate that NTP is still working.\n\nOverall, the project has been a blast, and the result is everyday-useful. Working on it has made me realize how much I need my own space for late-night electronics projects, but that\u0026rsquo;s a project for another day.\n  Actually available - as in, as opposed to Raspberry Pi 0w, they\u0026rsquo;re in stock in many places at the moment.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Unfortunately, TinyGo does not yet support wifi.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n We call this procedure Formula 1.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 2nd row from the bottom, rightmost column; you can see it fading out in this shot. It blinks every second. Although the photo doesn\u0026rsquo;t show it, the LCD\u0026rsquo;s contrast is actually great in-person.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://lutzky.net/2021/10/10/software-parenting-3/","summary":"Transitioning PooButtons to a microcontroller","title":"Newborn parenting software - part 3"},{"content":"With BabyBuddy now installed and running properly (see previous post), and an always-on display showing the latest information, we now got into the swing of using it. We loved the timeline for \u0026ldquo;what happened while I as sleeping\u0026rdquo;; we loved the food amount reports; and because we had a consistent \u0026ldquo;feed, then change, then wait 15 minutes with baby upright to reduce spit-up\u0026rdquo; system, the display\u0026rsquo;s \u0026ldquo;time since last change\u0026rdquo; box was super useful as well. However, as you might imagine, we did not love handling a freshly-re-diapered baby with one hand while using the other to unlock the phone and navigate to the \u0026ldquo;yes he pooped now\u0026rdquo; page in a web app.\nMy first idea was to create voice commands for the Nest Home Mini in the room. However, it\u0026rsquo;s prone to misunderstanding us; you have to enunciate, and even then the speech recognition is mostly tuned to preexisting Google Assistant commands, and tends to guess that we aren\u0026rsquo;t really saying words like \u0026ldquo;pee\u0026rdquo; or \u0026ldquo;poo\u0026rdquo;. Furthermore, the baby might be crying, or worse yet - lightly sleeping, at risk of being woken up by our voice (or the assistant\u0026rsquo;s). What we needed was a button (well, two - one for pee and one for poo).\nI had a Raspberry Pi ZeroW lying around from a previous project and decided to use it for this (the small OLED display wasn\u0026rsquo;t used for this project, but I didn\u0026rsquo;t find a good reason to take it off yet; more on that later). With bits I had from a generic \u0026ldquo;learn electronics\u0026rdquo; kit (which I bought for the specific purpose of having such bits), I created the user interface: Two buttons, a green LED for \u0026ldquo;OK\u0026rdquo;, a red LED for \u0026ldquo;something went wrong\u0026rdquo;; all tied together by some jumper cables and a mini breadboard. The Raspberry Pi would handle communicating with BabyBuddy\u0026rsquo;s API (over wifi), reading the buttons, and driving the LEDs. The setup was indeed quite similar to PiTemp\u0026rsquo;s with the software written in Go, cross-compiled, and run on startup using systemd.\n\nOne annoying quirk with the Raspberry Pi Zero for this is that it would register phantom button presses; they\u0026rsquo;d be quite rare, fewer than 5 a day, but that\u0026rsquo;s certainly enough to mess up diaper reporting. I\u0026rsquo;m not sure if it\u0026rsquo;s something about the particular GPIO pins I used (GPIO24, GPIO22), and disconnecting the OLED display didn\u0026rsquo;t work. I ended up following the old joke:\n How many software engineers does it take to change a lightbulb?\nNone, it\u0026rsquo;s a hardware problem.\nHow many hardware engineers does it take to change a lightbulb?\nNone, they\u0026rsquo;ll fix it in the software drivers.\n Specifically it ended up looking something like this (with another goroutine listening on the resulting channel):\nconst ( debounceTime = 2 * time.Second stableTime = 100 * time.Millisecond ) func listenButtons(ch chan\u0026lt;- int) { pull := gpio.PullUp edge := gpio.FallingEdge level := gpio.Low for i, pin := range []gpio.PinIO{ pinButton1, // GPIO24  pinButton2, // GPIO22  } { n := i + 1 pin := pin go func() { for { time.Sleep(debounceTime) if err := pin.In(pull, edge); err != nil { log.Fatalf(\u0026#34;Failed to set pin to input: %v\u0026#34;, err) } if pin.WaitForEdge(-1) { log.Printf(\u0026#34;Got edge, waiting %v for stability\u0026#34;, stableTime) time.Sleep(stableTime) if pin.Read() == level { log.Print(\u0026#34;Signal was stable, counting as press\u0026#34;) ch \u0026lt;- n } else { log.Print(\u0026#34;Signal did not remain stable, discarding\u0026#34;) } } else { log.Print(\u0026#34;WaitForEdge returned false, ignoring\u0026#34;) } } }() } } It\u0026rsquo;s not ideal, but it seemed to work; certainly seemed like it should be library code, for someone smarter to debug. Indeed, it turns out that the periph.io library had a Debounce function to help with this, but at the time it wasn\u0026rsquo;t implemented at all (and now that I\u0026rsquo;ve spent some time on it, it\u0026rsquo;s partially implemented).\nUltimately, the device worked rather well, and the button pushes were quite satisfying, especially after a particularly nasty diaper change (AKA a poonami). However, it did leave a lot to be desired: The cabling was flimsy and patchy (the pins coming from the ribbon were easy to disconnect), and using a Raspberry Pi here was overkill. Indeed, I ended up using that Raspberry Pi (and OLED display) as a PiKVM, and using a microcontroller for the diaper change buttons instead. More on that in the next post.\n","permalink":"https://lutzky.net/2021/10/05/software-parenting-2/","summary":"Logging diapers with satisfying clicks","title":"Newborn parenting software - part 2"},{"content":"A few months ago, I became a father. To help overcome some of the challenges of raising a newborn, I decided to employ my standard MO - software; preferably the kind where I understand what it\u0026rsquo;s doing. It\u0026rsquo;s been working well, and I learned a lot doing it - several blog posts' worth, in fact.\nFor this story to make sense, it bears mentioning that our conditions are pretty much optimal for it: My employer provides a generous parental leave for the non-birth parent; we decided in advance to formula-feed, which allows us to share that load, which means we need to communicate about it; my partner is an early bird whereas I am a night-owl, meaning we essentially have separate shifts necessitating a handoff; and, critically, we\u0026rsquo;re the type of people who like everything being super-organized and scheduled and spreadsheet-y (calms us down, gives us an illusion of control). Furthermore, our baby is remarkably consistent, being hungry right about every 3 hours - so the question we ended up constantly asking (of each other and our phones) was \u0026ldquo;how long since the baby ate\u0026rdquo;.\nWe knew in advance we\u0026rsquo;d need some sort of a baby tracking app, of which there are many. After some research, I found that few of the free ones are designed to be used from multiple devices (e.g. dad\u0026rsquo;s and mom\u0026rsquo;s phones), which is a hard requirement. We found two contenders: Baby+ and BabyBuddy.\nBaby+ Baby+ is an Android and iPhone app for tracking babies; it follows pregnancy+, which we were quite happy with (especially as, before the birth, our responsiveness requirements were looser - I\u0026rsquo;ll get to that). It can track quite a few things, but not Tummy Time for one (in our case it turns out to be pretty important). Like pregnancy+, the design is very aesthetically pleasing, and it regularly shows timely, short, and useful articles for the parents.\nWhile the app does have cloud sync, it doesn\u0026rsquo;t have a web UI (it\u0026rsquo;s phone/tablet-only) nor an open HTTP API for me to reasonably code against. It does have an export function, but it\u0026rsquo;s only really intended for importing by the app itself as backup. It\u0026rsquo;s super-clunky to work with - I know because I ended up using it to perform some analysis with a spreadsheet(\u0026ldquo;how long is the baby going between feeds\u0026rdquo;).\nThe biggest disadvantage of Baby+ is that it doesn\u0026rsquo;t really support multiple users. From the app\u0026rsquo;s internal FAQ (only available after installing it and setting up an account):\n How can I use this app with my partner?\nYou can share the app by logging in with the same email and password. If you use your device and enter data (e.g. a note) then you need to minimise or close the app for it to send the new data to the server [\u0026hellip;].\nImportant: the app is designed to be used by on person at a a time [\u0026hellip;] otherwise data can be overwritten or deleted. [\u0026hellip;] allow a few mins for the data to sync (the second device should also have the app closed for a few mins at this point so it can fetch the data [\u0026hellip;]).\nPlease note that you will encounter data loss if you are using the app on two devices at the same time.\n I\u0026rsquo;d guess that the app basically talks to the server on startup, compares timestamps of its entire database, and downloads or uploads the entire database depending on which version is newer. The startup time checks out:\nStarting Baby+ on an android phone, after closing it so it syncs, takes about 7 seconds; an eternity in screaming-baby-debug-time. Furthermore, that doesn\u0026rsquo;t include sync time, and old data will be shown for a few more seconds before the sync is complete; that starts off with slight frights (\u0026ldquo;the baby didn\u0026rsquo;t eat for 5 hours?! oh, wait, actually 1 hour\u0026rdquo;), and eventually devolves into distrusting the app.\nThis felt like a silly problem to have; almost any web-based app would have none of these issues. Furthermore, I thought, there\u0026rsquo;s surely an open-source one where I could fix any annoyances I have myself. Indeed, that would be BabyBuddy.\nBabyBuddy BabyBuddy is an open-source web app, self-described as \u0026ldquo;to help caregivers track sleep, feedings, diaper changes, and tummy time to learn about and predict baby\u0026rsquo;s needs without (as much) guess work\u0026rdquo;. I describe it as \u0026ldquo;the dumbest-sounding idea ever - sleep-deprived parents of newborns creating and maintaining baby-tracking software as a hobby\u0026rdquo;. It turns out to be wonderful, and is what we use today. It requires self-hosting (but provides a button to do that easily on Heroku), but works remarkably well. It didn\u0026rsquo;t work exactly like I wanted, but that just provided ample opportunity to hack on it.\nBefore we could use it, I had to make it more mobile-friendly. While it technically worked on phones, it had several usability issues, which I described in #229: horizontal scrolling was needed in places; the \u0026ldquo;Timeline\u0026rdquo; view didn\u0026rsquo;t show a lot of the critical bits of info, requiring more clicks; the contrast was too low for sunlight; and more. Fortunately, through some wonderful collaboration from the author, I was able to quickly get it into a wife-acceptable state and transition us over from Baby+.\nAs I hacked on the project, I added a Gitpod config and a link to the README. This allows people to hack on Babybuddy without installing any software whatsoever - everything is done through, essentially, a free tier cloud instance (on which my config will install everything needed) with a browser-builtin VSCode UI. I used this today to whip up another pull request.\nIn addition to being quick and comfortable to use, BabyBuddy allowed me to set up two integrations that I had in mind. The first is an always-on display, essentially intended as \u0026ldquo;the baby clock\u0026rdquo;. It\u0026rsquo;s positioned by the couch where we usually feed, so it\u0026rsquo;s great as a feeding timer as well. I had started out with an old tablet (Huawei T3 Mediapad) running wallpanel - this is a form of \u0026ldquo;kiosk\u0026rdquo; application, which locks the device into a mode where it always runs the browser on a particular page (the device has no other credentials on it, so it\u0026rsquo;s reasonably safe). The tablet\u0026rsquo;s battery, unfortunately, did not like that - seemingly having the screen on discharges it faster than it can charge, and after a few weeks the tablet refused to charge at all. I\u0026rsquo;ve therefore switched to using an old ASUS C100P Chromebook running kiosk - this gives the benefit of having a physical keyboard, useful for entering the food amounts.\nThe second integration I call \u0026ldquo;poobuttons\u0026rdquo; - a couple of tactile buttons on the changing dresser which tell BabyBuddy to mark a diaper (they are labeled \u0026ldquo;poo\u0026rdquo; and \u0026ldquo;pee\u0026rdquo;). This is both easier than fumbling with a phone touchscreen and, frankly, way more satisfying. The next posts will detail the iterations of these buttons and how I built them.\nThis has been a wonderful and challenging journey so far. I wonder what else I\u0026rsquo;ll find myself building.\n","permalink":"https://lutzky.net/2021/10/03/software-parenting-1/","summary":"Choosing and hacking on baby tracking apps","title":"Newborn parenting software - part 1"},{"content":"Good code comments only describe why the code is (or isn\u0026rsquo;t!) doing something.\nWhen teaching coding or reviewing code, I sometimes encounter comments describing what it\u0026rsquo;s doing, and those are almost always harmful.\nTo be clear, I\u0026rsquo;m talking about code comments, not documentation comments. This nuance is different in every language and setup, but for Go, this is it:\n// UsefulFunction does useful things. This is a documentation // comment, and will be displayed in godoc, IDE autocomplete, // and more. func UsefulFunction() { // this and all of the below are code comments  // count visitors //  // x is the visitor counter  x := 0 x++ // increment x } Document \u0026ldquo;why\u0026rdquo; In some code, things are done for non-intuitive reasons. It\u0026rsquo;s worth pointing that out - it makes your code easier to read for a newcomer trying to understand why it\u0026rsquo;s written that way. In this example, technically sumOfIntsWithThreshold will work absolutely correctly without its input being sorted, but it turns out that it will be faster if it is.\nsort.Ints(a) // improves performance; see https://stackoverflow.com/questions/11227809 x := sumOfIntsWithThreshold(a, 128) Other good \u0026ldquo;why\u0026rdquo; examples are code being written in a less-intuitive way to make a particular test possible or to avoid a specific edge-case - be sure to note what those are.\nIf a well-researched algorithm is being used, definitely add a reference to it, including the best URL you have for someone who wants a quick overview of how it works.\nDocument \u0026ldquo;why not\u0026rdquo; In some code, the reader might see something missing, a pattern apparently broken. Sometimes this is for a good reason, as keeping with the pattern would cause a bug. More specifically, you might be fixing a bug by breaking the pattern.\nIn this example, especially if you\u0026rsquo;re removing a line sort.Strings(c), it\u0026rsquo;s a good idea to leave a comment explaining why it shouldn\u0026rsquo;t be there.\nfunc handle(a, b, c []string) {} sort.Strings(a) sort.Strings(b) // don\u0026#39;t sort c, we need to keep its original order for foo  foo(c) } Don\u0026rsquo;t document \u0026ldquo;what\u0026rdquo; when it\u0026rsquo;s trivial You might be asking yourself \u0026ldquo;what\u0026rsquo;s the harm in a comment if it isn\u0026rsquo;t needed. The answer is that it can be misleading; code will function correctly even if it\u0026rsquo;s out-of-sync with its comments, so comments aren\u0026rsquo;t always updated when code is changed, leading to this canonical example:\n// increment x by 1 x += 2 In less-trivial cases, the reader can be left scratching their head for far longer than they would\u0026rsquo;ve if the comment weren\u0026rsquo;t there in the first place.\nDocumenting \u0026ldquo;sections\u0026rdquo; is a code smell If your code looks is divided using comments into \u0026ldquo;sections\u0026rdquo;, it\u0026rsquo;s probably long and difficult to reason about:\nfunc ServeSite(o io.Writer) { //// Get site data ////  f := os.Open(\u0026#34;data.md\u0026#34;) defer f.Close() parser := markdown.NewParser(f) data := parser.Parse() //// Get layout data ////  f2 := os.Open(\u0026#34;layout.cfg\u0026#34;) defer f2.Close() layoutReader := awesomelayout.NewReader(layoutOpts.Defaults) // Name \u0026#34;data\u0026#34; is already in use\u0026#34;  dataOfLayout := layoutReader.Read(f2) //// Set up HTML renderer ////  renderer := htmlrender.NewRenderer() renderer.SetHTMLMode(\u0026#34;my-favorite-html-style\u0026#34;) renderer.SetCompression(\u0026#34;max-compression\u0026#34;) renderer.Render(o, data, dataOfLayout) } This gets even messier if you don\u0026rsquo;t sneakily omit error handling. In any case, the section headers are reasonable (albeit not great) candidates for function names:\nfunc ServeSite(o io.Writer) { siteData := getSiteData() layoutData := getLayoutData() renderer := setupHTMLRenderer() renderer.Render(o, data, dataOfLayout) } func getSiteData() markdown.Data { f := os.Open(\u0026#34;data.md\u0026#34;) defer f.Close() p := markdown.NewParser(f) return p.Parse() } func getLayoutData() awesomelayout.Data { f := os.Open(\u0026#34;layout.cfg\u0026#34;) defer f.Close() r := awesomelayout.NewReader(layoutOpts.Defaults) return layoutReader.Read(f) } func setupHTMLRenderer() htmlrenderer.Renderer {} r := htmlrender.NewRenderer() r.SetHTMLMode(\u0026#34;my-favorite-html-style\u0026#34;) r.SetCompression(\u0026#34;max-compression\u0026#34;) return r } The main ServeSite function is now much easier to read. The \u0026ldquo;section names\u0026rdquo; are now function names, and are less likely to fall out of date. And as a bonus, the scope of many variables is reduced - so the reader doesn\u0026rsquo;t have to keep them in mind, and we can use short names for them.\nDon\u0026rsquo;t leave code scars around Finally, just a pet peeve - while it\u0026rsquo;s absolutely fine to \u0026ldquo;comment out\u0026rdquo; code while developing, you usually shouldn\u0026rsquo;t commit this to version control. I like calling these \u0026ldquo;code scars\u0026rdquo;:\nx := getMaxValue() // x = 3 handle(x) In this case, x = 3 was there for testing \u0026ldquo;what if getMaxValue returns 3\u0026rdquo;. You should not commit this. However, a possible exception can be if you\u0026rsquo;re documenting \u0026ldquo;why not\u0026rdquo; as above - if it comes with an explanation.\nConclusion Code is meant to be read by machines and humans, with comments generally being intended for humans to read. Therefore, all of these should be taken as guidelines rather than gospel. Hopefully this post can be of some use for people trying to reason about comment etiquette, or perhaps for code reviewers wanting to point their reviewees at a preexisting summary.\n","permalink":"https://lutzky.net/2021/05/02/comments/","summary":"\u003cp\u003eGood code comments only describe \u003cem\u003ewhy\u003c/em\u003e the code is (or isn\u0026rsquo;t!) doing something.\u003c/p\u003e","title":"Code comments"},{"content":"I had been looking for an excuse to mess around with Raspberry Pi for a while, and found one: I wanted a graph of temperature and humidity over time, and - while we\u0026rsquo;re at it - a nice display of those two. Technically speaking, I already have a Nest thermostat which should provide those, but it won\u0026rsquo;t display humidity and there\u0026rsquo;s no easy way to get a graph off it (besides, then I\u0026rsquo;d need another excuse for messing around with a Pi).\nThe code for the final result is in https://github.com/lutzky/pitemp.\nStage 1: LCD and DHT Hardware:\n A Raspberry Pi Zero W a friend gave me (that\u0026rsquo;ll become important later on) A DHT11 temperature \u0026amp; humidity sensor A 4x20 character LCD; apparently an HD44780 controller or compatible.  This was my first time coding for hardware on the raspberry pi, and it went fairly well.\nLCD quirks Getting the degree symbol (°, ASCII 0xb0) was a bit of a challenge. While the official HD44780 spec shows it should be available with \u0026ldquo;ROM Code A02\u0026rdquo; (i.e. Latin mode), it\u0026rsquo;s not clear if this can be toggled in software, and the characters my unit displayed matched \u0026ldquo;ROM Code A00\u0026rdquo; (Japanese)\u0026hellip; mostly, that is. Some characters were malformed, and the unofficial library I used didn\u0026rsquo;t support custom characters (which the hardware seems to support). Fortunately, the Japanese ROM code had a Handakuten symbol (ﾟ, like the circle from ぽ but as a separate character), which is close enough.\nThe LCD was also quite slow to refresh, the way I was using it; any faster than 1 hz would lead to corruption, meaning that the \u0026ldquo;second-by-second\u0026rdquo; clock display I wanted wasn\u0026rsquo;t feasible.\nFinally, the LCD unit is much, much large than the Raspberry Pi Zero, and has to be wired awkwardly to it. With some covid-lockdown-induced creativity, a twist tie, and a bit of sewing thread (!), I turned the box it came in into a \u0026ldquo;case\u0026rdquo;.\n\nCross compilation While the Pi Zero is certainly capable of being a fully-fledged Go development environment, it\u0026rsquo;s not a fast one (and me using a cheap old SD card isn\u0026rsquo;t helping). I got a much faster edit-compile-run loop by working on my main laptop, cross-compiling for ARM, and scp-ing the result over. That\u0026rsquo;s despite Go\u0026rsquo;s hefty statically-build binaries (7-12MB for these, depending on stripping).\nCross compiling is done like so (e.g. in a convenience script):\n$ sudo apt install gcc-arm-linux-gnueabi $ export CC=arm-linux-gnueabi-gcc CGO_ENABLED=1 GOOS=linux GOARM=6 GOARCH=arm $ go -o main.arm build main.go For build-and-run-on-save, this can be used with entr. However, because you can\u0026rsquo;t modify an executable file as it runs (in this case), you need to use a temporary file. On my laptop, I run:\n$ find | entr -c -s \u0026#34;./build.sh \u0026amp;\u0026amp; scp main.arm TARGET-MACHINE:main.arm.new Then, on the pi, I run:\n$ ls main.arm.new | sudo entr -r -c -s \u0026#34;cp main.arm.new main \u0026amp;\u0026amp; exec ./main\u0026#34; Stage 2: PiOLED I looked for a not-so-ridiculously-large display, and found adafruit\u0026rsquo;s PiOLED to be perfect. Its HAT form factor makes for a much tidier device, and the display itself is reminiscent of the 2007 Sansa Clip m300 (albeit monochromatic). Library support is also much better, thanks to http://periph.io.\nThat being said, my friend soldered the Pi\u0026rsquo;s pins on \u0026ldquo;downwards\u0026rdquo;, as this is apparently more convenient when using it on a breadboard. I figured it\u0026rsquo;s time to order my own Pi Zero (you can get them with the pins pre-soldered, facing \u0026ldquo;up\u0026rdquo;); I later found that this might be configurable, but it\u0026rsquo;d still be pretty awkward.\nThe PiOLED library (actually periph.io\u0026rsquo;s ssd1306 library) essentially lets you render an image.Image; since these are also trivially renderable to PNG, I could speed up development even further by adding an HTTP endpoint to serve the current image, even if the hardware isn\u0026rsquo;t present; this also let me zoom into the rendered image instead of squinting at the actual display, making it easier to align things pixel-by-pixel. I eventually ended up separating the code into two binaries - pitemp would communicate with the sensors and provide an HTTP endpoint, whereas pitemp_pioled (and pitemp_lcd) would communicate with pitemp and the physical display (or run in --simulator mode on my laptop, for HTTP-endpoint-only rendering).\nI\u0026rsquo;m quite happy with the final result:\n\nHappy hacking!\n","permalink":"https://lutzky.net/2021/03/14/pitemp/","summary":"An adventure with Raspberry Pi, Golang, and small displays.","title":"PiTemp"},{"content":"This is as good a time as any to give a quick tour of my \u0026ldquo;homelab\u0026rdquo; or server drawer.\nThe external view is rather innocuous: A visually inoffensive Nest Wifi, a rather elegant Nest Thermostat (shame that the display can\u0026rsquo;t be always-on), and the gorgeous Nintendo Switch dock cover my partner got me. The TV aerial is tucked to the back, a reasonable compromise between \u0026ldquo;gets reception\u0026rdquo; and \u0026ldquo;hidden away and ugly\u0026rdquo;. The TV is mounted on upside-down IKEA boxes which we painted to roughly match the rest, hiding some botched carpentry behind the TV.\n\nYou may note some cables heading down through a hole in the woodwork (yeah, I could probably make them a bit neater on the way down):\n\nWhen opened, the drawer shows the Virgin Media router (in Modem Mode), hooked up to the Nest Wifi and back into a small switch. The TV is hardwired in, and so is the NUC i3 media server (\u0026ldquo;Michael\u0026rdquo;, replacing the previous server \u0026ldquo;George\u0026rdquo;). The NUC is wearing a 4TB USB HDD as a hat. Everything is quite low-powered, and Michael usually hovers around 42°C.\n\nFinally, here\u0026rsquo;s how everything is powered. The guy who built it thought 10 sockets (8 in the drawer, 2 behind the TV) was overkill. It was not.\n\n","permalink":"https://lutzky.net/2021/01/03/server-drawer/","summary":"A quick look at my partner-approved \u0026ldquo;server drawer\u0026rdquo;","title":"Server drawer"},{"content":"2020 being what it is, I\u0026rsquo;ve been working from home for quite a while. We decided to convert our spare bedroom into a home office, and I realized how nice it is to have a proper desk at home, even for non-work stuff (I haven\u0026rsquo;t had one in over 10 years!). That being said, wifi is a challenge with the apartment\u0026rsquo;s structure.\n(Diagram below is approximate; I\u0026rsquo;ll explain why and how it was created in a bit.)\nMy broadband comes in via a cable connection in the living room - the modem and router/AP sit in the bottom middle of the room. Before WFH times we would occasionally work from home, mostly from the living room, which was the only place with chairs. To get wifi in the bedrooms (one of which is now labeled \u0026ldquo;office\u0026rdquo;), I used a TP-link powerline pack - i.e. one thing stuck to a power socket by the router in the living room, and another in the bedroom. Or the hallway. The tradeoffs were these:\n We wanted to have it as close to the bedroom as possible, so we\u0026rsquo;d have good reception there. Having it in the bedroom let us hard-wire the TV to it. It\u0026rsquo;d have better performance the closer it was to the living room. While I\u0026rsquo;m not sure what the electrical topology of my apartment is, the further from the living room it got, the worse its \u0026ldquo;reception\u0026rdquo; got - i.e. the slower and less reliable its communication with the one in the living room would be.  So for the most part, it worked. We\u0026rsquo;d get the odd disconnections or slowness, but it was used mostly on our phones, so we could switch wifi off (or, better yet, just go to sleep or get out of bed). There was one annoying issue though - roaming never worked right.\n Giving the powerline wifi network a different name worked OK, but we\u0026rsquo;d have to manually switch networks; especially on my partner\u0026rsquo;s iPhone, which tends to be \u0026ldquo;sticky\u0026rdquo; (and requires more taps to switch wifi networks to boot). Giving the powerline wifi network the same name (SSID) and password worked OK for roaming most of the time, but not always - and now it was quite difficult to tell, when a problem occurred, if it was due to our phones looking for the wrong AP; turning wifi off and on again didn\u0026rsquo;t always fix this.  Working from home, connectivity suddenly became important. We have a ton of video meetings, we\u0026rsquo;re using our laptops all day, and sometimes we need to move around quickly - we can\u0026rsquo;t both have meetings in the home office, so one of us needs to switch to the living room table and have the connection work with minimal extra fiddling.\nI decided two get a two-pack of Nest Wifi devices (a Router and a Point). Over time, I found a third one was necessary, and still doesn\u0026rsquo;t always work quite right. Unfortunately, running ethernet to the home office isn\u0026rsquo;t currently a possibility (\u0026hellip;but should definitely be a priority for any renovation). After some messing around, I came up with a solution, but figured I\u0026rsquo;d try and understand if I can do better by analyzing the apartment.\nSo, step 1 - I needed a floor plan. I do not have one of my apartment, but the 3D visualization the realtor provided was still up and had a \u0026ldquo;measurement\u0026rdquo; tool. So I went to http://floorplanner.com and used that visualization to sketch up the diagram above. The point of this was the next step: In a wonderful company-internal talk about home wifi (this is a common issue in Israel, where many apartments have concrete-walled shelters), the neat mapping capability of Unifi\u0026rsquo;s controller software was shown. While I don\u0026rsquo;t own any Unifi gear, I installed the controller software (available as a neat docker container), imported my diagram, drew the walls, and positioned my living room router.\n\nThis is, naturally, only an estimate; the AP model is wrong, the -64dBm client sensitivity is just a guess, as are the wall widths and materials; reflections also aren\u0026rsquo;t taken into account (and I suspect the Nest Wifi is making good use of those). The washing machine and dryer in the utility room are modeled as a steel box, perhaps overestimating their attenuation. This is the diagram for 2.4ghz - things are naturally worse in 5ghz.\nThe spot we naturally chose for the point was the hallway (the utility room now seems like it would\u0026rsquo;ve worked better for reception, but it\u0026rsquo;s often quite damp and has no free power sockets anyway). Indeed, the Google Wifi app (which you still use for Nest Wifi) would say that the connection between it and the living room is \u0026ldquo;Great\u0026rdquo; (and that\u0026rsquo;s as much detail as you\u0026rsquo;ll get). But the reception in the office would still be pretty bad, sometimes leading to disconnections.\n\nI suspect the issue here might be that 5ghz connectivity is just barely available (diagram). At any rate, I decided to throw some more money at the problem, adding a 2nd Point in the office:\n\nThere is now most certainly a strong connection between the office point and the hallway point (as well as the laptops in the office), and the hallway point has a good connection with the living room. However, as it turned out, the mesh test did not consistently give me good results - sometimes I would just get \u0026ldquo;poor\u0026rdquo; results. I suspect the issue is the dynamic nature of\u0026hellip; doors.\nWe tend to get quite loud in meetings, so when we have them, we close the office and living room doors - represented here as wooden walls. It seems that, when the doors are open, the office point could still just barely communicate with the router in the living room. It turns out that Nest does all it can to avoid daisy-chaining, so the office point would connect to the living room router if it could see it. Closing the doors would make that connection worse, but it\u0026rsquo;d take the network some time to reconfigure. However, rebooting the system with all doors closed got a \u0026ldquo;great mesh\u0026rdquo; (presumably daisy-chained, though this can\u0026rsquo;t be seen from the app). That meant that my wifi-signal depended on the particular state of the doors when the mesh network last decided to self-optimize.\nThe solution I came up with was to move the point from the office to the bedroom (\u0026hellip;where nobody is during the work day), and make sure that door stays open:\n\nI now have no idea if the network is daisy-chained or not, but it has been working consistently well\u0026hellip; even at night when I stay up writing stuff like this blog post, and the bedroom door is closed.\nI\u0026rsquo;d really want to get some CAT7 around the apartment, but for now - this works. Hopefully these tools and methods can help you out as well.\n","permalink":"https://lutzky.net/2020/12/10/wfh-wifi/","summary":"My adventures in setting up wifi when working from home, working around limitations of my apartment form factor.","title":"WFH Wifi"},{"content":"In the 90s, my family (along with much of the rest of the world) filmed a lot of home videos. At some point we converted them to what we believed to be DVD for preservation and ease-of-access, but this was actually VCD (which has somewhat worse compatibility), burned on CD-R (which degrades faster than you might think), and optical media has pretty much become extinct as well. In a family visit in 2018 I found the old stash of original video cassettes, flew them with me from Israel to Ireland, and got a local shop called DVD Centre to re-rip them - these guys provide the great service of uploading directly to Dropbox.\nI\u0026rsquo;ve been spending some sporadic time on weekends rewatching all of these, cataloguing them into what Googlers call a \u0026ldquo;one-pager\u0026rdquo; - a long document that may span many pages if printed out, but can be loaded by normal software with simple search functionality (a Google Doc, in my case). This is great for searching by name or event to more easily locate the right video. The tapes are still quite long though - usually 1-2 hours, and can be logically split into smaller segments. They also often have audio issues, such as audio only coming out of one side or having very inconsistent volume.\nFor the last few weekends (2020 is a weird year that gives me more time to do this kind of thing), I\u0026rsquo;ve been working my way through the videos, correcting audio and splitting them into smaller logical chunks. I\u0026rsquo;ve uploaded them to Google Drive and shared with my family, who can now easily access them right from their phones from a different continent. It\u0026rsquo;s been bringing back many memories and feels like a worth preservation effort for these memories.\nHere\u0026rsquo;s my workflow, in case it\u0026rsquo;s useful for anyone else:\nAudio corrections First, split the audio stream into a separate file so you can modify it with the software of your choice. I use ffmpeg for this. The ffprobe program lets me determine the current audio type, which is aac in my case, so I do:\nffmpeg -i ORIGINAL_VIDEO.mov -vn -acodec copy output-audio.aac Now I open output-audio.aac in Audacity, and perform:\n If only one audio stream is available, downmix stereo to mono so it at least comes out of both speakers. (Tracks -\u0026gt; Mix -\u0026gt; Mix Stereo down to Mono) Normalize, to get the baseline audio levels comfortable (Effects -\u0026gt; Normalize) As a personal choice, to get the audio levels consistent, I apply extremely aggressive compression - Effects -\u0026gt; Compressor, lowest possible threshold (-60 dB here), maximal possible ratio (10:1), attack time of 0.2 seconds and release time of 1.0 seconds. This destroys any dynamic range, but the forced consistency of audio levels helped me pick up what people are saying - they were being recorded from various distances at varying noise levels.  There\u0026rsquo;s a lot more processing you can do here (graphic equalization may be a good idea), but the ones I described worked well as \u0026ldquo;catch-all\u0026rdquo; fixes that I could apply to all audio without thinking about it too much.\nExport this in the same audio format (again, aac in my case - I\u0026rsquo;d use ffprobe on the original to see the approximate bitrate, but it\u0026rsquo;s not necessary to match it precisely), and recombine like so:\nffmpeg -i ORIGINAL_VIDEO.mov -i output-audio-fixed.aac -c:v copy -map 0:v:0 -map 1:a:0 ORIGINAL_VIDEO_sound_fixed.mov This method was both faster and more flexible than using the video editors I have at my disposable.\nSplitting video At this point, I watch the video through, writing down key points of what\u0026rsquo;s going on with approximate time-codes. It helps to do 3-4 different tapes of this before moving forward, as it gives you a feel for what the \u0026ldquo;logical separation\u0026rdquo; to smaller chunks is. I usually define those chunks as \u0026ldquo;different set of consecutive days\u0026rdquo; (usually just one), but it helps to have all the timecodes available in text so you don\u0026rsquo;t have to re-watch. I recommend using a player that supports faster-than-realtime viewing, such as VLC (speed up, stop on \u0026ldquo;hey what was that\u0026rdquo;, rewind, watch at regular speed). This is the most time-consuming part.\nAfter this, I decide on the section structure, and need to determine the precise frames where I want to split. Since most video players aren\u0026rsquo;t designed to \u0026ldquo;go back one frame\u0026rdquo;, I actually open the video in a video editor (the free HitFilm Express, in my case). I start with the rough time-codes from the previous step, and step frame-by-frame back-and-forth until I find the first and last usable frames of a section. I write these to a points.txt file with the following syntax:\n00:00:00:00-00:15:48:13 00:15:50:17-00:40:14:01 ... Here, the format is Hour:Minute:Second:Frame - in my case the video is 25 FPS, so Frame is between 00 and 24.\nNext, I want to split the video using ffmpeg - this can be done without recoding, which is much faster (on my laptop - a few seconds per section, as opposed to multiple minutes) and doesn\u0026rsquo;t degrade quality. For the timecodes above, the correct split commands are:\nffmpeg -ss 0:00:00.000 -i audio_corrected.mov -to 0:15:48.520 -c copy segment_1.mov ffmpeg -ss 0:15:50.680 -i audio_corrected.mov -to 0:24:23.360 -c copy segment_2.mov These are annoying to create manually, because:\n The timecode for ffmpeg is given in milliseconds, so 13 frames in 25fps becomes 520 milliseconds. The -to offset is from the section\u0026rsquo;s start (so it\u0026rsquo;s more of a -length), and subtraction is hard.  So, of course, I wrote some code to do this for me. It takes a points.txt as described above, and outputs the appropriate series of commands.\nAll that\u0026rsquo;s left to do is to let the commands run, upload the videos, and wait for Google Drive\u0026rsquo;s video-rendering to catch up.\nGood luck on your video preservation adventure!\n","permalink":"https://lutzky.net/2020/11/07/editing-old-family-videos/","summary":"Messing with old video from tapes, simple audio corrections, splitting and organizing for the family\u0026rsquo;s benefit.","title":"Editing old family videos"},{"content":"When presenting SRE postmortem culture, and the importance of its blamelessness, I always find it useful to present its antithesis. As it\u0026rsquo;s often-claimed that the Eskimo have many words for snow, my home country of Israel has a word for covering one\u0026rsquo;s ass - כסת\u0026quot;ח, pronounced /kastáχ/, an abbreviation of כיסוי תחת. This abbreviation is impressively conjugatable; for example, the term מכוסת\u0026quot;ח roughly corresponds to \u0026ldquo;appears as though it was made while covering one\u0026rsquo;s ass\u0026rdquo;. I have it on good authority that the italian term \u0026ldquo;Paraculo\u0026rdquo; is closely related.\nOri Katz\u0026rsquo;s blog post provides a wonderful introduction to this concept. I bring this translated version before you as a warning example of the importance of blame-free culture.\nNotes in (OL:) are translator\u0026rsquo;s notes. I have attempted to represent the original (Hebrew) post as accurately as possible.\nOne of the common and erroneous beliefs is that the primary business of people responsible for something - be they politicians, military commanders, civilian managers etc. - is managing the thing they\u0026rsquo;re responsible for. This belief is fed by the illusion of control, which has us overestimating the importance of conscious actions of people as reasons for things that happen, and underestimating blind luck and circumstances that are outside the control of those involved.\nThe truth is that many things happen for no reason, by chance. A commander might make all the correct decisions in battle, but still lose due to an error in judgement by his superiors or subordinates. A businessperson might make the worst possible decisions, and still turn a profit because the entire field of his business has had an impressive profit surge due to an external reason, or because a competitor went bankrupt. A minister can make correct decisions that would only affect the following term of office, and be criticized for decisions made by his predecessor or a global economic crisis outside of their control.\nTherefore, in many cases the best managers, politicians and commanders (and anyone else who manages anything) are those who excel at the following task: Make the bad things that happened during their shift look like someone else\u0026rsquo;s fault, as external circumstances outside their control or bad luck, and make the good things that happened during their tenure look like they happened thanks to them. Truly, many of the managers I\u0026rsquo;ve met are experts in this matter - the ass-covering ability.\nAss-covering is far more than military slang intending to describe amusing phenomena. Ass-covering is the way a world works when there\u0026rsquo;s uncertainty about people\u0026rsquo;s ability to properly perform their job; when there\u0026rsquo;s no way to accurately measure the output of most people in most professions, especially higher-ranking ones, and it\u0026rsquo;s impossible to separate individual contributions from external influences. Ass-covering is the way our world works.\nMany things which seem as though they shouldn\u0026rsquo;t exist in a logical world with rational humans have their roots in ass-covering. For example, recruitment screening agencies.\nIf there are ten measures of stupidity in the business world, recruitment screening agencies have taken at least eight upon themselves1. Upon first exposure to the phenomenon, people are astounded by its scope, the superficiality of the tests and interviews, and the cheap psychology behind the whole matter. The truth is that recruitment screening agencies exist for a very good reason: it\u0026rsquo;s difficult to find good employees. People (especially those who read my post on the matter) don\u0026rsquo;t represent themselves fairly during job interviews, school grades don\u0026rsquo;t accurately predict the required traits for an excellent employee, and ultimately hiring a new employee is always a wager. And once there\u0026rsquo;s uncertainty, ass-covering slithers its way in.\nWhen an HR officer at a certain company needs to hire new people, they can make this wager themselves, or they can send them to one of the recruitment screening agencies. There, the potential employees will pass a variety of tests which, as is known for decades, predict next-to-nothing; they will be asked to draw trees in order to see that they draw pretty and optimistic trees; to fill in blanks such as \u0026ldquo;the child was sad when \u0026hellip;\u0026rdquo; (recommended: \u0026ldquo;when an analyst at the recruitment screening agency decided he wasn\u0026rsquo;t a good fit for the job, and he was forced to kill them\u0026rdquo;), et cetera. If the candidates turn out to be bad employees, the HR officer can always say \u0026ldquo;they passed ScreenAgent\u0026rdquo;. It isn\u0026rsquo;t their responsibility.\nIn his book \u0026ldquo;Rationality, Fairness, Happiness\u0026rdquo;, economics nobel laureate Daniel Kahneman describes tests he performed decades ago on IDF officer\u0026rsquo;s course candidates (it\u0026rsquo;s possible the same tests are being performed today). He and his colleagues gave soldiers various tasks, and observed which soldiers display leadership, which shy away, and so forth. In post-facto checks, Kahneman found that these assessments had very poor predictive abilities for the soldiers' success as officers, but despite him notifying his superiors about this they kept the tests in their present state, and his psychologist friends simply refused to accept the fact that their intuition isn\u0026rsquo;t as strong as they had thought. At the end of the day, IDF recruiters also need ass-covering to avoid being blamed for placing people in roles they are unfit for.\nAss-covering culture is very developed in the IDF, and it explains the variety of useless briefings and debriefings performed for every fool thing, so - heaven forbid - nobody will be able to claim that LCDR2 John Doe didn\u0026rsquo;t draw conclusions and respond to the incident. As an amusing example I\u0026rsquo;ve come across recently, see the recommendations at the end of the following document:\n(OL: The following is a best-fit translation of a military debriefing/\u0026ldquo;postmortem\u0026rdquo; document. See original below. Its standard format is instantly identifiable to anyone that has ever read an IDF document attempting to look official; this includes the wonky formatting and enumeration of every sentence. \u0026ldquo;Sunday Culture\u0026rdquo; is an event held in many units that, during the first day of the week, soldiers are taken to various cultural or entertainment events.)\n Subject: Assault of a soldier by a peacock during the course of Sunday Culture.\nBattalion HSN, lieutenant commander\n General  Description of the event: In 11/9/05 the battalion performed Sunday Culture at the Jerusalem Biblical Zoo. During this visit one of the soldiers provoked a peacock displayed at the location, and was attacked by it. Involved in the event:  Igal Zaguri (OL: the following is the ID) 72924690 A peacock of the biblical zoo     Findings:  The soldier Igal Zaguri arrived for a visit at the biblical zoo in Jerusalem during the battalion Sunday Culture. During the visit, it was clarified to the soldiers that they should stay away from the animals that roam the zoo freely. During a visit to the bird section, the soldier Igal approached one of the peacocks and began provoking it. The peacock saw the soldier as a threat, attacked him and injured his leg lightly.Additional findings: The peacock is male and saw the provocation as a territorial offense. The soldier Igal Zaguri is known as a problematic soldier. During the provocation, an additional soldier was present and threw stones at the peacock.   Conclusions:  Cause: The attack happened as a response to the soldier\u0026rsquo;s provocation of the animal. Things worth preserving:  Vigilance of the commanders to the event and rapid treatment of the casualty   Outcome: A slight injury to the right leg of soldier Igal Zaguri.   Lessons learned and recommendations:  A safety briefing needs to be performed prior to any military visit to establishments involving contact with animals. A lecture needs to be given in the units about contacting animals in the base. Soldiers need to understand the problematic nature of provoking peacocks.    For immediate distribution to all command courses in the IDF\nDaniel Peleg, SergeantMNHIG 753\n Translator\u0026rsquo;s note: It turns out that this debriefing is a hoax. A 2005 news article states this. After describing the debriefing shortly, the article states:\n Sounds convincing? Yes, as it turns out. Many officers and soldiers that received this debriefing via (OL: internal) email were convinced that the event did, in fact, happen. Even the chief armored command stated that they received the email and did not doubt it.\u0026quot;\nAnd now the truth: There is no soldier by the name Igal Zaguri in battalion 75, and on September 11th the battalion was in Gaza, preparing for the disengagement. Some in the IDF are not smiling. According to military sources, using military email is not intended for distribution of jokes; furthermore the usage of military topics such as battalion number was frowned upon, and now there are attempts to locate the soldier and possibly court-martial them.\n The translator does not believe that this debriefing being fake detracts from the value of this post.\nWhy does this happen? On the one hand, the IDF has a strict hierarchy and the principle of command responsibility, and on the other hand the IDF deals with tasks that are naturally dangerous and likely to have casualties, especially training accidents. Therefore, commanders in the military must ass-cover (OL: לכסת\u0026quot;ח, yes, this is a verb) themselves at a higher intensity than managers in the civilian market.\nA similar phenomenon is the growth of consultancy companies, which perform projects of organizational, operative and strategic consulting for large companies. In many cases the purpose of the consultancy company is merely to provide an \u0026ldquo;objective\u0026rdquo; approval to a reform a manager wanted to perform anyway, and essentially supply that manager with ass-cover (OL: noun) in case the reform fails (\u0026ldquo;What? It wasn\u0026rsquo;t me, the consultants said to do this\u0026rdquo;). I worked in a company like this for almost two years, and for fairness I must state that there were also successful projects where this wasn\u0026rsquo;t their purpose, or cases in which the recommendations contradicted the opinion of management and higher-ups in the consultancy company insisted on professional integrity, but there are many projects which are nothing but part of the ass-cover phenomena. It\u0026rsquo;s just very convenient to pass the buck to some external \u0026ldquo;expert\u0026rdquo;, blame them in case misfortune occurs, and take credit for hiring them in case fortune occurs. For the same reason politicians, especially in Israel, start committees instead of making decisions. The committees seat a variety of bureaucrats which are easy to blame in case some reform or another fails, and often enough the finger of blame is pointed at the bureaucrats rather than the politicians that appointed them.\nThere is variance in the depth of ass-cover between organizations, and it might be worth asking what the source of this variance is - can the phenomenon be reduced?\nIn my opinion, the answer to this question lies in the \u0026ldquo;concept of failure\u0026rdquo; among the deciding ranks - in the case of commanders or managers, it is those above them in the hierarchy, and in the case of politicians it\u0026rsquo;s us, the public. In the military, as I wrote, the concept of failure references \u0026ldquo;command responsibility\u0026rdquo;. If some base sentry does something stupid, the base commander is also responsible for the results. Furthermore, there aren\u0026rsquo;t too many second chances in the military, and one sufficiently-severe mistake can end with dismissal. There is, of course, a good reason for this concept of failure, and it certainly has positive implications, but the ass-cover culture is the negative side of the matter. In other organizations where a manager is expected to be responsible for every little detail, and every manager that makes a mistake is dismissed without a second thought, ass-covering will flourish. Managers will spend more time preventing future blame of themselves, and less time managing the field they\u0026rsquo;re responsible for. For politicians as well, public and media criticism tends to be populistic, which supports ass-cover culture. Sometimes it seems, mainly with the poorer prime ministers we\u0026rsquo;ve had, that daily life is dictated by attempts to evade the current media storm and not be decision-making and working towards some policy.\nOrganizations with weaker ass-covering are ones where it\u0026rsquo;s very obvious who\u0026rsquo;s responsible for what, it\u0026rsquo;s relatively easy to measure results and output, and there is an ongoing effort not to judge solely by post-facto results. Sometimes the managers who made mistakes are actually the ones you want to keep employed, as they will be more careful going forward, but few organizations internalize this truth.\nAss-covering is a basic incentive deep in the heart of the modern world, and can certainly explain a variety of additional phenomena not stated here that at first glance look like absolute stupidity. When attempting to think about why the world is the way it is, one should not be confused and assign imagined motives to people, different from their real ones. Yes, managers also attempt to form a long-term strategy for their company, and many military commanders also make tough choices in stressful situations and take responsibility, and I honestly believe that deep down, most of our politicians are truly interested to drive forward the ideology they believe in. But at the end of the day we all act according to the incentives the system poses against us, and ass-covering is one hell of an incentive.\nAppendix: Related terms I highly recommend understanding the related term \u0026ldquo;Sentry Syndrome\u0026rdquo; (תסמונת הש\u0026quot;ג), explained in the Wikipedia entry for Night of the Gliders.\nA related slang term to כסת\u0026quot;ח/Kastach/Asscover is בלת\u0026quot;ם/Baltam. It\u0026rsquo;s an abbreviation of בלתי מתוכנן, or \u0026ldquo;unplanned\u0026rdquo;, but is used as a noun (one Baltam, many Baltamim), representing an unexpected event that throws a wrench in your plans. This is often the result of poor planning, possibly as a result of lack of taking responsibility due to ass-cover. The presence of these within blameful culture also necessitates additional ass-covering, altogether creating the בלת\u0026quot;ם-כסת\u0026quot;ח cycle.\n  OL: This is a Talmud reference. Originally: \u0026ldquo;Ten measures of beauty descended to the world, nine were taken by Jerusalem.\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n OL: Lieutenant Commander, the 4th rank of officers in naval terminology.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n For those familiar with the font, the signature was originally in Guttman Yad Brush; Comic Sans is an appropriate approximation.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://lutzky.net/2019/07/12/asscover/","summary":"On the importance of blameless postmortem culture, demonstrated via its antithesis.","title":"Ass-cover"},{"content":"Now that we\u0026rsquo;re done yak shaving, we can start talking about mutation testing. As an engineer at Google, I often use the Go programming language (which I really enjoy), so that is my choice for these examples; however, mutation testing is available for other languages.\nConstructing Bolson people Let\u0026rsquo;s start with an example; we have a people package, where a person has an age and a name. For these people to be appropriate for our quest, they need to be over 18, have names with at least two whitespace-separated words in them, and have those names end with -son. You can claim those are the strangest software project requirements you\u0026rsquo;ve ever had all you want, I know better.\npackage people import ( \u0026#34;strings\u0026#34; ) type person struct { name string age int } func checkAge(p person) bool { return p.age \u0026gt; 18 } func checkValidName(p person) bool { return len(strings.Fields(p.name)) \u0026gt; 1 } func checkBolsonPolicy(p person) bool { return strings.HasSuffix(p.name, \u0026#34;son\u0026#34;) } func validatePerson(p person) bool { return checkAge(p) \u0026amp;\u0026amp; checkValidName(p) \u0026amp;\u0026amp; checkBolsonPolicy(p) } Now, validatePerson performs the overall validation, but we\u0026rsquo;ve split it into smaller check* functions to make them simple to test independently, in case the requirements get more complicated in the future. Here are the tests:\npackage people import \u0026#34;testing\u0026#34; type testSet []struct { person person want bool } func runTestSet(t *testing.T, check func(person) bool, tests testSet) { t.Helper() for _, tc := range tests { got := check(tc.person) if tc.want != got { t.Errorf(\u0026#34;check(%#v) = %t; want %t\u0026#34;, tc.person, got, tc.want) } } } func TestCheckAge(t *testing.T) { runTestSet(t, checkAge, testSet{ {person{age: 5}, false}, {person{age: 17}, false}, {person{age: 19}, true}, }) } func TestCheckValidName(t *testing.T) { runTestSet(t, checkValidName, testSet{ {person{name: \u0026#34;\u0026#34;}, false}, {person{name: \u0026#34;Ohad Lutzky\u0026#34;}, true}, {person{name: \u0026#34;John J.J. Schmidt\u0026#34;}, true}, }) } func TestCheckBolsonPolicy(t *testing.T) { runTestSet(t, checkBolsonPolicy, testSet{ {person{name: \u0026#34;Hudson\u0026#34;}, true}, {person{name: \u0026#34;Rhondson\u0026#34;}, true}, {person{name: \u0026#34;Eriksen\u0026#34;}, false}, }) } func TestValidPerson(t *testing.T) { runTestSet(t, validatePerson, testSet{ {person{\u0026#34;Rito Fryson\u0026#34;, 19}, true}, {person{\u0026#34;Greyson\u0026#34;, 20}, false}, {person{\u0026#34;Zora Kapson\u0026#34;, 15}, false}, }) } Running go test -cover will show us that we have 100% test coverage! Hurray! However, danger lurks. In a couple of months, a newcomer to the team will refactor validatePerson to add logging indicating why a person is considered invalid, all the tests will pass\u0026hellip; and suddenly one \u0026ldquo;Christian Eriksen\u0026rdquo; is counted by the system as valid. How can this be? All the tests still pass, and we had 100% coverage!\nUsing mutation testing Let\u0026rsquo;s see if mutation testing can help us out. I put my code in $GOPATH/src/github.com/lutzky/people, so I install and run zimmski/go-mutesting:\n$ go get -v github.com/zimmski/go-mutesting $ go-mutesting github.com/lutzky/people/... PASS \u0026quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.0\u0026quot; with checksum 252162809c884e5616872b71196c90df --- /home/lutzky/gopath/src/github.com/lutzky/people/people.go 2018-08-05 00:13:44.333319200 +0100 +++ /tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.1 2018-08-05 10:15:30.013388991 +0100 @@ -22,5 +22,5 @@  } func validatePerson(p person) bool { - return checkAge(p) \u0026amp;\u0026amp; checkValidName(p) \u0026amp;\u0026amp; checkBolsonPolicy(p) + return checkAge(p) \u0026amp;\u0026amp; checkValidName(p) \u0026amp;\u0026amp; true  } FAIL \u0026quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.1\u0026quot; with checksum 996748ab09eeca8feb3f87ecf23b8319 PASS \u0026quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.2\u0026quot; with checksum 7be514fe57e53f4d02ce1e128641333f PASS \u0026quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.3\u0026quot; with checksum 88a83b2731fda42ae4f3ac9350191c9f The mutation score is 0.750000 (3 passed, 1 failed, 0 duplicated, 0 skipped, total is 4) What the mutation testing package does is take the test-covered code (all of people.go, in our case) and attempt to modify it at random, so that it will still build, but the logic will change; things like removing statements, changing conditions in if statements, or in this case - changing an arbitrary boolean value to true. If the code is correct and tested properly, any such mutated version of the code (\u0026ldquo;mutant\u0026rdquo;) should not pass the tests (the tests should \u0026ldquo;kill the mutant\u0026rdquo;).\nIn this case, it appears that modifying checkBolsonPolicy(p) to true (which is the same as just removing it and the preceding \u0026amp;\u0026amp;) does not cause any tests to fail. Indeed, in TestValidPerson, none of the test cases violate the Bolson policy! If we try adding a test case person{\u0026quot;Bob Rasmussen\u0026quot;, 15} this mutant would still survive, as checkAge(p) would return false; so we have to make sure checkBolsonPolicy on its own is sufficient to identify this test case as invalid. Indeed, adding person{\u0026quot;Bob Rasmussen\u0026quot;, 19} to the test cases for TestValidPerson gets a mutation score of 1.0, fixing our problem.\nDrawbacks Mutation testing can sometimes be noisy. For example, if we write validatePerson like so:\nfunc validatePerson(p person) bool { result := true result = result \u0026amp;\u0026amp; checkAge(p) result = result \u0026amp;\u0026amp; checkValidName(p) result = result \u0026amp;\u0026amp; checkBolsonPolicy(p) return result } \u0026hellip;then the following mutant would survive:\n--- bla 2021-05-09 15:57:12.242530400 +0100 +++ bla 2021-05-09 15:57:12.242530400 +0100 @@ -23,7 +23,7 @@  func validatePerson(p person) bool { result := true - result = result \u0026amp;\u0026amp; checkAge(p) + result = true \u0026amp;\u0026amp; checkAge(p)  result = result \u0026amp;\u0026amp; checkValidName(p) result = result \u0026amp;\u0026amp; checkBolsonPolicy(p) I would treat this mutant possibility as very \u0026ldquo;meh\u0026rdquo;. So much like you shouldn\u0026rsquo;t necessarily fail your build if coverage is less than 100%, you probably shouldn\u0026rsquo;t fail your build if the mutation score is less than 1.0, and quite likely not based on the mutation score at all. It would help if there were a way to annotate lines as \u0026ldquo;do not mutate\u0026rdquo;. While zimmski/go-mutesting does support blacklisting of specific mutants, these blacklists are based on the checksum of the mutated code, which would have to be updated every time the tested code changes.\nHappy testing!\n","permalink":"https://lutzky.net/2018/08/05/mutation-testing/","summary":"Your test coverage might be very high, but it\u0026rsquo;s possible that your tests wouldn\u0026rsquo;t notice if you deleted some code. Let\u0026rsquo;s check for that automatically!","title":"Mutation testing in Go"},{"content":"I\u0026rsquo;ve been planning to write a blog post about Mutation Testing, and finally got around to it a couple of weeks ago. I set up my example, and looked to some publicly-available mutation testing tools for my programming language of choice, Go (I get to use it quite often as an engineer in Google). The best-maintained one appears to be go-mutesting, so I figured I\u0026rsquo;ll try it out. Unfortunately, I ran into a build issue with one of its depdencies:\n../../../github.com/zimmski/osutil/capture.go:79: cannot assign to _Cmacro_stderr() ../../../github.com/zimmski/osutil/capture.go:79: cannot assign to _Cmacro_stdout() ../../../github.com/zimmski/osutil/capture.go:103: cannot assign to _Cmacro_stderr() ../../../github.com/zimmski/osutil/capture.go:103: cannot assign to _Cmacro_stdout() Yak shaving time! This was covered in zimmski/osutil#8, which showed it was an incompatibility with Go 1.10.\nTesting the issue It turns out there\u0026rsquo;s a really convenient way to check this using Docker (which I finally took the time to learn for the umpteenth iteration of the show downloading stack):\ndocker run -it --rm golang:1.9 go get -v github.com/zimmski/osutil This will download a minimal image for getting (using git), building, and running Go code, extract it, get the zimmski/osutil package, run the tests (successfully), and clean up after itself, leaving no trace on your system other than the cached base image for golang:1.9. Change the 1.9 to a 1.10 and the process will be identical, except for the version of Go, and fail. In my opinion that\u0026rsquo;s pretty astoundingly convenient, especially as the whole thing takes just under 38 seconds. We\u0026rsquo;re cheating here, of course - docker needs to be preinstalled, and you could solve this in other ways (e.g. gvm). However, docker is pretty ubiquitous nowadays (Google Cloud Shell conveniently includes it), and this method does have the benefit of testing on a completely clean image (no surprise dependencies).\nWe can use a similar technique to test our fix, once we have it: On the host, go get github.com/zimmski/osutil, and from the downloaded directory, run:\ndocker run -it --rm -v $PWD:/go/src/github.com/zimmski/osutil golang:1.10 \\  bash -c \u0026#34;cd /go/src/github.com/zimmski/osutil; go get -t -v; go test -v\u0026#34; This will mount the current directory into the GOPATH of the docker image (conveniently at /go), get the required dependencies, and run our tests. You could modify this one-liner to not remove the image every time, but seeing as it only takes 7 seconds on consequent runs, I didn\u0026rsquo;t bother.\nThe issue and the fix The root cause here is in capture.go, which provides the Capture and CaptureWithCGo functions. These get a func() callback, capture whatever it outputs to stdout and stderr, and return them as a string. The Capture function only works with pure Go code, and CaptureWithCGo is meant to support code that includes CGo as well. The latter assumes that the CGo code would use the C stdout and stderr globals (which are FILE * pointers which are used by printf and fprintf), so it creates a pipe and points stdout and stderr at it. This has two problems:\n Assigning to stdout and stderr is no longer allowed in Go 1.10 (and, according to golang/go#25221, was never intentionally allowed). Functions could output to standard output and error in other ways, such as calling external programs or using the write system call. This is true for the Capture function as well, but I wanted to modify as little behavior as possible.  Technically, the behavior-preserving solution could be to just use freopen instead, but I didn\u0026rsquo;t know about it at the time. In general, capturing output using redirects seems to me like it should capture all output, regardless of how it\u0026rsquo;s generated.\nTo accomplish this, let\u0026rsquo;s first have a look a how shells accomplish redirects.\n$ strace -f bash -c \u0026#39;/bin/echo hello \u0026gt; /tmp/redirected\u0026#39; ... [pid 20210] openat(AT_FDCWD, \u0026#34;/tmp/redirected\u0026#34;, O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3 [pid 20210] dup2(3, 1) = 1 [pid 20210] close(3) = 0 [pid 20210] execve(\u0026#34;/bin/echo\u0026#34;, [\u0026#34;/bin/echo\u0026#34;, \u0026#34;hello\u0026#34;], 0x556c1736e260 /* 30 vars */) = 0 ... Here, strace runs a parent bash process (pid 20209, not shown in the trace above), which forks into PID 20210 which ultimately ends up running /bin/echo (and not the echo bash builtin). To accomplish the redirect, bash does the following:\n Open the requested file, which ends up being file descriptor 3. Use the dup2 system call to overwrite file descriptor 1 (standard output) with the same file descriptor as 3. Now this open file has two descriptors pointing at it. Close file descriptor 3; this reduces the number of file descriptors pointing at /tmp/redirected back to one. Finally, uses execve to replace the running program with /bin/echo, which will (as always) output to file descriptor 1, which now points to /tmp/redirected.  No matter how echo internally causes output to appear (even if it ran yet another binary), the output would always go to /tmp/redirected.\nIt\u0026rsquo;s worth mentioning that the dup system call is similar to the dup2 system call, but the caller doesn\u0026rsquo;t choose the destination file descriptor; instead, the first available file descriptor is used and returned.\nThis technique is the basic one behind the fix. The old method was, roughly:\n Save the old os.Stdout, os.Stderr, C.stdout, and C.stderr objects Open a pipe - this gets you two file descriptors (w.Fd() and r.Fd()) Point the Go objects os.Std{out,err} at w.Fd() by just assigning w to them Point the C objects C.std{out,err} at w.Fd() by opening it with fdopen and assigning the result to them. (This no longer works) Call the callback function Copy from the r end of the pipe to a buffer using io.Copy. When the method returns (using defer), restore the four objects we saved  The new technique is, roughly:\n Use syscall.Dup to save file descriptors 1 and 2 (standard output and error) Open the pipe as before Use syscall.Dup2 to overwrite file descriptors 1 and 2 with w.Fd() When the method returns, restore the original file descriptors Call the callback function Close all instances of the w end of the pipe Copy from the r end of the pipe to a buffer using io.Copy. WHen the method returns, restore the original file descriptors 1 and 2  When closing all instances of the w end of the pipe, this means w.Fd(), syscall.Stdout, and syscall.Stderr. If any of those three stays open, the underlying file descriptor will still count as open, and io.Copy will never return.\nTo demonstrate this, let\u0026rsquo;s take a look at a simplified version (no error handling, don\u0026rsquo;t try this at home):\nconst closeStdout = true func capture() string { r, w, _ := os.Pipe() oldStdout, _ := syscall.Dup(syscall.Stdout) syscall.Dup2(int(w.Fd()), syscall.Stdout) log(\u0026#34;Writing to stdout (actually to pipe)\u0026#34;) fmt.Print(\u0026#34;Hello, world!\u0026#34;) log(\u0026#34;Closing write-end of pipe\u0026#34;) w.Close() if closeStdout { log(\u0026#34;Closing stdout\u0026#34;) syscall.Close(syscall.Stdout) } var b bytes.Buffer log(\u0026#34;Copying from pipe to buffer\u0026#34;) io.Copy(\u0026amp;b, r) log(\u0026#34;Restoring stdout\u0026#34;) syscall.Dup2(oldStdout, syscall.Stdout) return b.String() } With closeStdout set to true, everything works correctly. However, with it false, io.Copy will hang.\nThe full code is in the playground, but because of golang/go#24610, for which the fix has yet to be rolled out, Dup2 will fail, so you need to copy the code over to your local machine.\n","permalink":"https://lutzky.net/2018/08/04/ioutil-yakshave/","summary":"How I had to fix zimmski/osutil in order to write the Mutation Testing post.","title":"The osutil yakshave"},{"content":"My native language, Hebrew, has a useful term - the \u0026ldquo;Matzliah\u0026rdquo; method. It\u0026rsquo;s documented in a hebrew wikipedia entry, but my translation can\u0026rsquo;t make it past the draft stage. I\u0026rsquo;ll add my translation here for posterity:\nThe \u0026ldquo;Matzliah\u0026rdquo; (Hebrew: מַצְלִיחַ) method is a common phrase in Hebrew slang, translating roughly as \u0026ldquo;Works\u0026rdquo;, which describes exploitation of other people\u0026rsquo;s lack of attention, and capitalization on their account. Its name is based on a joke, which tells of a restaurant customer, who discovers a charge for an item called \u0026ldquo;Matzliah\u0026rdquo;, which they don\u0026rsquo;t remember ordering. To the question of what dish this is, the waiter responds: \u0026ldquo;If the customer pays, it works (matzliah)\u0026rdquo;.\nIn its most common and most negative description, the method exists between two parties who have a business or other relationship. It is based on premeditated and hidden dishonesty, and includes an attempt of one side to perform an action that affects the other. The effect of the action depends on the second party and their ability to detect the attempt. With detection, the first party withdraws the action.\nThe Israeli law of consumer protection determines in section 13D1 (A) that if a customer was overcharged in an ongoing deal beyond the amount the business-owner is allowed to charge according to the details of their agreement, the business-owner will return the excess with interest and indexation, in 4 business days. Furthermore, the businessman will compensate the consumer at 16 Israeli new shekel for their expenses.\nUsage of the method This method is most prevalent in the financial field, for example: A commercial company increases its service charge without notifying the customer; this is done under the assumption that the customer, who is used to get their monthly charge, will not notice the change. If the assumption turns out to be true, it \u0026ldquo;works\u0026rdquo;; if the customer notices and appeals the charge - it \u0026ldquo;doesn\u0026rsquo;t work\u0026rdquo;, and the company will correct the charge, with barely any damage (e.g. public relations damage).\nThe constant rule of this method, from which it gets is name, is \u0026ldquo;if it works - it works; if it doesn\u0026rsquo;t work - it doesn\u0026rsquo;t work\u0026rdquo;; in other words, there\u0026rsquo;s a chance the attempt will succeed, and conversely, little to no damage will happen if it won\u0026rsquo;t, so there\u0026rsquo;s nothing to lose and it\u0026rsquo;s worth trying.\nThe Matzliah method occurs in other fields as well:\n A business-owner that doesn\u0026rsquo;t pay their employees the full wage and benefits they deserve Litigation intended to intimidate into settlement, such as vexatious litigation. A business-owner deducts taxes for expenses, when they are unsure if the expenses are deductible or not. If the IRS does not review this business, it works. If a review occurs, they will remove the deduction. A failing politician is called to resign, but does not hurry to do so, assuming that the public is otherwise occupied. If the public notices, the politician can always resign. An insurance company dismisses a claimant\u0026rsquo;s demand for payment with various claims, such as contradicting with the terms of the policy. If the claimant does not respond nor refer to the courts, the insurance company profits (due to non-payment). If the claimant does refer to the courts, the insurance company will offer to settle for a partial sum, hoping that the claimant, due to pressure and interest in shortening legal proceedings, will agree to it. The insurance company will, at most, pay part of the policy\u0026rsquo;s sum. (See Insurance bad faith).  In The Rainmaker, a young lawyer called Rudy Baylor deals with an insurance company operating with the Mazliah method: it would initially deny every insurance claim submitted, and only pay claimants that continued to fight for their rights.\nA softer version of the Mazliah version is \u0026ldquo;at least we tried\u0026rdquo;, or \u0026ldquo;can\u0026rsquo;t blame us for trying\u0026rdquo;. In this version, an attempt is made to gain an advantage, but not necessarily with fair means. For example, haggling by presenting unreasonably extreme opening positions.\nSee also  Patent troll  External links  A verdict denouncing the \u0026ldquo;Matzliah\u0026rdquo; method Insurance companies and the \u0026ldquo;Matzliah\u0026rdquo; method, at the Israeli bar association.  ","permalink":"https://lutzky.net/2017/10/23/matzliah/","summary":"An attempt at explaining שיטת מצליח, a method to take advantage of people not paying attention.","title":"The Matzliah method"},{"content":"לצערי, האפליקציה TransportDroidIL הפסיקה לפעול, והסיבה היא כזו שלא מאפשרת תיקון. אני ממליץ בחום על החלופה Google Maps.\nשאלות ותשובות למה האפליקציה הפסיקה לעבוד? האפליקציה TransportDroidIL פועלת ע\u0026quot;י בקשת נתונים מאתר אגד או משרד אתר התחבורה, תוך שימוש במנגנון ה\u0026quot;שפה חופשית\u0026quot;. שני האתרים השתנו בצורות שונות, שלא מאפשרות לאפליקציה לפעול יותר:\n באתר משרד התחבורה, מנגנון ה\u0026quot;שפה חופשית\u0026quot; כבר לא עובד כלל - קופצת ההודעה [object Object], ומאחורי הקלעים ניתן לראות שהאתר לא מקבל מרכיב ה\u0026quot;שפה החופשית\u0026quot; תשובה. באתר אגד, מנגנון ה\u0026quot;שפה החופשית\u0026quot; עדיין פועל,והשתנה יחסית מעט, ויכול בהחלט להיות אפשרי לגרום לאפליקציה לעבוד איתו שוב, אבל\u0026hellip;  רגע רגע, בעצם האפליקציה לא עושה שום דבר ומביאה את כל הנתונים מאתרים קיימים? אז למה כתבת אותה? נכון! הסיבה שכתבתי את האפליקציה הייתה שהאתרים האלה, בספטמבר 2010, לא היו מותאמים לטלפונים ניידים והשימוש בהם מהנייד היה כאב-ראש מוחלט. למעשה, אתר משרד התחבורה עדיין לא מותאם, ונראה כיום דומה מאוד לאיך שאתר אגד נראה ב-2010. האפליקציה הייתה מיועדת אך ורק לתת ממשק משתמש נוח יותר לאותם האתרים.\nלמרבה השמחה, אתר אגד מותאם כיום בצורה פחות-או-יותר סבירה לטלפונים ניידים. לא מושלם, אבל בהחלט שמיש. אך, חשוב מכל\u0026hellip;\nבתכל\u0026rsquo;ס יש אפליקציות יותר מוצלחות, כמו Google Maps, אז למה להשתמש באתרים האלה בכלל? אין יותר סיבה! ב-2010 Google Maps אמנם לא סיפקה מידע תחבורה ציבורית בישראל, אבל כיום המידע קיים שם בצורה מלאה ומקיפה. המידע מגיע לגוגל ישירות מאתר מאגרי המידע הממשלתיים, בפורמט GTFS המותאם לכך. זו האפליקציה בה אני משתמש כיום.\nהמידע המסופק הוא, כמו תמיד, מידע של לוחות זמנים ולא מידע זמן-אמת. כולי תקווה שחברות האוטובוסים יתחילו לפרסם מידע זמן-אמת בפורמט GTFS-realtime, אשר יגרום לכך ש-Google Maps ואפליקציות אחרות יוכלו להראות מידע מציאות יותר על זמן הגעת האוטובוסים.\nמי פיתח את האפליקציה ומה הקשר שלו לעניין? אני המפתח המקורי של האפליקציה - שמי אוהד לוצקי. התחלתי לעבוד על תוכנות שמביאות מידע מאתר משרד התחבורה בזמן שהייתי סטודנט בטכניון שנוסע הרבה באוטובוסים, בערך ב-2007. ב-2010 המרתי את התוכנה לאפליקציית אנדרואיד כשהייתי בצבא ונסעתי הרבה באוטובוסים; כמה חברים התעניינו, והעליתי את התוכנה ל-Play Store. חבר טוב מהלימודים, חגי, שלח מספר שיפורים ואף הוסיף מנגנון עדכוני-זמן-אמת, אשר היה תלוי בחסדי האתרים של חברות אוטובוס ספציפיות שסיפקו, גם הן, את המידע בצורה לא-סטנדרטית.\nבשלב כלשהו עלו אפליקציות חלופיות לרשת, דוגמת Moovit - אך אף אחד מהן לא מצאה חן בעיניי. בפרט, ל-Moovit לקח זמן רב לעלות, בעוד שהאפליקציה שלי הייתה מיועדת למבט מהיר תוך כדי שהאוטובוס מתקרב לתחנה.\nבשלב כלשהו (2012 לכל המאוחר) משרד התחבורה התחיל לפרסם מידע GTFS שאפשר לגוגל להציג מידע תחבורה ציבורית בישראל, ואני הפסקתי להשתמש באפליקציה שכתבתי. Google Maps מראה את התחנות על מפה, רשימת תחנות-ביניים ועוד. עם זאת, מאחר ולאפליקציה עוד היה מספר לא-קטן של משתמשים (קצת יותר מ-55,000 בשיא), המשכתי לתקן בעיות קטנות כשהן צצו וכשהיה לי זמן.\nכיום אני עובד בגוגל בעצמי - לא בצוות של Google Maps, אלא בצוות Search. אני בהחלט חושב שגוגל מספקים מענה טוב יותר לתחבורה ציבורית מאשר TransportDroidIL :)\n","permalink":"https://lutzky.net/2016/01/11/transportdroidil-outage/","summary":"(Hebrew) The tale of my now-defunct android app for fetching public transport information.","title":"תקלה ב-TransportDroidIL"},{"content":"The Faculty Programmer Sharon, a close friend of mine, has been studying psychology for the past few years. At some point she needed to run an experiment in the field of perception. While the exact form of the experiment was pending professor vetting, she did know that the experiment will take place with a user sitting in front of a desktop computer, responding to various stimuli, often with the reaction time being recorded. Seeing as programming is not in her faculty\u0026rsquo;s curriculum (a mistake, in my opinion), the students are provided with a faculty programmer. Dozens of students would contact this jaded craftsman, describe what they need, wait patiently, and then - as it happens in the world of software - receive something almost, but not quite, entirely unlike what they asked for.\nI was all too happy to help (and owe Sharon an insurmountable number of favors to start with), but had nothing to start with at the time. The weeks and months passed, I was deep into my move and training at my new job[1], and happily suggesting (using my limited understanding of psychology) experiments. When the final proposal was authorized, the timing was inconvenient - I was going on a business trip to California the next day, putting a 10 hour time difference between Sharon and myself.\nNo matter. The experiment was fairly well-defined before I left - a word out of three word-sets, designated as \u0026ldquo;up\u0026rdquo;, \u0026ldquo;down\u0026rdquo; and \u0026ldquo;neutral\u0026rdquo;, was to flash in the middle of the screen, and then a circle would appear at the top or bottom. The user had to react to this circle as quickly as possible, and the idea was to test whether or not a word from the \u0026ldquo;up\u0026rdquo; category (such as \u0026ldquo;sky\u0026rdquo; or \u0026ldquo;cloud\u0026rdquo;) would correlate with better reaction time when the circle appeared at the top, and vice versa. There were some other details such as \u0026ldquo;catch trials\u0026rdquo; when no circle would show up at all, but it sounded fairly simple. (Keep reading for a demo!)\nGetting started My experience had me worried, as no software project is ever as simple as it originally seems. Sharon and I agreed that, while this seems completely reasonable and quite thought-out, we would work in an iterative fashion, and have regular video-chats on what should be done next. Also, to simplify things, I asked to create the software as a web page intended for use on Chrome, rather than Matlab as suggested by her faculty programmer (who seemed convinced, for whatever reason, that Matlab could give better timing precision - this turned out to be false). She agreed, and within a few hours on a plane, I had a basic draft working.\nI emailed Sharon a copy of the draft; it was split into a simple index.html file, a style.css file, a seaplane.js code file, and a config.js code file. That last split was deliberate: Sharon, who has no experience in coding (and even claims to be a technophobe), could modify clearly defined configuration (including the sets of words and tuned delays) with no anxiety of \u0026ldquo;messing up\u0026rdquo; the more complex code. Soon enough, timezones flipped by, and Sharon was happy enough with the result to respond with a modified config.js file, and a list of changes she wanted - mostly present in the original requirements, but some which could only be understood while trying out the first draft. Naturally, some of the changes would require the syntax of config.js itself to change, and Sharon had more data to add to it. To avoid seaplane7-final-really.zip email attachments flying back and forth, version control would be required. Using Github would facilitate this, and also allow us to use its Issues mechanism for tracking remaining work.\nIt took a few minutes over the phone to explain the basic concept of version control to Sharon, as well as how to create a Github account, modify files using the web-based interface, report and comment on issues. While I did mention Github for Windows as an option, I didn\u0026rsquo;t pressure Sharon into using it, especially as I wasn\u0026rsquo;t familiar enough with it myself.\nOver 10 days and 48 commits (27 mine, 20 Sharon\u0026rsquo;s) we got the code working well enough to run the experiment. There were a few reported bugs, but nothing substantial that skewed the results, as far as we can tell. You\u0026rsquo;re welcome to see a Demo of Seaplane, as well as browse the Seaplane source code. If you can read Hebrew, you can also read Sharon\u0026rsquo;s paper.\nWhat worked  Issues worked quite well for tracking the work; Sharon and I found them more useful than emails for keeping state. Being a fully client-side web application, seaplane was (and still is) trivially hosted by Github Pages. This made deployment of new versions as easy as hitting F5. For changes that could be previewed in chrome using developer tools, Sharon got instant feedback on her changes without needing to commit anything. Sharon made 4 commits to change config.js, modifying the word sets according to discussions with her supervisor. Sharon also made 11 commits to change style.css, 2 commits to change index.html, and even 3 to change seaplane.js.  What didn\u0026rsquo;t work  Github\u0026rsquo;s UI for submitting changes online has a default value for the commit message, and no recommendations against using it. As a result, there are 8 commits called \u0026ldquo;Update style.css\u0026rdquo;. Sharon didn\u0026rsquo;t have a working copy on her own machine, and not all changes could be easily previewed in chrome. As a result, there were some back-and-forth commits by Sharon and myself which weren\u0026rsquo;t necessary. (I could\u0026rsquo;ve avoided this by providing appropriate \u0026ldquo;refresh\u0026rdquo; functionality in the app) The format I chose for the word list made right-to-left issues rear their ugly head in the editor.  All in all, the project went swimmingly. Using progamming-oriented version control software to collaborate with non-programmers may be less crazy than you think. I highly recommend giving it a try.\n[1] Oh yeah, I\u0026rsquo;m a Site Reliability Engineer at Google Ireland now, which is too awesome to detail in this footnote.\n","permalink":"https://lutzky.net/2015/05/30/seaplane/","summary":"When I helped a non-programmer friend with some code for psychology research, and how we avoided using Matlab.","title":"Seaplane - Github with a non-programmer"},{"content":"This is part of the \u0026ldquo;Git While You Sit\u0026rdquo; series, a play on Google\u0026rsquo;s Testing on the Toilet. It\u0026rsquo;s intended to fit on a printed page. Currently Chrome doesn\u0026rsquo;t seem to correctly print columns, but Firefox does. {: .no-print }\nSometimes, git does something unexpected while merging or rebasing. It might seem like git misunderstood a rename, but it\u0026rsquo;s far more likely that git did the \u0026ldquo;right\u0026rdquo; thing after all. Here are a couple of examples I\u0026rsquo;ve seen recently.\nFirst case When rebasing, conflicts might occur before renames:\no---o---E---F---G (master) \\ A---B---RENAME---C (feature *) When the current branch is feature, and running git rebase master, what happens is that the commits from feature will be cherry-picked onto G in order - A, B, RENAME, and C. If a conflict occurs in B, in a file that was later renamed (in RENAME), conflict resolution will have to happen using the original name. If there was a massive reworking, it might be simpler and more sensible to merge in this case.\nSecond case It wasn\u0026rsquo;t a rename, it was a copy.\n--o---E----F [MODIFY]----G (master) \\ \\ A---B [COPY]---C---D---M (feature *) In this case, the user thought he renamed dir1/file.xml to dir2/file.xml in B [COPY]. Then, when he merged master into feature, he expected that the modifications in file.xml in F [MODIFY] would, as part of the merge in M, be applied to dir2/file.xml. This would indeed have happened if B had a move operation. However, it doesn\u0026rsquo;t make sense for git to merge the changes from a copy of a file, so it didn\u0026rsquo;t.\nThe fix here was to undo the merge:\n$ git reset --hard D \u0026hellip;and then edit the commit:\n$ git rebase -i A \u0026hellip;and set B to edit instead of pick. Amend the commit for B so that it doesn\u0026rsquo;t just create dir2/file.xml, but also deletes dir1/file.xml. If it\u0026rsquo;s indeed the same file (or has very similar contents), this will be automatically detected as a rename during log and merge operations.\nIt should be noted that git doesn\u0026rsquo;t track renames (or copies) at all during commits. It only figures out that they happened retroactively when it\u0026rsquo;s relevant (log, merge, cherry-pick, diff\u0026hellip;), by comparing the contents. This is why those operations have options like rename-threshold, find-renames, find-copies and even find-copies-harder.\n","permalink":"https://lutzky.net/2014/08/17/git-rename-edge-cases/","summary":"Sometimes, git does something unexpected while merging or rebasing. It might seem like git misunderstood a rename, but it\u0026rsquo;s far more likely that git did the \u0026ldquo;right\u0026rdquo; thing after all.","title":"Git While You Sit 3 - \"Rename\" edge cases"},{"content":"This is part of the \u0026ldquo;Git While You Sit\u0026rdquo; series, a play on Google\u0026rsquo;s Testing on the Toilet. It\u0026rsquo;s intended to fit on a printed page. Currently Chrome doesn\u0026rsquo;t seem to correctly print columns, but Firefox does. {: .no-print }\nYour repository has files which are generated as part of your build process or as part of running your software, which you don\u0026rsquo;t want in source control. They keep showing up in git status. What to do?\nYou can create a file called .gitignore - note that the filename starts with a ., which is standard for configuration files in Unix and causes them to be hidden from normal listing. Each .gitignore file affects the current directory and its subdirectories - you can have multiple .gitignore files to create more specific rules for subdirectories.\nNote: .gitignore can only be used for files which shouldn\u0026rsquo;t be in source code at all (those show up as \u0026ldquo;Untracked files\u0026rdquo;. Modified files can\u0026rsquo;t be ignored in this way. If you really want to, you can force git to ignore modifications with this command:\n$ git update-index --assume-unchanged FILE However, this is usually a bad idea and indicates you need to refactor your file handling - split files which get modified locally from files which contain information which should be source-controlled.\nHere is an annotated excerpt from a .gitignore file:\n# Extensions of compiled files *.a *.so *.o # ... # Files generated by build system build.ninja .ninja_deps # Ignore bin/ and obj/, as they contain # compiled files. This is ignored # recursively within the repository. bin/ obj/ # ...except (\u0026#34;!\u0026#34;) for the scripts, which # are in the \u0026#34;scripts\u0026#34; dir in the same # one as this .gitignore file (hence the # leading \u0026#34;/\u0026#34;) !/scripts/bin Addendum: A reader has mentioned gitignore.io, which auto-generates useful .gitignore files.\n","permalink":"https://lutzky.net/2014/08/15/git-ignore/","summary":"Using \u003c!-- raw HTML omitted --\u003e.gitignore\u003c!-- raw HTML omitted --\u003e to exclude build artifacts from your repository.","title":"Git While You Sit 2 - .gitignore"},{"content":"This is part of the \u0026ldquo;Git While You Sit\u0026rdquo; series, a play on Google\u0026rsquo;s Testing on the Toilet. It\u0026rsquo;s intended to fit on a printed page. Currently Chrome doesn\u0026rsquo;t seem to correctly print columns, but Firefox does. {: .no-print }\nEver find yourself printf-debugging? You found the bug, but now you have printf statements all over the place. Running git diff, you get:\ndiff --git a/hello.c b/hello.c index 93ca08c..c7d354a 100644 --- a/hello.c +++ b/hello.c @@ -4,6 +4,7 @@  void b(); void a() { + printf(\u0026#34;Bug is here?\\n\u0026#34;);  return; } @@ -13,9 +14,10 @@ int main() {  printf(\u0026#34;Hello, world!\\n\u0026#34;); - return 1; + return 0; // Found it!  } void b() { + printf(\u0026#34;Bug is here?\\n\u0026#34;);  return; } It\u0026rsquo;s actually pretty easy to get rid of them. Run git add -p and you will be shown each patch \u0026ldquo;hunk\u0026rdquo; separately:\ndiff --git a/hello.c b/hello.c index 93ca08c..c7d354a 100644 --- a/hello.c +++ b/hello.c @@ -4,6 +4,7 @@  void b(); void a() { + printf(\u0026#34;Bug is here?\\n\u0026#34;);  return; } ### Stage this hunk [...]? n (No) ### @@ -13,9 +14,10 @@ int main() {  printf(\u0026#34;Hello, world!\\n\u0026#34;); - return 1; + return 0; // Found it!  } void b() { + printf(\u0026#34;Bug is here?\\n\u0026#34;);  return; } ### Stage this hunk? [...] s (Split) ### @@ -13,7 +14,7 @@ int main() {  printf(\u0026#34;Hello, world!\\n\u0026#34;); - return 1; + return 0; // Found it!  ### Stage this hunk [...]? y (Yes) ### void b() { + printf(\u0026#34;Bug is here?\\n\u0026#34;);  return; } ### Stage this hunk [...]? n (No) ### Now, only the return 0 line is stage for commit. To get rid of the rest of the changes, run git checkout -- hello.c. Now the printf statements have been removed!\n","permalink":"https://lutzky.net/2014/08/13/git-add-patch/","summary":"Using \u003c!-- raw HTML omitted --\u003egit add -p\u003c!-- raw HTML omitted --\u003e to eliminate those pesky \u003c!-- raw HTML omitted --\u003eprintf\u003c!-- raw HTML omitted --\u003e-debugging statements.","title":"Git While You Sit 1 - Add --patch"},{"content":"After 6 years with my previous employer, as a DevOps engineer and DevOps team leader, I\u0026rsquo;ve learned two important lessons. I wanted to get these in here before I start my new position (\u0026hellip;as an SRE in Google Dublin, which I am very excited about!), as it\u0026rsquo;s always fun to look back after a few years and see if what I wrote is still relevant.\nKeep it tidy Working in a tidy manner is incredibly important. Tidy code is more important than fast code. It\u0026rsquo;s even more important than correct code! Tidy code is obvious about what it does, and the incorrectness will be apparent to anyone who reads it. However, correct messy code will be misleading about what it does, and what subtleties had to be dealt with in order for it to be correct. This will cause long hours and hair loss when refactoring or when tending to changing requirements.\nRequirements change. A good team leader will be able to predict how they\u0026rsquo;ll change, and direct his team around that. Incorrect predictions are inevitable and costly, but so is a complete lack of change prediction.\nOperations need to be just as tidy as code, if not tidier. Operations performed manually will inevitably be performed wrong, usually by the one person you\u0026rsquo;re sure can\u0026rsquo;t possibly get it wrong. As such, operations need to be as idiot-resistant as possible (nothing is completely idiot-proof). \u0026ldquo;Run this job in Jenkins, the rest is a script\u0026rdquo; is a good place to be, but you should make sure it\u0026rsquo;s really hard to run the wrong job, or get any parameters harmfully wrong.\nAny knowledge contained within one brain reduces your bus factor to 1. Use pair programming (or pair-ops) to increase your bus factor. Whenever possible, let someone from your team tackle a task he has no idea how to perform, but make sure both you and someone knowledgeable are available (and willing) to answer questions. However, containing knowledge within brains is fleeting - even with a high bus-factor, some areas will be left untouched for years, and subsequently re-touched when nobody remembers anything about them. When this happens, you\u0026rsquo;ll be much happier to find out your predecessor (or past-you) has left solid documentation and completely obvious code.\nDon\u0026rsquo;t write it yourself This is a special case of \u0026ldquo;keep it tidy\u0026rdquo;. Writing your own code should be your last resort: Someone else has already written, tested, fixed, debugged, documented, rewritten, and perfected a piece of code that does exactly what you need. They did this with the help of far better coders than you can afford and a QA team comprised of countless relentlessly nitpicking users. Your problem is not as unique as you think.\nYou will ignore this advice. You\u0026rsquo;ll write your own \u0026ldquo;super efficient\u0026rdquo; database/JSON parser combo, and guard it as a trade/military secret. And it\u0026rsquo;ll even work for the first few years, and perform fantastically. But as requirements change (requirements change!), you\u0026rsquo;ll suddenly find out that you can\u0026rsquo;t push new features and bugfixes out as fast as your competition. This happens because your competition is using a widely-adopted database, and a (separate) widely-adopted JSON parser. These are both open-source, and you will see that some kid in a basement has stumbled onto your clever optimizations and suggested them - these have been merged in. And while you\u0026rsquo;re stuck debugging your code, with its sparse unit tests and misleading function names, your competition is looking up known issues and workarounds on Stack Overflow.\nHiding within this advice is the one worse thing you can do than writing it yourself: Using unpopular closed-source software (especially if it\u0026rsquo;s hard/impossible to search for in Google). This has all the detriments of writing code yourself, with the added hell of being unable to read or modify the code yourself when something goes wrong.\nThis advice is clearly quite extreme and is intended to be cautionary (and you will therefore, as mentioned, ignore it). You probably do have some business logic to implement. You probably do need to write glue code in order to connect your proprietary code with some external provider. You might be dealing with insane, Google-scale problems and have found (after checking!) that all existing solutions don\u0026rsquo;t meet your performance/capacity criteria. But this is no reason to implement your own version of ping. Or rsync. Or cron.\nAfterword That\u0026rsquo;s my 2 cents on how to do DevOps (for a rather narrow definition of DevOps). They\u0026rsquo;re the instructions I left my team. I wonder if they\u0026rsquo;ll stand the test of time.\n","permalink":"https://lutzky.net/2014/08/13/lessons-learned/","summary":"Some lessons learned from my role with the previous company as a DevOps engineer and team lead. We discuss tidiness and prioritizing using pre-existing code.","title":"Lessons learned"},{"content":"I\u0026rsquo;ve recently been rewriting a mess of bash, tcsh and Python code as a Python script, and this has proven interesting to test. I\u0026rsquo;ve written a tiny Python library called fakefile to help out with it, so I can write code like this:\nimport fakefile import unittest import mock def my_function(): with open(\u0026#34;somefile\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(\u0026#34;correct output\u0026#34;) with open(\u0026#34;existing_file\u0026#34;, \u0026#34;w\u0026#34;) as f: return f.read() class TestMyCode(unittest.TestCase): def test_my_function(self): faker = fakefile.FakeFile() faker.set_contents(\u0026#34;existing_file\u0026#34;, \u0026#34;correct input\u0026#34;) with mock.patch(\u0026#39;__builtin__.open\u0026#39;, faker.open): result = my_function() # No file \u0026#34;somefile\u0026#34; will be created! # No file \u0026#34;existing_file\u0026#34; will be read! self.assertEquals(faker.files[\u0026#34;somefile\u0026#34;].file_contents, \u0026#34;correct output\u0026#34;) The library is available on github as lutzky/fakefile. Naturally, however, it turns out I\u0026rsquo;ve been outdone by Google\u0026rsquo;s pyfakefs. They have some clever bast^H^H^H^Hgooglers working there!\n","permalink":"https://lutzky.net/2014/07/02/fakefile/","summary":"A tiny python library for faking out filesystem operations for tests.","title":"FakeFile"},{"content":"Here\u0026rsquo;s a fun little bash script:\n#!/bin/bash ( sleep 20 \u0026amp; ) ps -f $(pidof sleep) echo \u0026#34;Bye\u0026#34; Run it, and you\u0026rsquo;ll notice a few things:\n Because the subshell running sleep dies immediately, sleep gets reparented to init. (Interestingly enough, on newer Ubuntu releases this isn\u0026rsquo;t PID 1\u0026hellip;), so the script doesn\u0026rsquo;t have any child processes by the time it prints \u0026ldquo;Bye\u0026rdquo;. After \u0026ldquo;Bye\u0026rdquo; is shown, the script exits immediately, returning control to the shell.  Now, call the script pied_piper.sh, and try the following:\n./pied_piper.sh | cat ./pied_piper.sh | ts # Awesome timestamping utility, same problem though ssh localhost ./pied_piper.sh Annoying, isn\u0026rsquo;t it? These commands won\u0026rsquo;t finish for 20 seconds! The problem is that sleep is keeping its stdout open, which is the input pipe for cat, ts, ssh, or whatever else you\u0026rsquo;re piping to (this is very annoying on Jenkins jobs as well).\nIf a third-party product is pissing you off this way - that is, it died, but somehow still keeps its pipe open, you can find the culprit like so:\nfuser -v /proc/$PID_OF_PROCESS_WITH_OPEN_PIPE/fd/0 This will usually yield a sleep process as the culprit, with the useless parent information of init (as per my example). The only information you have is the precise delay - in my experience, it helps to find all \u0026ldquo;sleep\u0026rdquo; commands lurking about, and tinker with the delay amounts: Found a sleep 30? Change it to sleep 29, see if that\u0026rsquo;s what shows up.\nHere\u0026rsquo;s how to actually fix the problem:\n#!/bin/bash ( sleep 20 \u0026gt;\u0026amp;- 2\u0026gt;\u0026amp;- \u0026lt;\u0026amp;- \u0026amp; ) ps -f $(pidof sleep) echo \u0026#34;Bye\u0026#34; This will close stdout, stderr and stdin. As a friend pointed out, it\u0026rsquo;s often safer to do \u0026gt; /dev/null rather than \u0026gt;\u0026amp;-, as some processes will crap out if they don\u0026rsquo;t have some semblence of an stdout. However, \u0026gt;\u0026amp;- is shorter, faster, and perfectly safe for sleep.\nOf course, it\u0026rsquo;s better to save the PID for this sleep and kill it when appropriate from within the script - otherwise, you might be accumulating many useless sleep processes.\n","permalink":"https://lutzky.net/2014/06/22/fun-with-file-descriptor-leaks/","summary":"How file descriptor leaks are causing your processes to stick around longer than they should.","title":"Fun with file descriptor leaks"},{"content":"There is a well-known problem on today\u0026rsquo;s social network platforms - spoilers. Anyone watching a show and failing to immediately catch up to the latest episode will see a lot of posts on their feed dancing around the spoiler, and finally revealing it completely. This makes sense - people like to talk about their favorite shows, and social networks are a great place to do it.\nWhat I\u0026rsquo;d like to suggest is a mechanism for mitigating the spoiler problem. This mechanism is optimized for Facebook, but could easily be applied to Google+, Twitter et cetera.\nThe short version:\n Mark potential spoilers, keeping track of what exactly they might be spoiling  Allow voluntary marking by the original poster Allow reporting of spoilers, similarly to spam reports   Collapse spoiler materials, showing what is being spoiled Allow users to view spoilers  When they do this, optionally \u0026ldquo;learn\u0026rdquo; that these spoilers can now safely be shown.    For an example, consider the following scenario: I\u0026rsquo;m watching the fantastic show Game of Scones, and in the latest episode - season 4, episode 3 - Lord Muffin has been surprisingly murdered. I might want to post the following status:\n OMG can\u0026rsquo;t believe Lord Muffin was murdered no waayyyyyy\n Now, one of the following happens:\n Before posting, I check a box saying \u0026ldquo;this status contains spoilers\u0026rdquo;, clearly indicating Game of Scones S04E03. I post without checking the box, ticking off my spoiler-sensitive friends. Several unfriend me, but a few of them hit the \u0026ldquo;Spoiler alert\u0026rdquo; button adjacent to the post. Bonus points: The social network platform automatically recognizes the spoiler and asks me to mark it.  Once the post was marked, it looks like this:\n Spoiler to Game of Scones S04E03 hidden. Click to unhide\n Clicking the \u0026ldquo;click to unhide\u0026rdquo; link should, naturally, show the status as it was originally posted. However, the social network can be smarter about this, and remember that as of now - spoilers to S04E03 are OK, and shouldn\u0026rsquo;t be hidden from the user. A few notes about this:\n This shouldn\u0026rsquo;t be done automatically, and a confirmation should be shown - at least at first (\u0026ldquo;Should spoilers for this episode still be hidden? Show Spoilers/Keep hiding spoilers\u0026quot;) Posts containing spoilers should have a small visual indicator of them being as such. This is a good hint for what other people are seeing, and assists helpful users in marking spoilers. It would be useful to allow searching for spoilers - for example, if I just saw the episode and want to see what people are saying about it.  Finally, this is a neat signal that can be used by whatever social network implements it - imagine, a percentage graph of \u0026ldquo;how many people have already watched the latest episode\u0026rdquo;. Seeing as many people Tivo or torrent episodes, that kind of data has got to be worth some money to someone.\nNote that there are existing spoiler prevention mechanisms implemented as browser extensions, and what I\u0026rsquo;m suggesting is more complex and requires integration into the social network itself. This is important anyway, as you want the social network to work the same on any device or browser. Unfortunately, this also means that I am currently powerless to implement it. So if you think this is a good idea and know someone relevant, pass it along!\n","permalink":"https://lutzky.net/2014/04/26/social-network-spoiler-prevention/","summary":"A feature proposal for avoiding spoilers on social networks.","title":"Social network spoiler prevention"},{"content":"My show downloading stack lives on. I\u0026rsquo;m curious as to which will happen first: NetFlix hits Israel, or I switch over to Sick Beard.\nAt any rate, nowadays I use flexget, transmission, tvnamer and xbmc, held together with some bash scripts. On debian- and ubuntu-based systems, the transmission daemon runs as a separate user (debian-transmission), so this requires a bit of care with file and group ownership. After rebuilding my system, I couldn\u0026rsquo;t get tvnamer to work right for some reason, no matter how careful I was. I\u0026rsquo;d keep getting this error:\nLoading config: config.json #################### # Starting tvnamer # Found 1 episode #################### # Processing file: Sherlock.S03E01.mkv # Detected series: Sherlock (season: 3, episode: 1) #################### Old filename: Sherlock.3x01.The.Empty.Hearse.720p.HDTV.x264-FoV.mkv New filename: Sherlock - [03x01] - The Empty Hearse.mkv New path: /home/debian-transmission/inbox/Sherlock - [03x01] - The Empty Hearse.mkv Creating directory /home/debian-transmission/inbox rename Sherlock.3x01.The.Empty.Hearse.720p.HDTV.x264-FoV.mkv to /home/debian-transmission/inbox/Sherlock - [03x01] - The Empty Hearse.mkv OSError(1, \u0026#39;Operation not permitted\u0026#39;) New path: /media/Store/shows/Sherlock/Season 3/Sherlock.3x01.The.Empty.Hearse.720p.HDTV.x264-FoV.mkv Creating directory /media/Store/Shows/Sherlock/Season 3 OSError(2, \u0026#39;No such file or directory\u0026#39;) For a few weeks I\u0026rsquo;d double-check the permissions, fail to understand what was going on, groan and copy the files manually. The new Sherlock episode had me in a bit of a more investigative mood.\nThis turns out to be an exercise in confusing OS logic and logging. It looks like the rename operation failed, and somehow the directory creation failed as well. Neither is the case. A hint can be found in the precise error after the rename: \u0026ldquo;1 - Operation not permitted\u0026rdquo; (that\u0026rsquo;s EPERM). If that seems a bit off, that\u0026rsquo;s because it is: When renames fail because of inadequate permissions, they return EACCES \u0026ldquo;13 - Permission denied\u0026rdquo;. So what\u0026rsquo;s going on?\nIt turns out that after renaming, tvnamer tries to preserve the access and modification times of renamed files. A noble cause, but it turns out that Linux won\u0026rsquo;t allow this unless you are the owner of the file - even if you do have write permissions. Therefore, this fails, which causes tvnamer to believe the rename failed - although it hasn\u0026rsquo;t. Afterwards, the directory is created (this succeeds), but since tvnamer tries to copy using the old filename (thinking the rename failed), we get an ENOENT \u0026ldquo;2 - No such file or directory\u0026rdquo; error about the source of the copy operation.\nThe fix can be found in this pull request. Happy bug hunting!\n","permalink":"https://lutzky.net/2014/01/05/investigate/","summary":"Distinguishing \u003c!-- raw HTML omitted --\u003eEPERM\u003c!-- raw HTML omitted --\u003e vs \u003c!-- raw HTML omitted --\u003eEACCESS\u003c!-- raw HTML omitted --\u003e, and how that helps debug file manipulation scripts.","title":"Weird permission issues with tvnamer"},{"content":"Lately, a facebook comment of mine on the subject of Java\u0026rsquo;s slowness has proved quite popular, so here goes: Here\u0026rsquo;s a listing of a few Hello World programs and running times for them (including startup, which is a big deal in Java) on my laptop:\n$ grep \u0026#39;^model name\u0026#39; /proc/cpuinfo | head -1 model name\t: Intel(R) Core(TM) i5-3337U CPU @ 1.80GHz $ uname -a Linux orca 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux The following script will be timed:\n#!/bin/bash  n=$1 shift for ((i=0; i \u0026lt; $n; i++)); do \u0026#34;$@\u0026#34; \u0026gt; /dev/null done Times are for n=100.\nC #include \u0026lt;stdio.h\u0026gt; int main(int argc, char * argv[]) { printf(\u0026#34;Hello, world!\\n\u0026#34;); return 0; } /* Result: 0.17s * ...unless you give it a .cc extension, and then it\u0026#39;s 0.30s! * It turns out that gcc/g++ guess the language from the file extension. */ C++ #include \u0026lt;iostream\u0026gt; int main(int argc, char * argv[]) { std::cout \u0026lt;\u0026lt; \u0026#34;Hello, world!\u0026#34; \u0026lt;\u0026lt; std::endl; return 0; } // Result: 0.30s Python #!/usr/bin/python print \u0026#34;Hello, world!\u0026#34; # Result: 1.33s Java public class Hello { public static void main(String args[]) { System.out.println(\u0026#34;Hello, world!\u0026#34;); } } // Result: 8.60s. No, I am not kidding. There you have it. Sun\u0026rsquo;s Java takes 28x-51x as much time to run \u0026ldquo;Hello World\u0026rdquo; (startup included) than native applications, and (shockingly, in my opinion) over 6x as much as non-precompiled Python. That\u0026rsquo;s meaningless for long-running applications, but is a very big deal for small, often-run ones.\n","permalink":"https://lutzky.net/2013/12/11/startup-times/","summary":"Starting new java processes in your scripts considered harmful. Let\u0026rsquo;s compare \u0026ldquo;hello world\u0026rdquo; startup times for different languages.","title":"Startup times"},{"content":"I\u0026rsquo;ve had several opportunities to write unit tests for code that outputs large strings. It\u0026rsquo;s important that your unit-testing framework handles this well.\nHere\u0026rsquo;s my example data:\nSTRING_A = \u0026#34;\u0026#34;\u0026#34; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui. Suspendisse ut augue placerat, venenatis ante a, aliquam nibh. Sed vitae massa a nibh dignissim porta id rhoncus neque. Etiam commodo dapibus magna sit amet pellentesque. Aenean venenatis vulputate eros, sit amet sagittis ligula laoreet vel. Pellentesque consectetur viverra nunc, vel interdum turpis tempor nec. Quisque vel purus in quam facilisis gravida posuere in mi. Aenean ligula sem, mattis ut feugiat sit amet, lobortis ut sapien. Vestibulum laoreet aliquam lorem pulvinar lobortis. Mauris quis orci lorem. Mauris ut ante id nulla ultrices gravida vel et orci. Suspendisse potenti. \u0026#34;\u0026#34;\u0026#34; STRING_B = \u0026#34;\u0026#34;\u0026#34; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui. Suspendisse ut augue placerat, venenatis ante a, aliquam nibh. Sed vitae massa a nibh dignissim porta id rhoncus neque. Etiam commodo dapibus magna sit amet pellentesque. Aenean venenatls vulputate eros, sit amet sagittis ligula laoreet vel. Pellentesque consectetur viverra nunc, vel interdum turpis tempor nec. Quisque vel purus in quam facilisis gravida posuere in mi. Aenean ligula sem, mattis ut feugiat sit amet, lobortis ut sapien. Vestibulum laoreet aliquam lorem pulvinar lobortis. Mauris quis orci lorem. Mauris ut ante id nulla ultrices gravida vel et orci. Suspendisse potenti. \u0026#34;\u0026#34;\u0026#34; STRING_A and STRING_B are different, by one character. Can you tell which one? If you\u0026rsquo;d use your unit testing framework\u0026rsquo;s equivalent of assertEqual(STRING_A, STRING_B), it would correctly report that they are different. But would it help you identify the difference?\nC#, for example, is quite horrible with this. It outputs both strings in their entirety. In Visual Studio, it doesn\u0026rsquo;t even seem to be possible to copy the output into an external comparison tool. This has caused some developers (myself included) to implement an ad-hoc \u0026ldquo;character-by-character string equality tester\u0026rdquo;.\nFor C++, if testing with Google\u0026rsquo;s gtest library, the result is the same - the entire strings are shown, and an external tool needs to be used to get a reasonable indication of what the difference is.\nPython 2.7\u0026rsquo;s assertMultiLineEqual gives a good solution to the problem (in Python 3, this becomes the default behavior for standard assertEqual). There are similar comparison methods for other large data types.\nOutput:\nF ====================================================================== FAIL: testLongStringEquality (__main__.TestLongStrings) ---------------------------------------------------------------------- Traceback (most recent call last): File \u0026#34;/home/ohad/test/test_equal.py\u0026#34;, line 35, in testLongStringEquality self.assertMultiLineEqual(STRING_A, STRING_B) AssertionError: \u0026#39;\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui. [truncated]... != \u0026#39;\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui. [truncated]... Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui. Suspendisse ut augue placerat, venenatis ante a, aliquam nibh. Sed vitae massa a nibh dignissim porta id rhoncus neque. Etiam commodo dapibus magna sit amet - pellentesque. Aenean venenatis vulputate eros, sit amet sagittis ligula laoreet ? ^ + pellentesque. Aenean venenatls vulputate eros, sit amet sagittis ligula laoreet ? ^ vel. Pellentesque consectetur viverra nunc, vel interdum turpis tempor nec. Quisque vel purus in quam facilisis gravida posuere in mi. Aenean ligula sem, mattis ut feugiat sit amet, lobortis ut sapien. Vestibulum laoreet aliquam lorem pulvinar lobortis. Mauris quis orci lorem. Mauris ut ante id nulla ultrices gravida vel et orci. Suspendisse potenti. ---------------------------------------------------------------------- Ran 1 test in 0.003s FAILED (failures=1) For Java and JUnit, the output is also short and sweet (for plain assertEquals):\ntestLongStringEquality(MyTest): expected:\u0026lt;...sque. Aenean venenat[i]s vulputate eros, si...\u0026gt; but was:\u0026lt;...sque. Aenean venenat[l]s vulputate eros, si...\u0026gt; Does your unit testing framework provide helpful output for failed unit tests? This is something you can and should demand of it.\n","permalink":"https://lutzky.net/2013/12/02/asserting-string-equality/","summary":"When comparing long strings in unit tests, make sure your assertion failures give you useful output.","title":"Asserting string equality"},{"content":"A conversation with a friend reminded me that, in fact, I\u0026rsquo;ve been doing test-driven development long before I knew it was called that. Back in Introduction to Systems Programming (a second-semester course revolving around abstract data types in C, introduction to C++, and hands-on experience building multi-module C programs), most homework exercises looked something along these lines: Write a program managing a store inventory, with a command-line client conforming to a given set of specifications. For an input file looking like this:\naddcategory Fruit addproduct Fruit Banana 2.30 addproduct Fruit Tomato 1.20 addproduct Fruit Apple 1.50 addproduct Fruit Apple 1.60 list Fruit The output file would be expected to look like this:\nOK OK OK OK ERROR Duplicate fruit Apple Fruit ----- Apple 1.50 Banana 2.30 Tomato 1.20 Of course, error messages, sorting and spacing for the output would be part of the spec. That provided an effective way of checking your program\u0026rsquo;s correctness: Run it on a given input, and compare its output - using diff - to expected output. Some TAs even provided simple test files (input + expected output) for this exact method (but not revealing the \u0026ldquo;real\u0026rdquo; test files which would they use while grading), but the \u0026ldquo;serious\u0026rdquo; tests happened in the student-run \u0026ldquo;homework help\u0026rdquo; forum (ah, phpbb\u0026hellip;), where students would regularly place gargantuan test files to compare your program against (these were very helpful in finding memory handling errors).\nFor an advanced technique, I wrote a \u0026ldquo;reference\u0026rdquo; implementation in Python (this is much shorter than the C version, and probably less bug-prone). I then generated random input files, fed them into both programs, and whenever the output would differ between the two - I\u0026rsquo;d found in a bug (in one of the versions).\nI recall a certain student festival, a friend ran up to me, and exclaimed: \u0026ldquo;I\u0026rsquo;m totally wasted. I\u0026rsquo;ve had no sleep for the past two days, but I\u0026rsquo;ve finally finished the exercise. diff [outputs] 0 [lines of difference]! Whoo!\u0026rdquo; He ran off at this point.\nWhat does all of this have to do with test-driven development? It became \u0026ldquo;known\u0026rdquo; that it\u0026rsquo;s better to start the exercises later, so that early-bird students will have test data up on the forum before you start. Then, just code until the tests pass. Ah, the excuses we students come up with for procrastination\u0026hellip;\nI\u0026rsquo;ve been striving to do test-driven development ever since, with the help of proper unit testing frameworks, and it\u0026rsquo;s hard for me to think of having ever coded without it. There are plenty of resources online explaining why unit-testing is such a helpful idea\u0026hellip; all I\u0026rsquo;m saying is that you might already be testing your code, not realizing that a nice framework can help. But more on that later\u0026hellip;\n","permalink":"https://lutzky.net/2013/12/01/test-driven-procrastination/","summary":"How being lazy and procrastinating led me to adopt test-driven development before I realized it.","title":"Test-driven procrastination"},{"content":"Working with vendor code in C can get very tricky, especially when you except breaking changes to occur. Especially when you have multiple binaries depending on that vendor code, updating at different times, necessitating different live versions. Let\u0026rsquo;s explore.\nIntroduction Assume you\u0026rsquo;re working with an external vendor, who is providing you with code for a wonderful function getFoo:\n// foo.h version 1.2.3  int getFoo(); // foo.c version 1.2.3  int getFoo() { sleep(1000); // TODO improve performance \treturn 42 } You use this function in many of your products - for example, in your best-selling barApp application:\n// barApp.c  #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;%d\\n\u0026#34;, getFoo()); return 0; } So barApp, and other applications, would want to use a foo library. It makes sense to provide this function in a shared library (libfoo.so). However, this library will change in the future, in several ways:\n Binary-compatible changes   Performance improvements (sleep will be removed) Additional functionality will become available (new functions)  Binary-incompatibile changes - at the very least, recompilation will be necessary   For C, this is usually caused by changes to macros For C++, a plethora of reasons: Virtual function reimplementation, function inlining, new private data members\u0026hellip;  Source-incompatible changes - these will require you to change your source code (in barApp):   Functions (which you use) being removed or renamed Semantic changes - getFoo could return 43  This gets even more complicated due to the fact that barApp is an operational, mission-critical application for your organization. Developers may need to hotfix older versions of barApp, which use older versions of libfoo. The build servers and developer boxes will need to be able to have multiple versions of libfoo installed simultaneously.\nCompiling, installing, and using a shared library properly First, the upstream vendor should compile libfoo.so with an SONAME, like so:\ngcc -shared -Wl,-soname,libfoo.so.1 -o libfoo.so.1.2.3 foo.c objdump -x libfoo.so.1.2.3 | grep SONAME # SONAME libfoo.so.1 The guarantee the upstream vendor should give is this: As long as SONAME doesn\u0026rsquo;t change, binary compatibility will be retained.\nNow, you (or, preferably, your package manager) should install the package on your machine like so:\nmkdir -p /usr/include/foo1 cp foo.h /usr/include/foo1 cp libfoo.so.1.2.3 /usr/lib ldconfig -v | grep libfoo # libfoo.so.1 -\u0026gt; libfoo.so.1.2.3 Now, traditionally another symlink libfoo.so -\u0026gt; libfoo.so.1.2.3 would be created, so you could compile barApp with -lfoo. However, here\u0026rsquo;s an alternative:\ngcc -I/usr/include/foo1 -l:libfoo.so.1 barApp.c -o barApp ldd barApp # linux-vdso.so.1 =\u0026gt; (0x00007fff8edfe000) # libfoo.so.1 =\u0026gt; /usr/lib/libfoo.so.1 (0x00007fb367cce000) # libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb367906000) # /lib64/ld-linux-x86-64.so.2 (0x00007fb367ef2000) Now barApp is compiled, and looks for libfoo.so.1 - it will find it thanks to the symlink created by ldconfig, and use libfoo.so.1.2.3.\nAftermath Binary-compatible updates Suppose a new, compatible, faster version of libfoo is released - say version \\1.3.0, which has removed that pesky sleep. Well, just place it in /usr/lib and rerun ldconfig.\ncp libfoo.so.1.3.0 /usr/lib ldconfig -v | grep libfoo # -\u0026gt; libfoo.so.1 -\u0026gt; libfoo.so.1.3.0 The symlink has been updated, and now all applications (barApp, for example) which were linked against libfoo.so.1 will have improved performance.\nIncompatible updates Suppose a new, incompatible version 2.0.0 of libfoo is released, which would force the newer barApp2.0 to be recompiled against the new, different headers. No problem:\nmkdir -p /usr/include/foo2 cp foo.h /usr/include/foo2 cp libfoo.so.2.0.0 /usr/lib ldconfig -v | grep libfoo # -\u0026gt; libfoo.so.2 -\u0026gt; libfoo.so.2.0.0 # -\u0026gt; libfoo.so.1 -\u0026gt; libfoo.so.1.3.0 gcc -I/usr/include/foo2 -l:libfoo.so.2 barApp2.0.c -o barApp2.0 Both versions of libfoo are installed simultaneously, and do not conflict.\nFinal thoughts The Debian policy guide states that -dev packages should include the libfoo.so symlink. However, this would cause a conflict between the -dev packages for two different generations of libfoo. I am curious as to how this problem is solved \u0026ldquo;in the wild\u0026rdquo;, as I\u0026rsquo;m sure Debian have good reasons for suggesting this.\n","permalink":"https://lutzky.net/2013/05/15/multiple-library-versions/","summary":"Working with vendor code in C can get very tricky, especially when you except breaking changes to occur. Especially when you have multiple binaries depending on that vendor code, updating at different times, necessitating different live versions. Let\u0026rsquo;s explore.\nIntroduction Assume you\u0026rsquo;re working with an external vendor, who is providing you with code for a wonderful function getFoo:\n// foo.h version 1.2.3  int getFoo(); // foo.c version 1.2.3  int getFoo() { sleep(1000); // TODO improve performance \treturn 42 } You use this function in many of your products - for example, in your best-selling barApp application:","title":"Multiple library versions"},{"content":"Vacations are a great time for doing that problematic category of things every management course teaches you about: important, but not urgent. For some people, it\u0026rsquo;s housework or schoolwork which gets drowned out by day-to-day life. For others it\u0026rsquo;s keeping up with friends and family. Myself, I also like to read and write.\nWriting, for me, is usually about practical stuff. Sometimes it\u0026rsquo;s simply code (most of those projects were written on vacations). Other times, it\u0026rsquo;s writing to this blog (in one of its incarnations) - which usually has to do with technical tinkering of some sort or other. It\u0026rsquo;s not that I don\u0026rsquo;t do enough writing in my day job; but there does tend to be an accumulation of things to write: \u0026ldquo;I should blog about that\u0026rdquo;, \u0026ldquo;I should write that code\u0026rdquo;, \u0026ldquo;I should try and get my router to do that\u0026rdquo;, and so forth. When a few days off come by, and I feel that I have enough time to get more urgent stuff done - it\u0026rsquo;s quite satisfying to be able to dig into that write-queue.\nReading is the same, but the other way around. I\u0026rsquo;m not talking about standard RSS feeds (Google Reader R.I.P.), which I usually only have time to skim through. I mean something pertaining to that: Once in a while, I come across an article (be it from an RSS feed, a social network, or a news site), which is too long to read immediately, but I\u0026rsquo;d really like to get into later on, when I have time. Usually it\u0026rsquo;s text, but sometimes it\u0026rsquo;s a long form video (usually from a technical conferences such as the recent C++ and Beyond or Google I/O). Either way, these past few days I\u0026rsquo;ve had the opportunity to take a nice bite out of my reading queue, with some entries being over a year old. To manage this queue I use Pocket (integrates well with Chrome, Android, Feedly and others), and I highly recommend it.\nIf you have some time off, enjoy it. Read something. Write something as well.\n","permalink":"https://lutzky.net/2013/03/27/reading-writing-and-vacation/","summary":"Vacations are a great time for doing that problematic category of things every management course teaches you about: important, but not urgent. For some people, it\u0026rsquo;s housework or schoolwork which gets drowned out by day-to-day life. For others it\u0026rsquo;s keeping up with friends and family. Myself, I also like to read and write.\nWriting, for me, is usually about practical stuff. Sometimes it\u0026rsquo;s simply code (most of those projects were written on vacations).","title":"Reading, writing and vacations"},{"content":"As part of my M.Sc. studies, I\u0026rsquo;ve recently completed a small laboratory project in natural language processing. I\u0026rsquo;ve learned quite a bit from it, and had a chance to use a few of my favorite technologies.\nThe project was coded in Python, which is not my favorite programming language - Ruby is. However, since Python is more popular at my workplace, and seems to have a richer ecosystem around it (sometimes, at any rate), I\u0026rsquo;ve grown to love it almost as much over the years. It\u0026rsquo;s quick, easy, and has fantastic libraries; specifically, for this project, we made heavy use of the Natural Language Toolkit. We used Git for source control and Github for hosting, Travis for continuous integration, and ReadTheDocs for documentation. All of these culminate in the project being handed in as a single link: http://github.com/lutzky/translationese.\nThe translationese project is a re-implementation of the concepts presented in \u0026ldquo;On The Features Of Translationese\u0026rdquo;, an article describing an attempt to automatically distinguish between texts written in English originally, and texts translated to English from a different language. Since this turned to be an easy problem, the focus was to determine what specific features of a given text are better at distinguishing between the two categories.\nWhy reproduce results from an existing article? Well, beyond academic points, we wanted to provide well-documented, easily-extensible, tested code. The article was not always clear on specific definitions of various features; Python code makes these completely explicit, in a relatively readable way (for code, at any rate).\nTo keep code quality high, we used test-driven development: each feature was coded only after a (failing) unit test for it was written. This helped keep the code modular, and made refactoring (which happened quite a bit) easy and safe. The resulting design proved to be quite flexible, as I will shortly explain.\nSVM is a form of machine learning. Simply put, it\u0026rsquo;s a method of teaching a machine to distinguish between two categories of \u0026ldquo;points\u0026rdquo; (in our case, \u0026ldquo;translated\u0026rdquo; and \u0026ldquo;original\u0026rdquo;). The SVM is given two such sets, and tries to draw a \u0026ldquo;line\u0026rdquo; (or, generally, a hyperplane) separating them. Afterwards, it should be able to classify new points (without being told which set they belong to) by which side of the line they are. The following image (Wikipedia) shows a simple, two-dimensional case (the red line properly distinguishing the two sets):\n{: style=\u0026ldquo;max-width:350px\u0026rdquo;}\nFor our case, each \u0026ldquo;property\u0026rdquo; took a block of text, and translated it to an n-dimensional point. For some properties, the dimension was quite extreme. For example, the property of character trigrams gives each coordinate the value of \u0026ldquo;how many times does each permutation of three consecutive letters appear in the text\u0026rdquo;. There are 17,576 such permutations, so each text became a point in a 17,576-dimensional space. These points were fed into an SVM algorithm implemented in Weka.\nDuring the final presentation of the project, we explained that the particularly high-dimensionality properties proved to be too much for Weka (it would use up all available RAM), so smaller sample sizes were used for those. However, we were told that using sparse vector representation as Weka\u0026rsquo;s input could allow it to be more efficient. Fortunately, our design proved to be robust enough that I could implement (and test) the change during the presentation (1278645). Indeed, we now had no problems with the high-dimensionality properties, and repeated our runs, updating the documentation (after we were given our grade\u0026hellip;)\nThere\u0026rsquo;s a somewhat eerie aspect to this project. Having used SVM, I have no idea how it works. While I know exactly how my Python code works, and exactly what the SVM algorithm does, I still don\u0026rsquo;t know how to tell a translated text from one written in English originally. Even looking at the SVM output, which details exactly what the resulting classifier does, the data is the result of analyzing thousands of texts, and something of an \u0026ldquo;intuition\u0026rdquo; the classifier has generated from its \u0026ldquo;experience\u0026rdquo;; certainly not a formal algorithm that I can read and understand. While I could read it and painstakingly apply it manually to text, I\u0026rsquo;d be blindly following a program which I do not understand, much like a Rubik\u0026rsquo;s Cube novice following an algorithm, not (yet) understanding why it solves the cube, and being quite surprised when it does. With the high complexity of the resulting classifier (for example - for every three letters, look up its index in a 17,576-entry list and increment it by a factor), I\u0026rsquo;d have no chance of ever understanding how it works. In essence, I\u0026rsquo;ve written code to have my computer learn how to do something, but it cannot practically teach me what it has learned.\n","permalink":"https://lutzky.net/2013/03/24/translationese/","summary":"As part of my M.Sc. studies, I\u0026rsquo;ve recently completed a small laboratory project in natural language processing. I\u0026rsquo;ve learned quite a bit from it, and had a chance to use a few of my favorite technologies.\nThe project was coded in Python, which is not my favorite programming language - Ruby is. However, since Python is more popular at my workplace, and seems to have a richer ecosystem around it (sometimes, at any rate), I\u0026rsquo;ve grown to love it almost as much over the years.","title":"Translationese"},{"content":"Here is an assortment of Linux-related tips and tricks.\nIf you\u0026rsquo;re tired of hitting your SSH password over and over again, you might want to take a look at this guide: SSH Public Key Authentication.\nIf you\u0026rsquo;re a Technion student taking the Matam course, you should definitely check out the Matam Guide.\nHere is a list of lectures I\u0026rsquo;ve given in Haifux:\n Lightning Talks 2005 (w/Many others) LIRC - Infrared Remote Control (w/Alon Altman) WiFi in Linux The VIM Editor for beginners (Rerun of Shlomi\u0026rsquo;s lecture) FatNS - How to develop a DNS forensics tool (w/Boaz Goldstein) Linux for CS Students - a Primer Linux for CS Students - Debugging  If you\u0026rsquo;re with a russian keyboard and need a stress sign, try /russian-stress.\n","permalink":"https://lutzky.net/linux-stuff/","summary":"Here is an assortment of Linux-related tips and tricks.\nIf you\u0026rsquo;re tired of hitting your SSH password over and over again, you might want to take a look at this guide: SSH Public Key Authentication.\nIf you\u0026rsquo;re a Technion student taking the Matam course, you should definitely check out the Matam Guide.\nHere is a list of lectures I\u0026rsquo;ve given in Haifux:\n Lightning Talks 2005 (w/Many others) LIRC - Infrared Remote Control (w/Alon Altman) WiFi in Linux The VIM Editor for beginners (Rerun of Shlomi\u0026rsquo;s lecture) FatNS - How to develop a DNS forensics tool (w/Boaz Goldstein) Linux for CS Students - a Primer Linux for CS Students - Debugging  If you\u0026rsquo;re with a russian keyboard and need a stress sign, try /russian-stress.","title":"Linux stuff"},{"content":"If you find yourself logging into SSH servers a lot, you might find this tip useful - you\u0026rsquo;ll only need to type your password once per session. But first, let\u0026rsquo;s set the default username (so you don\u0026rsquo;t have to tell SSH what user you are every time):\n$ cd ~ $ mkdir .ssh $ chmod 700 .ssh $ cat \u0026gt;\u0026gt; .ssh/config Host t2.technion.ac.il User slutzky Ctrl-D $ Now, create a public/private key pair for SSH, like so:\n$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/tactless/.ssh/id_rsa): Enter passphrase (empty for no passphrase): use_a_password Enter same passphrase again: use_a_password Your identification has been saved in /home/tactless/.ssh/id_rsa. Your public key has been saved in /home/tactless/.ssh/id_rsa.pub. The key fingerprint is: 5a:3a:e3:f4:6e:91:fe:3f:27:4e:f4:46:0d:5e:50:4f tactless@dolphin Now you have a public and private key: ~/.ssh/id_rsa is the private key (don\u0026rsquo;t give this to anyone!), and ~/.ssh/id_rsa.pub is the public key - give this to everyone. Specifically, put it on the SSH server you want to log into, making sure the permissions are correct. There\u0026rsquo;s a script which does this:\n$ ssh-copy-id t2.technion.ac.il It basically does the following for you:\n$ scp ~/.ssh/id_rsa.pub t2.technion.ac.il: password: $ ssh t2.technion.ac.il \u0026gt; mkdir .ssh \u0026gt; cat id_rsa.pub \u0026gt;\u0026gt; .ssh/authorized_keys \u0026gt; chmod 700 .ssh .ssh/authorized_keys \u0026gt; chmod 755 . \u0026gt; logout Now, when you log in to your local account, before using SSH for the first time, type the following command:\n$ ssh-add Enter passphrase for /home/tactless/.ssh/id_rsa: your-password-here $ ssh t2.technion.ac.il \u0026gt; # notice, didn't type a password \u0026gt; logout $ ssh t2.technion.ac.il \u0026gt; # no password this time either ","permalink":"https://lutzky.net/linux-stuff/ssh-public-key-authentication/","summary":"If you find yourself logging into SSH servers a lot, you might find this tip useful - you\u0026rsquo;ll only need to type your password once per session. But first, let\u0026rsquo;s set the default username (so you don\u0026rsquo;t have to tell SSH what user you are every time):\n$ cd ~ $ mkdir .ssh $ chmod 700 .ssh $ cat \u0026gt;\u0026gt; .ssh/config Host t2.technion.ac.il User slutzky Ctrl-D $ Now, create a public/private key pair for SSH, like so:","title":"SSH public key authentication"},{"content":"I\u0026rsquo;ve already mentioned my show downloading stack on this blog. It\u0026rsquo;s changed a bit since - I now use Transmission rather than rtorrent, as it has the excellent transmission-daemon package which has it acting exactly the way I like (without using screen). Also, it now E-mails me when a torrent is done downloading. So while this may be how TV works for you:\n Notice that a new episode is out Torrent it Wait for the download to finish Watch it  \u0026hellip;this is how TV works for me now:\n Receive E-mail notification of a new downloaded episode Watch it  Here\u0026rsquo;s how it\u0026rsquo;s done: First, write /usr/local/bin/notify_torrent_done:\n#!/bin/bash cat_the_message() { cat \u0026lt;\u0026lt;EOF Subject: Torrent done: $TR_TORRENT_NAME Hello from transmission $TR_APP_VERSION at $(hostname). The following torrent has completed: Name: $TR_TORRENT_NAME Finished at: $TR_TIME_LOCALTIME Downloaded to: $TR_TORRENT_DIR Hash: $TR_TORRENT_HASH Enjoy! EOF } RETVAL=1 while [[ $RETVAL != 0 ]]; do cat_the_message | msmtp -C /etc/msmtprc.transmission --from default -t your@email.address RETVAL=$? done The various environment variables will be set by transmission when it calls this script. We rerun msmtp until it succeeds because you will often get a \u0026ldquo;connection timed out\u0026rdquo; response from gmail (\u0026hellip;at least on my ISP\u0026hellip;). Here\u0026rsquo;s /etc/msmtprc.transmission which is relevant to gmail (this is a bit tricky and took a lot of fiddling around with):\ndefaults tls on tls_starttls on tls_trust_file /etc/ssl/certs/ca-certificates.crt timeout 60 account default host smtp.gmail.com port 587 auth on user yourusername@gmail.com password yourpasswordhere from yourusername@gmail.com syslog LOG_MAIL As usual, caution is required when saving your password in plaintext. I highly recommend using Google\u0026rsquo;s two-step authentication, which will have you creating a one-time password for each application - use one of those one-time passwords here.\nFinally, in /etc/transmission-daemon/settings.json, add the following code:\n\u0026quot;script-torrent-done-enabled\u0026quot;: true, \u0026quot;script-torrent-done-filename\u0026quot;: \u0026quot;/usr/local/bin/notify_torrent_done\u0026quot;, Important: You need to run /etc/init.d/transmission-daemon reload at this point, not restart - that would cause settings.json to be rewritten from runtime configuration.\nThat\u0026rsquo;s it. Enjoy!\n","permalink":"https://lutzky.net/2011/12/15/the-show-downloading-stack-part-n1/","summary":"I\u0026rsquo;ve already mentioned my show downloading stack on this blog. It\u0026rsquo;s changed a bit since - I now use Transmission rather than rtorrent, as it has the excellent transmission-daemon package which has it acting exactly the way I like (without using screen). Also, it now E-mails me when a torrent is done downloading. So while this may be how TV works for you:\n Notice that a new episode is out Torrent it Wait for the download to finish Watch it  \u0026hellip;this is how TV works for me now:","title":"The show downloading stack - part n+1"},{"content":"Here are a few words on developing TransportDroidIL, a small utility to query Israeli public transportation sites more easily using an Android phone.\nSource control is super important. Mistakes will be made, other coders will want to join in, and experimental features will want to be in their own branches. Git is awesome; it does source control right, gives me powerful tools, and isn\u0026rsquo;t a hassle to set up - even for a small project like this. Github is also awesome; it makes collaboration with other coders - even just one, in my case - easy, organized, and fun.\nOne of my favorite git features is revert. It allows you to automatically inverse a previous change. Here\u0026rsquo;s an example from TransportDroidIL: 0e194de. This commit reverts a previous \u0026ldquo;cleanup\u0026rdquo; commit in the autocompletion code - allegedly, I was keeping two copies of the autocompletion option list for no reason: One as a LinkedList\u0026lt;string\u0026gt;, and one internal to the AutoCompleteTextView which I can access via an ArrayAdapter\u0026lt;string\u0026gt;. Turns out that my LinkedList\u0026lt;string\u0026gt; copy is necessary, because the ArrayAdapter\u0026lt;string\u0026gt; always behaves as though it\u0026rsquo;s empty, so it cannot truly be read from. Despite having performed a few commits since that bad \u0026ldquo;fix\u0026rdquo;, git was very helpful in letting me revert that particular change, showing me the conflicts this operation causes, and allowing me to fix them. The lesson is an important one: Make small, manageable commits. Git is optimized for this, as commits are local (no need to contact the server until a push).\nDeveloping for Android makes a lot of sense when using Eclipse. I\u0026rsquo;m a VIM junkie, and generally dislike IDEs. Eclipse is slow and heavy - but it gets the job done, and it does it very well. It\u0026rsquo;s a bit weird that a plugin is required to manage color schemes - but it exists. It\u0026rsquo;s very weird (and quite annoying) that it doesn\u0026rsquo;t remove end-of-line white-space, and doesn\u0026rsquo;t have an option to do this. This makes git complain. There is an option to add \u0026ldquo;clean-up\u0026rdquo; settings which are activated on every save, but this is far too cumbersome and might change code I didn\u0026rsquo;t intend to change (which becomes confusing in the revision log). Still, the excellent debugging, JUnit and logcat support are worth it.\nLogcat is another awesome feature of Android. Every logged line has both a \u0026ldquo;Tag\u0026rdquo; (usually defined per-class) and a severity. Logs can be filtered with a different severity for each tag, and still - one can use the same logcat to show messages from anything running on the Android device at the moment. It\u0026rsquo;s basically Syslog done better.\nOne last point is about Hebrew. This has been a problem with Android for quite a while; for example, in a stock Android 2.3.3, numbers embedded in Hebrew string appear backwards. Fixes exist, and are implemented in most Israeli ROMs, especially the ones distributed by phone carriers - but they\u0026rsquo;re different, and sometimes don\u0026rsquo;t work for all applications. This causes numbers to appear backwards in TransportDroidIL, which in turn caused me to implement an ugly hack. I hope the upcoming Ice Cream Sandwich release fixes this.\n","permalink":"https://lutzky.net/2011/10/08/developing-transportdroidil-for-android/","summary":"Here are a few words on developing TransportDroidIL, a small utility to query Israeli public transportation sites more easily using an Android phone.\nSource control is super important. Mistakes will be made, other coders will want to join in, and experimental features will want to be in their own branches. Git is awesome; it does source control right, gives me powerful tools, and isn\u0026rsquo;t a hassle to set up - even for a small project like this.","title":"Developing TransportDroidIL for Android"},{"content":"I don\u0026rsquo;t like wireless connections; they\u0026rsquo;re always second-best, be it in terms of security, speed, or reliability. Here\u0026rsquo;s how my apartment looks (very approximately):\n.-P1----. .-------------------P4-,---------, | PC | | COMFY SOFA . | | | | . Closed | | .-, | | Living room . Porch | | |B| P2 | . | | |E| | . | | |D| | HUGE CUPBOARD TV . R PC | `-------' `-P3-------------------'--P5-----' My room The room on the left is mine, with my (constantly torrenting) PC in bed-viewing position. The router (R) is in the closed porch, connected to my roommate\u0026rsquo;s PC. Wifi doesn\u0026rsquo;t stand a chance through two walls and the porch\u0026rsquo;s glass screen. P1 through P5 are power outlets.\nFirst solution Put a reverse DD-WRT router at P2 (with a cable going across the room from the PC). Slow connection, not very reliable. This worked well enough for several months.\nSecond solution Get a pair of homeplugs. Stick one at P1 (connected through a power strip shared by the PC, speakers, screen and guitar amp). Stick another at P5 (connected through a power strip shared by the other PC, router, modem, TV, fan, printer, speakers and a lamp). It shouldn\u0026rsquo;t work - but it does. It blinks red, is nowhere near the promised 200Mbps, but it\u0026rsquo;s still faster (and more reliable) than my internet connection. These homeplug devices are fantastic - they require literally no configuration (unless you want to reconfigure the encryption keys) and work very well, I highly recommend them. The problem was when I got an Xtreamer - a cute device to watch my shows on my living room TV (see: comfy sofa). Once I plug it in, the homeplug connection dies on me, proverbially the last straw.\nThird solution Thankfully, I have my Big Box of Electronic Junk, which contained a Super Long (read: haven\u0026rsquo;t measured it) network cable. Moved the homeplug to P3, hid the cable behind the Huge Cupboard. Problem solved. On a side note, I would have preferred a Boxee Box, but sadly it doesn\u0026rsquo;t support lame old RCA connections.\n","permalink":"https://lutzky.net/2011/09/04/home-network-wiring/","summary":"\u003cp\u003eI don\u0026rsquo;t like wireless connections; they\u0026rsquo;re always second-best, be it in terms\nof security, speed, or reliability. Here\u0026rsquo;s how my apartment looks (very\napproximately):\u003c/p\u003e","title":"Home network wiring"},{"content":"Hello everyone, TransportDroidIL 1.0 will be released this month. It has quite a few new features:\n Separate \u0026ldquo;Source\u0026rdquo;, \u0026ldquo;Destination\u0026rdquo; and \u0026ldquo;Time\u0026rdquo; fields. This is much better for auto-completion as well. Automatic location-based detection of \u0026ldquo;Source\u0026rdquo;. Hopefully you\u0026rsquo;ll find the interface for this unobtrusive. Quick reversal of \u0026ldquo;Source\u0026rdquo; and \u0026ldquo;Destination\u0026rdquo;, for your return trip. A new settings screen, with:  Provider selection (currently Egged or MOT) A small attempt at right-to-left fixes for non-supporting devices. A \u0026ldquo;clear history\u0026rdquo; button    Everyone loves screenshots:\nFor a sneak peek, go to http://github.com/lutzky/TransportDroidIL for the latest sources. You can also report issues there.\n","permalink":"https://lutzky.net/2011/09/02/upcoming-features-in-transportdroidil/","summary":"Hello everyone, TransportDroidIL 1.0 will be released this month. It has quite a few new features:\n Separate \u0026ldquo;Source\u0026rdquo;, \u0026ldquo;Destination\u0026rdquo; and \u0026ldquo;Time\u0026rdquo; fields. This is much better for auto-completion as well. Automatic location-based detection of \u0026ldquo;Source\u0026rdquo;. Hopefully you\u0026rsquo;ll find the interface for this unobtrusive. Quick reversal of \u0026ldquo;Source\u0026rdquo; and \u0026ldquo;Destination\u0026rdquo;, for your return trip. A new settings screen, with:  Provider selection (currently Egged or MOT) A small attempt at right-to-left fixes for non-supporting devices.","title":"Upcoming features in TransportDroidIL"},{"content":"Don\u0026rsquo;t get me wrong. I love being able to communicate textually with friends, coworkers and family. It\u0026rsquo;s ideal for a noisy pub; a somewhat-private conversation on a crowded bus; telling something to someone who may be asleep, so they see it first thing when they wake up; making quick responses while in a meeting without being rude (well, at least at my workplace it\u0026rsquo;s considered perfectly acceptable). It\u0026rsquo;s also very handy when you want to tell someone something they ought to write down, such as a phone number or something they should remember to buy. My problem isn\u0026rsquo;t with the concept of mobile textual messaging - it\u0026rsquo;s with SMS, the \u0026ldquo;Short Message Service\u0026rdquo;, as provided by Israeli carriers (and possibly worldwide).\nThe first problem I\u0026rsquo;d like to discuss is length. SMS messages are limited to 160 characters, or rather - 160 bytes. If your message includes any foreign characters, such as Hebrew letters, then UTF-16 mode takes effect, and your message is limited to 70 characters, which is ridiculously short. While the name of the service, SMS, implies that the messages should indeed be short, this is not the only common usage: If you want to have an actual conversation with someone (and this is a perfectly reasonable situation), messages will be longer than 160 characters, and certainly longer than 70. The problem becomes worse if u dont want to use shorthands n skip punctuations like many smsers do. (Ever found yourself about to send a 75-character message, going over it to find 5 characters to trim without looking like an idiot?)\nThere have been several attempts to overcome the short-message problem, all of them implemented as workarounds in cellphone software. The initial, primitive approach was to simply split a message up into appropriately-sized chunks, and send out those chunks as separate messages: A 150-character Hebrew message would be sent out as 3 separate messages (70, 70, 10 characters respectively). Later on, a mechanism was invented for the phones to detect the split messages, stitch them back up on the recipient\u0026rsquo;s phone, and notify the recipient if the message is incomplete. Poor man\u0026rsquo;s TCP.\nThe split-message solution is very problematic, especially when taking into account two other problems with SMS: Reliability and price. The reliability problem is subtle: SMS message usually make it across, but when they don\u0026rsquo;t (and sometimes, in fact, they don\u0026rsquo;t), no notification is given. Where E-mail servers notify you about delivery failure, where instant messaging services tell you that the other party has disconnected, SMS has\u0026hellip; nothing. There\u0026rsquo;s no way to know that your message hasn\u0026rsquo;t been received, unless a little-known, not-supported-everywhere and highly annoying \u0026ldquo;read receipt\u0026rdquo; feature is enabled.\nThe price problem is completely absurd: I have a small 1GB plan at Orange, which costs 70₪/month. That\u0026rsquo;s 70 NIS / 1GB, 1GB being 109 bytes. That comes to 7 \u0026amp;times 10-6 Agorot per byte. Suppose that an SMS-style service would need a bloated 100-byte header, so an SMS message is 260 bytes. Therefore, an SMS message should cost 0.00182 Agorot. In reality, it costs 44 Agorot (inter-carrier average) without a plan, or 14 Agorot (at best, requiring a 1000-SMS plan) with a plan. That\u0026rsquo;s between 7692× and 24176× as much.\nOne additional problem with SMS is the fact that they\u0026rsquo;re locked into your device. Got a new phone? You have to go through a very complicated process to transfer your SMS messages over, and this isn\u0026rsquo;t possible for every phone. Lost your old phone? Unless you were backing up manually, your messages are gone. Have a separate work-phone? You\u0026rsquo;ll need to use each phone to see messages sent specifically to it. None of these problems occur with an online E-mail provider, why should they happen with mobile texting?\nWith modern phones, sending and receiving E-mail is just as easy as sending and receiving SMS messages. The main problem is that not everyone has a modern phone, and E-mail on older phones is quite cumbersome. Worse yet, older phones don\u0026rsquo;t immediately notify you of E-mails. There could be some good money in creating an E-mail-to-SMS gateway - and it would be quite convenient to use if done properly. Imagine having your SMS messages united with your E-mails, organized and searchable by your favorite E-mail client. If you have a modern phone with proper E-mail notification and sending abilities, this could be very handy. Just sayin'.\nAddendum: It seems that Google Voice already does exactly what I want, but is not available in Israel. Thanks, Shachar.\n","permalink":"https://lutzky.net/2011/04/25/sms-and-why-it-annoys-me/","summary":"Don\u0026rsquo;t get me wrong. I love being able to communicate textually with friends, coworkers and family. It\u0026rsquo;s ideal for a noisy pub; a somewhat-private conversation on a crowded bus; telling something to someone who may be asleep, so they see it first thing when they wake up; making quick responses while in a meeting without being rude (well, at least at my workplace it\u0026rsquo;s considered perfectly acceptable). It\u0026rsquo;s also very handy when you want to tell someone something they ought to write down, such as a phone number or something they should remember to buy.","title":"SMS and why it annoys me"},{"content":"Since I\u0026rsquo;ve last posted, I\u0026rsquo;ve moved to a new apartment. First order of business - get a working internet connection. This is extra-challenging when your primary machine doesn\u0026rsquo;t even have a wireless network card.\nMy first hack used my trusty laptop - it has a properly working wireless card, and could connect to my roommate\u0026rsquo;s router quite easily. It runs Ubuntu, and as it turns out, that means sharing the connection was dead-simple: Right-click on the network manager icon, add a new wired connection called \u0026ldquo;Shared\u0026rdquo;, and under IPv4 settings, choose \u0026ldquo;Shared to other computers\u0026rdquo;. That\u0026rsquo;s it. Once I connected my desktop to my laptop, it automatically got all of its settings, and I was good to go.\nHowever, this was kind of annoying - I had to leave my laptop on, the reception in my room isn\u0026rsquo;t perfect so it would sometimes disconnect (requiring manual intervention), and my laptop wasn\u0026rsquo;t free for ordinary use (if I wanted my torrents to keep going).\nThe solution: I grabbed my (horrible) old D-Link DIR-300 router, and installed DD-WRT on it. This gave it an awesome \u0026ldquo;client mode\u0026rdquo; feature, which allowed it to use it the same way I used my laptop to bridge my wireless connection. Flashing it worked quite well by following the guide (the updated version in the wiki, that is - it has proper instructions for connecting to RedBoot, the D-Link flashing interface, from Linux), and another guide helped me set up Client mode. All seems well, except for two issues:\nFirst, port forwarding doesn\u0026rsquo;t seem to work properly - it works well on the internal network (that is, I can SSH into my desktop using my laptop), but not on the internet (SSH port shows up as open, but I can\u0026rsquo;t connect). I\u0026rsquo;m also guessing that UPnP/NAT-PMP won\u0026rsquo;t work properly. Second, and this is an old problem - the router has a high-pitched whine. This may have something to do with the fact that the AC/DC adapter it came with is rated for 12V @ 1A, whereas the router is rated 5V @ 1.2A. Let\u0026rsquo;s hope it doesn\u0026rsquo;t fry (hasn\u0026rsquo;t for the 3 years I used it).\n","permalink":"https://lutzky.net/2010/11/20/dd-wrt-awesomeness/","summary":"Since I\u0026rsquo;ve last posted, I\u0026rsquo;ve moved to a new apartment. First order of business - get a working internet connection. This is extra-challenging when your primary machine doesn\u0026rsquo;t even have a wireless network card.\nMy first hack used my trusty laptop - it has a properly working wireless card, and could connect to my roommate\u0026rsquo;s router quite easily. It runs Ubuntu, and as it turns out, that means sharing the connection was dead-simple: Right-click on the network manager icon, add a new wired connection called \u0026ldquo;Shared\u0026rdquo;, and under IPv4 settings, choose \u0026ldquo;Shared to other computers\u0026rdquo;.","title":"DD-WRT awesomeness"},{"content":"I\u0026rsquo;ve finally gotten the chance to get one of those newfangled Android phones.\nI\u0026rsquo;ve recently \u0026ldquo;bought\u0026rdquo; a Samsung Galaxy Android phone (the older i7500, not the newer i9000 \u0026ldquo;S\u0026rdquo;) model. It\u0026rsquo;s a seriously serious upgrade from my old Nokia 6120 Classic, and as I broke the 6120\u0026rsquo;s screen and reverted back to my trusty old Nokia 6070 (which I couldn\u0026rsquo;t even get to run the GMail app), I was quite a happy camper switching to a modern phone.\nThe whole idea of Android has always been very appealing to me - Nokia\u0026rsquo;s software has been declining in quality, and while Motorola and Samsung have always made excellent hardware, they could never get the knack of good software. Google has. Problem solved, right?\nThe Android software is miles ahead of anything I\u0026rsquo;ve ever seen, including iPhone. I now have connectivity everywhere, and apps to sync all of my favorite things - GMail and Google Calendar are included, GTasks is great for tasks, Paperdroid is great for Read It Later, NewsRob is great for Google Reader. The Facebook and Twidroyd applications are also quite nice, and the convenience has me using those networks more. I even have nifty stuff like Transdroid, a Transmission web client which is actually very good at adding torrents while I\u0026rsquo;m away, so they\u0026rsquo;re done by the time I get home. I get my reading done with Aldiko and ACV (for comics). Even Israeli sites have some good applications up, such as YNet and Dapei Zahav have a nice Android app, though not as nice as their iPhone ones. And of course, there\u0026rsquo;s the wonderful Waze, which is the most Israeli solution to the road congestion problem I\u0026rsquo;ve ever seen. I\u0026rsquo;ve even had the chance to do some on-foot navigation with Google Maps, which is also handy.\nThe phone itself has a beautiful AMOLED screen, great audio quality (comes with quite a good set of headphones as well), and looks sleek. The touchscreen is responsive enough (though not anywhere near new Android devices nor the iPhone/iPod touch), and it even comes with a free extra 8GB SD card, for a total of 16GB.\nAnd now, to rant.\nBattery life isn\u0026rsquo;t what is should be - the phone is awesome, I want to use it, and it can barely get through the day - especially if I\u0026rsquo;m doing heavy stuff like Waze (GPS + Data + screen is always on + voice), but even if I\u0026rsquo;m just surfing casually. The unlock button is located inconveniently on the bottom part of the right side, just above the camera button. The home button is located between the Back and Send buttons, meaning it\u0026rsquo;s very easy to hit by accident; it\u0026rsquo;s not even labeled. The CPU isn\u0026rsquo;t always fast enough to keep everything completely smooth, and while this is generally acceptable, it gets rather irksome in odd places: If you turn on screen auto-rotation (which uses more battery power), rotation takes a while and might be accidental. However, there is no manual screen rotation option as far as I can tell.\nAs a music player (relating to my previous post), the device works well enough - but I couldn\u0026rsquo;t, for the life of me, get Hebrew support in ID3 tags (no matter what the encoding is), and only a limited subset of ID3 tag versions is supported, and everything works much better with Ogg files.\nThe flaws I\u0026rsquo;ve mentioned are relatively minor and nitpicky - for Waze, you can use the car charger (which comes with the phone, thankfully). The buttons are OK after some getting used to (and installing the excellent AnySoftKeyboard), and operation is generally smooth. However, there is a major issue I can\u0026rsquo;t wrap my head around - the shipped firmware is 1.5 cupcake, and there are absolutely zero updates available from Samsung. There is a semi-official leaked 1.6 update which, as I\u0026rsquo;ve heard, is quite buggy. An awesome guy called drakaz has been working on a Froyo (2.2) port for the Galaxy, which I really should check out, but Samsung\u0026rsquo;s behavior on this topic is inexcusable in my opinion.\nAll-in-all, however, I\u0026rsquo;m happy with my phone. It\u0026rsquo;s a joy to use, and the price is hard to beat - free with my phone plan, provided I can rake up a bill of 150₪ (which I can, with some help from the 70₪ 1GB data plan, which comes in quite handy). My next phone will, however, probably not be a Samsung.\n","permalink":"https://lutzky.net/2010/09/04/android/","summary":"I\u0026rsquo;ve finally gotten the chance to get one of those newfangled Android phones.\nI\u0026rsquo;ve recently \u0026ldquo;bought\u0026rdquo; a Samsung Galaxy Android phone (the older i7500, not the newer i9000 \u0026ldquo;S\u0026rdquo;) model. It\u0026rsquo;s a seriously serious upgrade from my old Nokia 6120 Classic, and as I broke the 6120\u0026rsquo;s screen and reverted back to my trusty old Nokia 6070 (which I couldn\u0026rsquo;t even get to run the GMail app), I was quite a happy camper switching to a modern phone.","title":"Android"},{"content":"There are several good guides for installing Gilad Ben-Yossef\u0026rsquo;s excellent Hebdroid fonts on physical Android devices, but those don\u0026rsquo;t really work with the Android SDK\u0026rsquo;s emulator - changes to the system directory aren\u0026rsquo;t persistent. Here\u0026rsquo;s how to get around that:\nFirst, a few downloads. You\u0026rsquo;ll need:\n The android emulator (presumably you already have this, if not, you can get it at developer.android.com) The hebdroid fonts unyaffs, which will extract the system.img file A snapshot of yaffs2, which will create our new system.img file. This is actually today\u0026rsquo;s snapshot from the git repository, which worked for me. For later versions, take a look at the git repository.  Building unyaffs is simple enough, or you can use the prebuilt version from the site. Building mkyaffs2image is also quite easy - just untar the snapshot, and run make in the utils directory. Put both of these utilities somewhere in your $PATH for convenience.\nNow we can get to work. First, locate your system.img file. It should be within your Android SDK directory, under platforms/android-3/images (or whatever version you\u0026rsquo;re emulating). We\u0026rsquo;ll extract that - create a temporary directory, say /tmp/system.img.hebdroid, and cd to it. Then run:\nunyaffs /path/to/system.img The whole /system filesystem should be extracted. Now extract the ttf files from hebdroid.zip into the fonts directory, replacing the original font files. To pack everything back up, run:\nmkyaffs2image /tmp/system.img.hebdroid system.img.hebdroid Now, I recommend putting renaming your original system.img to system.img.orig, and using symlinking system.img.hebdroid as your new system.img (the emulator does indeed follow symlinks), but you can basically do whatever you like. You may have to recreate your AVD, but everything should work. Happy hacking!\n","permalink":"https://lutzky.net/2010/09/04/setting-up-hebrew-android-fonts-on-your-avd-emulator/","summary":"There are several good guides for installing Gilad Ben-Yossef\u0026rsquo;s excellent Hebdroid fonts on physical Android devices, but those don\u0026rsquo;t really work with the Android SDK\u0026rsquo;s emulator - changes to the system directory aren\u0026rsquo;t persistent. Here\u0026rsquo;s how to get around that:\nFirst, a few downloads. You\u0026rsquo;ll need:\n The android emulator (presumably you already have this, if not, you can get it at developer.android.com) The hebdroid fonts unyaffs, which will extract the system.","title":"Setting up Hebrew Android fonts on your AVD emulator"},{"content":"After a couple of days' messing with it, I\u0026rsquo;m releasing it: Transport Droid IL! It\u0026rsquo;s a handy little app for querying Egged\u0026rsquo;s site, as well as the new Ministry of Transportation site, on transportation information. This is pretty beta, but seems to work well enough.\nMore info, source code: http://lutzky.github.com/TransportDroidIL\nAPK File: TransportDroidIL.APK\n","permalink":"https://lutzky.net/2010/09/04/transport-droid-il/","summary":"After a couple of days' messing with it, I\u0026rsquo;m releasing it: Transport Droid IL! It\u0026rsquo;s a handy little app for querying Egged\u0026rsquo;s site, as well as the new Ministry of Transportation site, on transportation information. This is pretty beta, but seems to work well enough.\nMore info, source code: http://lutzky.github.com/TransportDroidIL\nAPK File: TransportDroidIL.APK","title":"Transport Droid IL"},{"content":"My Meizu Mini M6 has died a tragic death as a result of being left in my shirt pocket, which in turn was - with the rest of my shirt - in the laundry. I\u0026rsquo;ve had it for three years, so this would be a good time to review.\nMy favorite thing about the Mini was the cost. When I bought it, it was far cheaper than comparable players, at ~400₪ for 8GB. For a player with good video support, it was a steal. Other pros it had include:\n Great screen. I used to watch TV shows on it quite a bit Great audio quality, especially in the lower range - very important for a bass guitarist Perfect OS compatibility - shows up as a Mass Storage device, just drag your files over. This is also how firmware upgrades are performed EBook reader, of sorts Quite small and very thin  However, the player is full of quirks:\n  Slow startup time. This is compounded by the fact that to turn it on, you have to press the \u0026ldquo;Play\u0026rdquo; button for about 3 seconds - too much less or too much more, and it won\u0026rsquo;t start up.\nThis is even worse when unplugging it from USB - it would rebuild the library every time, even if you were just charging it.\n  You can\u0026rsquo;t turn the player on when it\u0026rsquo;s connected to USB. When it\u0026rsquo;s off, connecting it to USB is for charging only - to access the filesystem, you have to disconnect it, turn it on, and connect it again. (\u0026hellip;not that the player is functional when in it\u0026rsquo;s plugged in\u0026hellip;)\n  A few podcast niceties would be very easy to implement and extremely helpful. There\u0026rsquo;s no way to separate podcasts from the rest of the music, so you don\u0026rsquo;t get \u0026ldquo;This Week In Tech\u0026rdquo; when you put it on \u0026ldquo;All Music at random\u0026rdquo; mode. Also, the player doesn\u0026rsquo;t keep track of positions within audio streams, other than the last played one.\n  There\u0026rsquo;s no way to delete a song from within the player.\n  The interface is very inconsistent, with the video and audio sections having completely different key bindings. Long presses and short presses have very different meanings (but the length isn\u0026rsquo;t all that different), so you have to be very careful.\n  Pressing various key during startup had interesting, non-obvious effects, such as rebuilding the music library or formatting the player without asking for confirmation. This isn\u0026rsquo;t in the official documentation, and even if it were - that\u0026rsquo;s a very bad misfeature.\n  The newer version of the player, which I have, did away with the bottom \u0026ldquo;play\u0026rdquo; button, and moved it to the bottom of the 4-way D-pad, instead of the \u0026ldquo;Enter\u0026rdquo; key. The \u0026ldquo;Enter\u0026rdquo; key was replaced with a tap on the d-pad. Unfortunately, such a tap is very similar to a volume change drag, and even if it weren\u0026rsquo;t - is very easy to perform by accident.\n  One more feature that I would have liked is one I\u0026rsquo;ve only seen in the iPod (which I despise for a variety of reasons) - the iPod keeps track of which songs you\u0026rsquo;ve played all the way through, and remembers that you \u0026ldquo;like\u0026rdquo; them - this information is later used when building playlists, and is integrated into iTunes playlists as well.\nNow, I might be going to a long course soon, one which will specifically mean plenty of bus time. So go ahead, guys - recommend a player. :)\n","permalink":"https://lutzky.net/2010/03/13/my-music-player-has-sunk/","summary":"My Meizu Mini M6 has died a tragic death as a result of being left in my shirt pocket, which in turn was - with the rest of my shirt - in the laundry. I\u0026rsquo;ve had it for three years, so this would be a good time to review.\nMy favorite thing about the Mini was the cost. When I bought it, it was far cheaper than comparable players, at ~400₪ for 8GB.","title":"My music player has sunk"},{"content":"Last weekend I broke my Nokia 6120\u0026rsquo;s screen. I have a military phone, which is far cheaper, so I\u0026rsquo;ve decided to keep it offline. However, being the sentimental guy that I am, I did want to save all of my contacts and SMS messages (in addition to the photos, which presented less of a problem). This proved to be a bit of a challenge without the screen working.\nUsually, when you connect the phone via USB, it asks if you want \u0026ldquo;PC Suite mode\u0026rdquo; or \u0026ldquo;Data Transfer mode\u0026rdquo;. The \u0026ldquo;Data Transfer\u0026rdquo; mode has the phone show up as a standard USB storage device, which allows for easy transfer of MP3 files, photos and videos to and from the phone, without any nokia-specific software. However, it only works for the external SD card, so you can\u0026rsquo;t use that to access SMS messages or contacts.\nI usually only need \u0026ldquo;Data Transfer\u0026rdquo; mode, so I changed the default to that. Today I regret that decision, as it cost me a couple of hours' work. I called the Orange hotline, and they did their best to help me, including trying to blind-guide me through the menus, which failed because the menus are actually dynamic and I didn\u0026rsquo;t have the default setup. They actually got me 90% of the way there - here\u0026rsquo;s the solution I found: Hit the red (disconnect) button, and type the Soft Reset GSM code: *#7780#. Now press the \u0026ldquo;left menu\u0026rdquo; key (not the left key, nor the menu key - the left of the two \u0026ldquo;dynamic\u0026rdquo; keys) - this part was what the Orange hotline missed, because it seemed so obvious. Then hit 12345 (this is the default \u0026ldquo;secret code\u0026rdquo;), and the left menu key again. I found this by watching a demo of the soft reset on YouTube.\nAt this point I used VirtualBox and the Nokia PC suite (both are free-as-in-beer) to do the heavy lifting. I now have a text file with all of my contacts, a CSV file with all of my SMS messages, and all of my images saved both to my computer and a DR site. Now I just need to upgrade my military phone (Mirs)\u0026hellip;\n","permalink":"https://lutzky.net/2009/10/31/broken-phone-screen-data-rescue/","summary":"Last weekend I broke my Nokia 6120\u0026rsquo;s screen. I have a military phone, which is far cheaper, so I\u0026rsquo;ve decided to keep it offline. However, being the sentimental guy that I am, I did want to save all of my contacts and SMS messages (in addition to the photos, which presented less of a problem). This proved to be a bit of a challenge without the screen working.\nUsually, when you connect the phone via USB, it asks if you want \u0026ldquo;PC Suite mode\u0026rdquo; or \u0026ldquo;Data Transfer mode\u0026rdquo;.","title":"Broken phone screen - data rescue"},{"content":"Totem is Gnome\u0026rsquo;s built-in media player, and it really annoyed me in previous versions, and had me switching to VLC. However, the version included in the Ubuntu 9.10 release candidate has two features which are very important, in my opinion. The first feature is smooth graphical integration with compositing managers (such as compiz). In previous versions, as well as VLC, once you fullscreen the window, moving the mouse (which causes the cursor and the partial interface to appear) causes a very annoying flicker. This has been fixed (at least on my box, using an NVidia card).\nThe second, more important feature, is the exact one I\u0026rsquo;ve been missing and talked about in the previous post - hit Edit -\u0026gt; Preferences -\u0026gt; Start playing files from last position, and Totem will keep track of your last playback position when you close the video. Reading the implementation patch shows that there is a certain threshold for this - the position won\u0026rsquo;t be saved if you\u0026rsquo;re too close to the beginning or end of the video. So there, my show downloading stack now has every feature I\u0026rsquo;d want from Miro, without the downsides I\u0026rsquo;ve mentioned.\n","permalink":"https://lutzky.net/2009/10/10/loving-the-new-totem/","summary":"Totem is Gnome\u0026rsquo;s built-in media player, and it really annoyed me in previous versions, and had me switching to VLC. However, the version included in the Ubuntu 9.10 release candidate has two features which are very important, in my opinion. The first feature is smooth graphical integration with compositing managers (such as compiz). In previous versions, as well as VLC, once you fullscreen the window, moving the mouse (which causes the cursor and the partial interface to appear) causes a very annoying flicker.","title":"Loving the new Totem"},{"content":"I love watching TV, and hate it. Regular show schedules are horrible, commercial breaks are annoying, and the ability to rewind is very important. I love Hot\u0026rsquo;s VOD service (and happily pay to watch the shows I enjoy), but my true favorite for getting my entertainment is everyone\u0026rsquo;s favorite not-a-dumptruck, the internet. In this post, I will describe how I do it.\nEverything I describe in this post can be done using miro. It\u0026rsquo;s a neat piece of software, which lacked polish in version 2.4 (2.5 is out now though), but there are a few things I don\u0026rsquo;t like about it:\n You have to be graphically logged in for it to run. Among other things, this means that if someone reboots your computer, there\u0026rsquo;s no way to get it to start automatically. (I\u0026rsquo;ll be very happy to know if I\u0026rsquo;m wrong about this) It doesn\u0026rsquo;t give you as much control as I\u0026rsquo;d like over torrents. Its BitTorrent client doesn\u0026rsquo;t perform as well as rtorrent.  However, Miro does one thing which I haven\u0026rsquo;t figured out how to do myself yet: It keeps track of your position within watched shows. That is, stop watching a show -and next time playback will resume from the same place.\nThe first thing you want to do is get a good RSS feed for your show. Unfortunately, Revision3\u0026rsquo;s shows (many of which are quite good), are direct HTTP download links, as per the advertiser\u0026rsquo;s request. For other shows, you can find torrent RSS feeds, which make much better use of everyone\u0026rsquo;s bandwidth. Also, downloading will be handled by our trusty rtorrent, which we can configure for bandwidth limiting.\nTo download RSS feeds, I use flexget. It does its job well, but doesn\u0026rsquo;t support bandwidth limiting. It accepts a simple YAML configuration file, and has good logging. I run it as a cron job - its locking mechanism prevents multiple instances from running simultaneously. For non-torrents, I set the output directory to ~/torrents/inbox. For torrents, I set the output directory to ~/torrents/from_rss.\nFor downloading torrents, I use rtorrent. It\u0026rsquo;s a curses-based client which performs very well. My .rtorrent.rc file looks like this:\ndownload_rate = 30 upload_rate = 2 directory = /home/ohad/torrents/in_progress on_finished = move_complete,\u0026quot;execute=mv,-u,$d.get_base_path=,~/torrents/inbox/ ;d.set_directory=~/torrents/inbox/\u0026quot; session = /home/ohad/torrents/.session schedule = watch_directory,5,5,load_start=/home/ohad/torrents/from_rss/*.torrent schedule = untied_directory,5,5,remove_untied= schedule = throttle_1,23:00:00,24:00:00,download_rate=0 schedule = throttle_2,05:00:00,24:00:00,download_rate=30 port_range = 6881-6889 encryption = allow_incoming,enable_retry,prefer_plaintext dht = auto peer_exchange = yes scgi_local = /tmp/rtorrent-scgi.socket Interesting things to note here are:\n Downloads live in one directory, but get moved to the inbox directory when they\u0026rsquo;re done. The session directory is important - this allows rtorrent to resume downloads if it\u0026rsquo;s shut down. The from_rss directory is watched for new torrent files. When the relevant downloads are stopped, remove_untied occurs and the torrent files are deleted. Throttling is fully customizable. The SCGI socket is useful for rtgui - we\u0026rsquo;ll get to that.  I have a \u0026ldquo;watchdog\u0026rdquo;-style cron job which makes sure it\u0026rsquo;s running if the computer is up. This is not as elegant as starting it from an RC-script, but keeps the whole setup confined to the limits of my own user. Again, rtorrent has a lock-file which prevents multiple instances from running.\n#!/bin/bash  # A simple script to make sure I am running rtorrent in a screen set -e SCGI_SOCKET=/tmp/rtorrent-scgi.socket SESSION_DIR=~/torrents/.session screen -d -m -fn -S rtorrent -s /bin/bash -t rtorrent -m nice rtorrent while [[ ! -S $SCGI_SOCKET ]]; do sleep 1; done if [[ -S $SCGI_SOCKET ]]; then chgrp www-data $SCGI_SOCKET chmod g+rwx $SCGI_SOCKET fi RTGUI provides a nice web-based interface. It\u0026rsquo;s a bit tricky to configure, and you\u0026rsquo;ll need to use an HTTP server - preferably lighttpd, as it has support for SCGI UNIX sockets (as opposed to SCGI TCP sockets). This lets you keep the number of open network ports to a minimum. This is all well-documented on the RTGUI site.\nFinally, I\u0026rsquo;ve written a little python script called check_shows which uses libnotify to show a pretty pop-up whenever downloads complete. It\u0026rsquo;s a tiny little hack which uses inotify, which is lots of fun.\nThat\u0026rsquo;s it. Any neat tricks are welcome :)\n","permalink":"https://lutzky.net/2009/09/05/my-show-downloading-stack/","summary":"I love watching TV, and hate it. Regular show schedules are horrible, commercial breaks are annoying, and the ability to rewind is very important. I love Hot\u0026rsquo;s VOD service (and happily pay to watch the shows I enjoy), but my true favorite for getting my entertainment is everyone\u0026rsquo;s favorite not-a-dumptruck, the internet. In this post, I will describe how I do it.\nEverything I describe in this post can be done using miro.","title":"My show downloading stack"},{"content":"I\u0026rsquo;ve been trying to work out a system to be able to cleanly switch between IST (Israel Standard Time, GMT+2:00) and IDT (Israel Daylight savings Time, GMT+3:00) on command. The logical way to do this, in my opinion, is to have two separate files in /usr/share/zoneinfo, say IsraelIST and IsraelIDT, and copy (or link) the relevant one as /etc/localtime. The trick is creating the IsraelIDT file.\nMy first guess was the following zic source-file:\n# Zone NAME GMTOFF RULES/SAVE FORMAT [UNTIL] Zone IsraelIDT 2:00 01:00 IDT Now, this almost works. The problem is that both is_dst is set and timezone = -10800 (3 hours - should be 2, as it should represent local standard time), so some software double-compensates here for a grand total of GMT+4:00. After some research (walking through __tzfile_read gave the biggest hint), it turns out that timezone is set according to the minimal local time type which is transitioned into. So I came up with this file:\n# Rule NAME FROM TO TYPE IN ON AT SAVE LETTER/S Rule ZionIDT min 1939 - Jan 1 00:00 1:00 D Rule ZionIDT 1939 only - Jan 1 00:00 0:00 S Rule ZionIDT 1940 max - Jan 1 00:00 1:00 D # Zone NAME GMTOFF RULES/SAVE FORMAT [UNTIL] Zone IsraelIDT 2:00 ZionIDT I%sT Sounds about right, nay? Even my handy little pyzdump confirms that it looks about how I want it to:\n$ ./pyzdump.py /usr/share/zoneinfo/IsraelIDT Transitions: ['At Sat Dec 31 23:00:00 1938, switch to IST', 'At Sun Dec 31 22:00:00 1939, switch to IDT'] Types: [\u0026lt;tztype dst=\u0026quot;True\u0026quot; idt:=\u0026quot;\u0026quot; utc+10800=\u0026quot;\u0026quot;\u0026gt;, \u0026lt;tztype dst=\u0026quot;False\u0026quot; ist:=\u0026quot;\u0026quot; utc+7200=\u0026quot;\u0026quot;\u0026gt;] However, it still doesn\u0026rsquo;t work. A test program:\nint main() { tzset(); time_t t = time(NULL); printf(\u0026#34;Timezone name is %s, timezone=%ld\\n\u0026#34;, __tzname[1], timezone); printf(\u0026#34;The time is %s\u0026#34;, ctime(\u0026amp;t)); printf(\u0026#34;Timezone name is %s, timezone=%ld\\n\u0026#34;, __tzname[1], timezone); return 0; } And its results, as run at 14:42:17 UTC, which is 19:42:17 IDT:\nTimezone name is IDT, timezone=-7200 The time is Sat Apr 18 14:42:17 2009 Timezone name is UTC, timezone=0 Or, as I described it to a friend:\n Me: Hi computer, do you know what timezone are we in?\nComputer: Yeah, it\u0026rsquo;s Israel Daylight Savings time, GMT+2:00 for standard time.\nMe: OK, and what time is it?\nComputer: 14:42\nMe: No, that\u0026rsquo;s 3 hours late. What timezone are we in?\nComputer: Umm\u0026hellip; UTC?\nMe: You just said IDT.\nComputer: Nuh-uh.\n I\u0026rsquo;ll get to the bottom of this eventually :/\nAddendum: It seems that the problem is even more complicated. For the following timezone file, C programs seem to work fine:\n# Rule NAME FROM TO TYPE IN ON AT SAVE LETTER/S Rule ZionIDT min 1939 - Jan 1 00:00 1:00 D Rule ZionIDT 1939 only - Jan 1 00:00 0:00 S Rule ZionIDT 1940 2030 - Jan 1 00:00 1:00 D Rule ZionIDT 2030 max - Jan 1 00:00 0:00 S # Zone NAME GMTOFF RULES/SAVE FORMAT [UNTIL] Zone IsraelIDT 2:00 ZionIDT I%sT However, Python programs still show timezone = -10800. Examining Python\u0026rsquo;s code, I found this:\nif( janzone \u0026lt; julyzone ) { /* DST is reversed in the southern hemisphere */ PyModule_AddIntConstant(m, \u0026#34;timezone\u0026#34;, julyzone); PyModule_AddIntConstant(m, \u0026#34;altzone\u0026#34;, janzone); PyModule_AddIntConstant(m, \u0026#34;daylight\u0026#34;, janzone != julyzone); PyModule_AddObject(m, \u0026#34;tzname\u0026#34;, Py_BuildValue(\u0026#34;(zz)\u0026#34;, julyname, janname)); } else { PyModule_AddIntConstant(m, \u0026#34;timezone\u0026#34;, janzone); PyModule_AddIntConstant(m, \u0026#34;altzone\u0026#34;, julyzone); PyModule_AddIntConstant(m, \u0026#34;daylight\u0026#34;, janzone != julyzone); PyModule_AddObject(m, \u0026#34;tzname\u0026#34;, Py_BuildValue(\u0026#34;(zz)\u0026#34;, janname, julyname)); } And since June and July have the same timezone in our case, there\u0026rsquo;s a good chance that this is what\u0026rsquo;s going wrong. The moral of the story seems to be this - I should go with the first, simplest \u0026ldquo;always-DST\u0026rdquo; solution. Programs should ignore the timezone variable, as in our context it isn\u0026rsquo;t reliable. In general, all internal time handling should be done in UTC; when reading times from the outside world, if they are in local time - use mktime. If they are in a specified timezone, use timegm and compensate manually. I\u0026rsquo;d love to hear better ideas in the comments.\n","permalink":"https://lutzky.net/2009/04/18/timezones-are-fickle/","summary":"Creating a manual \u0026ldquo;always-daylight-savings\u0026rdquo; timezone is hard. Let\u0026rsquo;s peek at just how messy timezone logic gets.","title":"Timezones are fickle"},{"content":"At my workplace, I\u0026rsquo;ve recently been using git for code review purposes. I work on code in my own git clone, and ask a peer to review it. It works somewhat like this:\n master branch is same code as currently in upstream. Working to resolve issue #1234 pertaining to \u0026ldquo;Performance for gizmo\u0026rdquo;, I work on a branch 1234-gizmo-performance. I mail a peer, John, with this information, as well as my repository location. John adds my repository as a remote, lutzky. Then he branches review1 (or review2 if that is taken, and so on) at lutzky/1234-gizmo-performance. John adds comments with nice big FIXME tags, which are highlighted in any decent editor. He commits this, the commit-message stating that it was code review. John tags his final review commit (or, if he had no comments - lutzky/1234-gizmo-performance) with a reviewed1 (or reviewed2, etc.) annotated tag. Since the annotated tag includes all the necessary information (who tagged, when, and what), the number doesn\u0026rsquo;t really matter. I merge john/review1, incorporate the changes (or reject them) and remove the comments. If no further review is necessary, I submit this - and once submitted, I merge this back into master.  It\u0026rsquo;s a nice system. I wonder what other methods there are of doing this.\n","permalink":"https://lutzky.net/2009/04/04/using-git-for-code-review/","summary":"At my workplace, I\u0026rsquo;ve recently been using git for code review purposes. I work on code in my own git clone, and ask a peer to review it. It works somewhat like this:\n master branch is same code as currently in upstream. Working to resolve issue #1234 pertaining to \u0026ldquo;Performance for gizmo\u0026rdquo;, I work on a branch 1234-gizmo-performance. I mail a peer, John, with this information, as well as my repository location.","title":"Using git for code review"},{"content":"I\u0026rsquo;m a software kind of guy. Here\u0026rsquo;s proof.\nToday I went to visit my grandparents, and it turned out their computer wouldn\u0026rsquo;t boot. BIOS would load up fine, and I could browse the menus fine - but once it tried to go on from there, it would simply blink what looked like half a cursor (that is, half of a _-style cursor). I figured it might be the HDD - so I took it home, and decided to connect it to my own box. Upon disconnecting my DVD drive, I destroyed the SATA cord - it had an annoying little metal tab which had to be pushed in before it would release, and it just wouldn\u0026rsquo;t give, and the connector just broke, exposing and bending the wires.\nChecking if the computer still boots, the BIOS took much longer to display hard drive status, and while Ubuntu would start booting, it would fail in the process and tell me that my root hard drive (by UUID) isn\u0026rsquo;t available. Looking at dmesg, the ata2 module was indeed reporting that the hard drive was too slow - but a few seconds later it would finally access the drive, and mount properly. This problem, however, disappeared once I connected my grandparents' drive! (Mounting it would fail, telling me that I either have a hardware error or need to connect it to a Windows machine, which I don\u0026rsquo;t have, and run some diagnostic commands). Sure enough, when the HDD is connected by itself, it gets quite flaky, but once I connect a second drive (back to the DVD, eventually), everything works properly. This probably has to do with the fact that both drives are connected on continuations of the same power cord - but I\u0026rsquo;ve never experienced such a problem, where you must connect devices to both connectors on the power cord. A hardware guy I know says he\u0026rsquo;s never heard of such a problem either.\nNaturally, these things never happen when I mess with hardware at work, where there are plenty of spare parts\u0026hellip;\n","permalink":"https://lutzky.net/2009/02/26/hardware-doesnt-like-me/","summary":"Whenever I try messing with hardware at home, inexplicable failures ensue. Especially when trying to help others; no good deed goes unpunished.","title":"Hardware doesn't like me"},{"content":"I had a Game Boy once. I could play it just about anywhere, and battery life - for the time - was great. I lost it at one point, and replaced it with a Game Gear, which sucked the life out of 6 AA batteries rather quickly. The Game Boy Color was actually decent on battery life, but since it didn\u0026rsquo;t have a backlight, you had to play it at very specific angles.\nFor gaming, I can appreciate the need for a color screen. My point has to do with cellphones. True, most cellphones today come with cameras, are able to play video, and are rather capable mobile gaming platforms (when compared to the Game Boy, that is). All this does, in fact, require a color screen. However, I believe that there is a market for cellphones which do not support these features, but do support neat things like 3G internet connectivity (GMail and RSS on the phone is a major Win, in my opinion), and have a comfortable SMS interface. These features actually suffer from having a color screen: Battery life (for the powerful backlight), viewing angle, and screen resolution take a hit. While it\u0026rsquo;s true that color LCDs have come a long way since the Game Gear, so have black \u0026amp; white display technologies (E-Paper, anyone?).\nOf course, my wish for a modern B\u0026amp;W-screen cellphone will likely never come true. The simple reason is that they would be totally unmarketable. Even business-types like color screens nowadays. So I\u0026rsquo;ll just keep holding out for a folding E-Paper mobile browser.\n","permalink":"https://lutzky.net/2008/11/22/whatever-happened-to-black-white-lcds/","summary":"I had a Game Boy once. I could play it just about anywhere, and battery life - for the time - was great. I lost it at one point, and replaced it with a Game Gear, which sucked the life out of 6 AA batteries rather quickly. The Game Boy Color was actually decent on battery life, but since it didn\u0026rsquo;t have a backlight, you had to play it at very specific angles.","title":"Whatever happened to black \u0026amp; white LCDs?"},{"content":"Ever have a machine you can only ssh into through another machine? It\u0026rsquo;s a very common situation in the Technion. Here\u0026rsquo;s one way to get around it: Assume you can directly ssh into alpha, and from alpha you can ssh into beta. Have the following code in your ~/.ssh/config:\nHost beta Hostname 1.2.3.4 # IP Address of beta ProxyCommand ssh alpha nc -w 1 %h %p This requires you to have nc (netcat) installed on alpha. Once you do that, you can run ssh beta directly from your own box.\n","permalink":"https://lutzky.net/2008/11/10/another-ssh-trick/","summary":"Ever have a machine you can only ssh into through another machine? It\u0026rsquo;s a very common situation in the Technion. Here\u0026rsquo;s one way to get around it: Assume you can directly ssh into alpha, and from alpha you can ssh into beta. Have the following code in your ~/.ssh/config:\nHost beta Hostname 1.2.3.4 # IP Address of beta ProxyCommand ssh alpha nc -w 1 %h %p This requires you to have nc (netcat) installed on alpha.","title":"Another SSH trick"},{"content":"These days I don\u0026rsquo;t stay at home often, but I do have an RSS/BitTorrent combo fetching me all kinds of neat stuff for me, so I can have it ready for me on the weekend. I love rtorrent, especially due to the fact that I can run it in screen, ssh home and see how things are doing (or add more torrent to the download). However, sometimes my net connection breaks down, computers gets shut off, or things like that. This week my router broke down, so I can\u0026rsquo;t even ssh home to manually start up rtorrent. My solution: A small script, which checks whether rtorrent is already running, and if not - runs it in a detached screen session. Run this with your favorite cron software.\n#!/bin/bash # A simple script to make sure I am running rtorrent in a screen if ! ps -o uname -C rtorrent | grep -q `whoami`; then screen -d -m rtorrent fi ","permalink":"https://lutzky.net/2008/11/04/automatically-starting-rtorrent-within-screen/","summary":"These days I don\u0026rsquo;t stay at home often, but I do have an RSS/BitTorrent combo fetching me all kinds of neat stuff for me, so I can have it ready for me on the weekend. I love rtorrent, especially due to the fact that I can run it in screen, ssh home and see how things are doing (or add more torrent to the download). However, sometimes my net connection breaks down, computers gets shut off, or things like that.","title":"Automatically starting rtorrent within screen"},{"content":"Gnome 2.24 adds a new Time Tracking feature, which I would have found useful. I don\u0026rsquo;t have Gnome 2.24 at work, but I do have a Unix-based operating system\u0026hellip; Here\u0026rsquo;s my new ~/bin/track:\n#!/bin/bash date \u0026gt;\u0026gt; ~/time_tracking vim ~/time_tracking + Now, if I could only get vim to automatically hit \u0026ldquo;A\u0026rdquo; and space for me afterwards\u0026hellip; (I\u0026rsquo;m betting there\u0026rsquo;s a way to do it, but AFAIK vim can only receive ex-mode commands as parameters).\nEdit: \u0026hellip;and, of course it\u0026rsquo;s possible. Here\u0026rsquo;s the new version:\n#!/bin/bash echo \u0026#34;`date` \u0026#34; \u0026gt;\u0026gt; ~/time_tracking vim ~/time_tracking + -c \u0026#39;startinsert!\u0026#39; ","permalink":"https://lutzky.net/2008/10/26/quick-time-tracking-hack/","summary":"Gnome 2.24 adds a new Time Tracking feature, which I would have found useful. I don\u0026rsquo;t have Gnome 2.24 at work, but I do have a Unix-based operating system\u0026hellip; Here\u0026rsquo;s my new ~/bin/track:\n#!/bin/bash date \u0026gt;\u0026gt; ~/time_tracking vim ~/time_tracking + Now, if I could only get vim to automatically hit \u0026ldquo;A\u0026rdquo; and space for me afterwards\u0026hellip; (I\u0026rsquo;m betting there\u0026rsquo;s a way to do it, but AFAIK vim can only receive ex-mode commands as parameters).","title":"Quick time tracking hack"},{"content":"Sometimes, when constructing a compound object, we are interested in exporting functionality while retaining encapsulation. For example, suppose we have a Secretary class:\nclass Secretary def send_fax(destination, fax_contents) puts \u0026#39;Sending fax \u0026#34;%s\u0026#34; to %s\u0026#39; % [fax_contents, destination] end def answer_call(call) # ... end # ... end Our Secretary provides a lot of useful functionality, that our Boss class would like to have. Boss would like to be able to say that he can send a fax, without having the user explicitly request his Secretary beforehand. The same goes for a lot of other methods Secretary provides. Instead of writing a stub function for each of these methods, it would be nice to do the following:\nclass Boss delegate_method :my_secretary, :send_fax, :answer_call def initialize @my_secretary = Secretary.new end end john = Boss.new john.send_fax(\u0026#34;Donald Trump\u0026#34;, \u0026#34;YOU\u0026#39;RE fired\u0026#34;) Here\u0026rsquo;s how we can get this to happen:\nclass Class def delegate_method(instance_var_name, *method_names) method_names.each do |method_name| define_method(method_name) do |*args| instance_var = instance_variable_get(\u0026#34;@%s\u0026#34; % instance_var_name) instance_var.send(method_name, *args) end end end end This solution does have its drawbacks - it will not work for methods which are meant to accept blocks. I\u0026rsquo;m not sure how to get that to happen, short of using a string-based class_eval, which I\u0026rsquo;m not very fond of. (I find eval to be, well, evil\u0026hellip;)\n","permalink":"https://lutzky.net/2008/10/18/delegating-methods-in-ruby/","summary":"Sometimes, when constructing a compound object, we are interested in exporting functionality while retaining encapsulation. For example, suppose we have a Secretary class:\nclass Secretary def send_fax(destination, fax_contents) puts \u0026#39;Sending fax \u0026#34;%s\u0026#34; to %s\u0026#39; % [fax_contents, destination] end def answer_call(call) # ... end # ... end Our Secretary provides a lot of useful functionality, that our Boss class would like to have. Boss would like to be able to say that he can send a fax, without having the user explicitly request his Secretary beforehand.","title":"Delegating methods in Ruby"},{"content":" Ditz was lost in the mists of time, and I guess if ttime were maintained, issues would be tracked using Github.\n I\u0026rsquo;ve added issue tracking for ttime using the fantastic ditz. I\u0026rsquo;ve also added ttime\u0026rsquo;s rdoc documentation. (Note: Version 0.8.5 is out)\n","permalink":"https://lutzky.net/2008/07/30/tracking-ttime/","summary":"Ditz was lost in the mists of time, and I guess if ttime were maintained, issues would be tracked using Github.\n I\u0026rsquo;ve added issue tracking for ttime using the fantastic ditz. I\u0026rsquo;ve also added ttime\u0026rsquo;s rdoc documentation. (Note: Version 0.8.5 is out)","title":"Tracking TTime"},{"content":"Edit: I was misled!\nIllustrated here. Hints below.\n\u0026gt;\u0026gt; def inspect_x_and_y(x,y); puts \u0026quot;x: %p, y: %p\u0026quot; % [x, y]; end =\u0026gt; nil \u0026gt;\u0026gt; inspect_x_and_y(y={\u0026quot;hello\u0026quot; =\u0026gt; \u0026quot;world\u0026quot;},x=[1,2,3]) x: {\u0026quot;hello\u0026quot;=\u0026gt;\u0026quot;world\u0026quot;}, y: [1, 2, 3] The bits I didn\u0026rsquo;t know about:\n \u0026quot;Format strings using a %% sign, %s, %s!\u0026quot; % [ \u0026quot;just like in python\u0026quot;, \u0026quot;but with arrays\u0026quot; ] The %p formatting character is the same as inspect. You can call methods with method_name(param2=val2, param1=val1), also like in python. No you can\u0026rsquo;t! This code sets external variables called y and x.  How embarassing\u0026hellip; :(\n","permalink":"https://lutzky.net/2008/07/25/three-things-i-didnt-know-ruby-does/","summary":"Edit: I was misled!\nIllustrated here. Hints below.\n\u0026gt;\u0026gt; def inspect_x_and_y(x,y); puts \u0026quot;x: %p, y: %p\u0026quot; % [x, y]; end =\u0026gt; nil \u0026gt;\u0026gt; inspect_x_and_y(y={\u0026quot;hello\u0026quot; =\u0026gt; \u0026quot;world\u0026quot;},x=[1,2,3]) x: {\u0026quot;hello\u0026quot;=\u0026gt;\u0026quot;world\u0026quot;}, y: [1, 2, 3] The bits I didn\u0026rsquo;t know about:\n \u0026quot;Format strings using a %% sign, %s, %s!\u0026quot; % [ \u0026quot;just like in python\u0026quot;, \u0026quot;but with arrays\u0026quot; ] The %p formatting character is the same as inspect. You can call methods with method_name(param2=val2, param1=val1), also like in python.","title":"Three things I didn't know Ruby does"},{"content":"This site gets indexed by the almighty google. This link is part of a security project I\u0026rsquo;m doing for my CS degree.\n The was part of project BadSense. See the BadSense report\n ","permalink":"https://lutzky.net/2008/07/23/security-project/","summary":"This site gets indexed by the almighty google. This link is part of a security project I\u0026rsquo;m doing for my CS degree.\n The was part of project BadSense. See the BadSense report\n ","title":"Security project"},{"content":"I was having a lot of trouble with gettext in Ruby, mostly due to lacking documentation. Here are some useful things I figured out while writing TTime. I ended up having a single gettext_settings.rb, included from every file which uses gettext. Here it is (with some extra notes)\n#!/usr/bin/ruby begin require \u0026#39;gettext\u0026#39; require \u0026#39;pathname\u0026#39; include GetText # This fixes a swarm of problems on Windows GetText.locale.charset = \u0026#34;UTF-8\u0026#34; # Ruby\u0026#39;s gettext acts in a sane # method - add a path to the set of paths # scanned. locale_in_data_path = Pathname.new($0).dirname + \\ \u0026#34;../data/locale/%{locale}/LC_MESSAGES/%{name}.mo\u0026#34; add_default_locale_path(locale_in_data_path.to_s) bound_text_domain = bindtextdomain(\u0026#34;ttime\u0026#34;) # For Glade, however, it only seems to # be possible to specify one path at a # time. Fortunately, gettext already # found it for us. my_current_mo = bound_text_domain.entries[0].current_mo if my_current_mo ENV[\u0026#34;GETTEXT_PATH\u0026#34;] = my_current_mo.filename.gsub( /locale\\/[^\\/]+\\/LC_MESSAGES.*/, \u0026#34;locale/\u0026#34;) end rescue LoadError def _ s #:nodoc: # No gettext? No problem. s end end One note for context: I use setup.rb (and ruby-pkg-tools) to package TTime. So my localizations go in data/locale.\n","permalink":"https://lutzky.net/2008/07/20/gettext-oddities-with-ruby/","summary":"I was having a lot of trouble with gettext in Ruby, mostly due to lacking documentation. Here are some useful things I figured out while writing TTime. I ended up having a single gettext_settings.rb, included from every file which uses gettext. Here it is (with some extra notes)\n#!/usr/bin/ruby begin require \u0026#39;gettext\u0026#39; require \u0026#39;pathname\u0026#39; include GetText # This fixes a swarm of problems on Windows GetText.locale.charset = \u0026#34;UTF-8\u0026#34; # Ruby\u0026#39;s gettext acts in a sane # method - add a path to the set of paths # scanned.","title":"Gettext oddities with Ruby"},{"content":"I\u0026rsquo;ve found myself working on TTime, the Technion Timetable Scheduler, quite a bit lately. Lots of cool stuff went in:\n Boaz Goldstein\u0026rsquo;s TCal, a Cairo-based schedule renderer (could you believe the old version used MozEmbed?) Sports courses are now correctly parsed Ability to select specific lectures and groups for the automated scheduler A manual scheduler - given an existing schedule, you can ask to show all alternatives at once, and hand-pick them. Some people (Tom, for example) prefer this. Just for kicks - interoperability with Grandpa\u0026rsquo;s XML format  I\u0026rsquo;ve also cleaned up the packaging quite a bit - it can now be installed using setup.rb, or the updated Debian package. I think it may soon be time to tag a release :)\nSources at Github\n","permalink":"https://lutzky.net/2008/07/11/been-working-on-ttime/","summary":"I\u0026rsquo;ve found myself working on TTime, the Technion Timetable Scheduler, quite a bit lately. Lots of cool stuff went in:\n Boaz Goldstein\u0026rsquo;s TCal, a Cairo-based schedule renderer (could you believe the old version used MozEmbed?) Sports courses are now correctly parsed Ability to select specific lectures and groups for the automated scheduler A manual scheduler - given an existing schedule, you can ask to show all alternatives at once, and hand-pick them.","title":"Been working on TTime"},{"content":"I has it. Sorta.\nA few weeks ago, the lovely NaNuchKa visited Israel for two and a half shows (the half-show was warming for Berry Sacharof). \u0026ldquo;Three shows in two weeks?\u0026rdquo;, people ask - well, yeah. They only come once a year. Their set is already too long to play all the songs I like, and that\u0026rsquo;s actually quite excellent - new EP and all. Great stuff :) Deep Purple should be coming to Israel this summer (holy crap!), and I need to see what I can do about getting tickets for that.\nThis is my last semester at the Technion - then it\u0026rsquo;s off to the military for me. Courses for this semester are Electronic Switching Circuits (bleh\u0026hellip;), Signals and Systems (which is actually turning out to be quite awesome!), and the neat Compilation Theory. After having thoroughly enjoyed Eli Biham\u0026rsquo;s excellent Modern Cryptology last semester, I\u0026rsquo;m visiting (but not taking) his advanced topics course this semester. I also have two projects: One in computer security, where we mess with Google, and another in EE, where we try using transactional memory in order to optimize Apache.\nAnd finally - next week on Thursday, Shlomi Shaban is doing a piano show in Haifa, just like the good old days. He was supposed to join NaNuchKa for one of their shows, but had to cancel, so my lovely lady (who introduced me to his work in the first place) and I haven\u0026rsquo;t been to his shows in quite a while. It seems that will be able to use the new 200 line - part of a long overdue project to have cheap public transportation available all night long.\n","permalink":"https://lutzky.net/2008/07/11/that-life-category-there/","summary":"I has it. Sorta.\nA few weeks ago, the lovely NaNuchKa visited Israel for two and a half shows (the half-show was warming for Berry Sacharof). \u0026ldquo;Three shows in two weeks?\u0026rdquo;, people ask - well, yeah. They only come once a year. Their set is already too long to play all the songs I like, and that\u0026rsquo;s actually quite excellent - new EP and all. Great stuff :) Deep Purple should be coming to Israel this summer (holy crap!","title":"That \"Life\" category there"},{"content":"Today at the CS department of the Technion is a particularily Bad Network Day (TM) for laptop users; none of the wired connections at the farm work, and wireless doesn\u0026rsquo;t seem to working for HTTP at all.\nIt does, however, work for SSH. Ka-ching! :)\nTunneling your browser over SSH is a pretty simple affair - SSH into somewhere which has a decent connection, and use the -D9999 flag (9999 works, but it can be any 16-bit number over 1024). Then, configure your browser to work over a SOCKS proxy at 127.0.0.1:9999.\nHow do you, however, get other things to work over that tunnel? There\u0026rsquo;s an excellent program called dante-client (that\u0026rsquo;s an apt package, folks. if you can\u0026rsquo;t apt-get due to your network situation, get it at packages.ubuntu.com or packages.debian.org). Install it, and make sure /etc/dante.conf has the following lines:\nroute { from: 0.0.0.0/0 to: 0.0.0.0/0 via: 127.0.0.1 port = 9999 protocol: tcp proxyprotocol: socks_v4 socks_v5 } Then, run socksify whatever-you-want-to-do. For example, sudo socksify apt-get install something. Or perhaps socksify ssh somewhere. Or sudo wget something. Or socksify git do-something-awesome. (All of the above work for me)\n","permalink":"https://lutzky.net/2008/06/17/tunelling-even-more-stuff-over-ssh/","summary":"Today at the CS department of the Technion is a particularily Bad Network Day (TM) for laptop users; none of the wired connections at the farm work, and wireless doesn\u0026rsquo;t seem to working for HTTP at all.\nIt does, however, work for SSH. Ka-ching! :)\nTunneling your browser over SSH is a pretty simple affair - SSH into somewhere which has a decent connection, and use the -D9999 flag (9999 works, but it can be any 16-bit number over 1024).","title":"Tunelling even more stuff over SSH"},{"content":"I neglected to post this here somehow, it\u0026rsquo;s about a month old by now\u0026hellip;\n Screenshot lost in the mist of time\u0026hellip; shows a program segfaulting, and then working properly when run within valgrind.\n The problem turned out to be an imprecise (false-positve) comparison operator implemented for a class used as a hash key. God, I hate C++.\n","permalink":"https://lutzky.net/2008/06/11/valgrind-fail/","summary":"I neglected to post this here somehow, it\u0026rsquo;s about a month old by now\u0026hellip;\n Screenshot lost in the mist of time\u0026hellip; shows a program segfaulting, and then working properly when run within valgrind.\n The problem turned out to be an imprecise (false-positve) comparison operator implemented for a class used as a hash key. God, I hate C++.","title":"Valgrind Fail"},{"content":"So, I see I forgot to post my schedule for this semester\u0026hellip;\n \u0026hellip;ttime screenshot lost in the mists of time\u0026hellip;\n As you can see, it\u0026rsquo;s TTime! With a shiny new Cairo interface. We\u0026rsquo;re back to the Ruby version, too - as we have another coder on board, which is using his compilation skills in order to write a new REPY parser.\nYou can also see it\u0026rsquo;s only found one schedule. This is thanks to the group selection constraint which was finally coded. Yes, that\u0026rsquo;s a link to the Github repository for TTime. You\u0026rsquo;re welcome to help write some constraints :)\n","permalink":"https://lutzky.net/2008/06/02/scheduling/","summary":"So, I see I forgot to post my schedule for this semester\u0026hellip;\n \u0026hellip;ttime screenshot lost in the mists of time\u0026hellip;\n As you can see, it\u0026rsquo;s TTime! With a shiny new Cairo interface. We\u0026rsquo;re back to the Ruby version, too - as we have another coder on board, which is using his compilation skills in order to write a new REPY parser.\nYou can also see it\u0026rsquo;s only found one schedule.","title":"Scheduling"},{"content":"Deskbar has a really neat plugin which allows you to search your browsing history and bookmarks. Firefox 3 has switched the storage format to an sqlite-based one. I\u0026rsquo;ve been working on a new plugin to make use of that - so far it\u0026rsquo;s very enjoyable to use :)\n» Deskbar_FF3\n","permalink":"https://lutzky.net/2008/04/28/deskbar-and-firefox-3/","summary":"Deskbar has a really neat plugin which allows you to search your browsing history and bookmarks. Firefox 3 has switched the storage format to an sqlite-based one. I\u0026rsquo;ve been working on a new plugin to make use of that - so far it\u0026rsquo;s very enjoyable to use :)\n» Deskbar_FF3","title":"Deskbar and Firefox 3"},{"content":"  You can use git on a VFAT disk (for example, a USB key) without all of the annoying mode issues, by using the following setting in .git/config:\n[core] filemode = false What I haven\u0026rsquo;t figured out is how to do force a chmod in this situation; for example, if I create a new script, I was hoping to be able to git chmod +x it.\n  Cream is a very good editor if you\u0026rsquo;re used to Windows applications. It\u0026rsquo;s a set of plugins for VIM which make it modeless and (very) familiar to Windows users. However, Ctrl-O still has its usual job for us ordinary junkies :)\n  Vertically, two cans of Pepsi fit very snugly into a Pringles can.\n  ","permalink":"https://lutzky.net/2008/04/28/things-i-learned-today/","summary":"You can use git on a VFAT disk (for example, a USB key) without all of the annoying mode issues, by using the following setting in .git/config:\n[core] filemode = false What I haven\u0026rsquo;t figured out is how to do force a chmod in this situation; for example, if I create a new script, I was hoping to be able to git chmod +x it.\n  Cream is a very good editor if you\u0026rsquo;re used to Windows applications.","title":"Things I learned today"},{"content":"This one took me a while to figure out, which is reason enough to post it here.\nFirst of all, you\u0026rsquo;ll need aspell-he, as pidgin uses gtkspell (which, in turn, uses aspell) rather than enchant (which supports hspell). There is a patch for gtkspell which gets it to use enchant, but I don\u0026rsquo;t know of a simple way to get it to work in my distribution of choice, Ubuntu.\nNow you need a neat little plugin from the Guifications plugin pack, called SwitchSpell. Unfortunately, it\u0026rsquo;s in version 2.3.0 of the pack, whereas the current Ubuntu version is 2.0.0. It\u0026rsquo;s not complicated to install this from source though: I\u0026rsquo;ve detailed the precise installation procedure below; the confusing thing is that if you forget to install libgtkspell-dev or libaspell-dev, SwitchSpell will not be built, but the configure script tells you that it will.\nsudo apt-get install build-essential gettext libgtkspell-dev libaspell-dev pidgin-dev wget http://downloads.guifications.org/plugins//Plugin%20Pack/purple-plugin_pack-2.3.0.tar.bz2 tar jxvf purple-plugin_pack-2.3.0.tar.bz2 cd purple-plugin_pack-2.3.0 ./configure --with-plugins=switchspell make sudo make install At this point, the Switch Spell plugin should show up in your Pidgin preferences. When you activate it, you should get a menu at the top of each conversation for choosing the dictionary in use. Enjoy!\n","permalink":"https://lutzky.net/2008/04/22/hebrew-spell-checking-in-pidgin/","summary":"This one took me a while to figure out, which is reason enough to post it here.\nFirst of all, you\u0026rsquo;ll need aspell-he, as pidgin uses gtkspell (which, in turn, uses aspell) rather than enchant (which supports hspell). There is a patch for gtkspell which gets it to use enchant, but I don\u0026rsquo;t know of a simple way to get it to work in my distribution of choice, Ubuntu.\nNow you need a neat little plugin from the Guifications plugin pack, called SwitchSpell.","title":"Hebrew spell-checking in Pidgin"},{"content":"Due to an exercise in an AI course, I\u0026rsquo;m forced to confront an old nemesis - C++. Part of the reason is that the exercise contains a time-limited tournament, and the code needs to run very quickly. Another reason is, I guess, the fact that C++ serves as a sort of lowest common denominator in the course (which used, by the way, to be taught in LISP, along with the language).\nI never liked C++ language much. As a matter of fact, I prefer C. I\u0026rsquo;ve been going over some old code for a project, which needed to use DBus to talk to NetworkManager. Back then I wrote it using Python, embedded in C - it seemed easier at the time, due to lack of documentation. After hunting around, I figured out how to do most of the stuff I wanted in C, using DBus\u0026rsquo;s GLib API.\nIn this process, the most helpful bit of documentation turned out to be GLib\u0026rsquo;s. GLib looks like a wonderful library to get big-program stuff done relatively nicely in C, without mucking about in C++. Exception handling (of sorts), object-oriented programming (of sorts) as well as garbage collection (of sorts) are implemented in a usable way, and extremely well-documented.\nAt the end of the day, I was able to turn this Python gem:\nimport dbus def _nm_device_interface(dev_object): \u0026#34;\u0026#34;\u0026#34;Returns an interface to the device object dev_object\u0026#34;\u0026#34;\u0026#34; return dbus.Interface(dev_object, NM_DEVICE_IFACE) def _nm_get_object(object_path): \u0026#34;\u0026#34;\u0026#34;Returns an object with the given object path using the NM service\u0026#34;\u0026#34;\u0026#34; return dbus.SystemBus().get_object(NM_SERVICE, object_path) def _nm(): return _nm_get_object(NM_OBJECT_PATH) def _nm_dbus_exception(e, guessed_exception): \u0026#34;\u0026#34;\u0026#34;Checks if the DBus exception e is (exactly) of type guessed_exception\u0026#34;\u0026#34;\u0026#34; try: return e.get_dbus_name().endswith(guessed_exception) except: # If it doesn\u0026#39;t have a get_dbus_name, it probably isn\u0026#39;t the DBus # exception we\u0026#39;re looking for. return False def _nm_all_device_interfaces(): \u0026#34;\u0026#34;\u0026#34;Return a list of interfaces to all devices NM sees\u0026#34;\u0026#34;\u0026#34; try: return [ _nm_device_interface(_nm_get_object(devicename)) for devicename in _nm().getDevices() ] except dbus.DBusException, e: if _nm_dbus_exception(e, \u0026#34;NoDevices\u0026#34;): return [] # No devices means list of devices is empty else: raise \u0026hellip;into this C gem:\n#define DBUS_SERVICE_NM \u0026#34;org.freedesktop.NetworkManager\u0026#34; #define DBUS_PATH_NM \u0026#34;/org/freedesktop/NetworkManager\u0026#34; #define DBUS_INTERFACE_NM \u0026#34;org.freedesktop.NetworkManager\u0026#34; #define NM_ERR_NODEVICES \u0026#34;org.freedesktop.NetworkManager.NoDevices\u0026#34;  gboolean is_remote_dbus_exception(GError *error, char * exception_name) { g_assert(error); if (error-\u0026gt;domain != DBUS_GERROR || error-\u0026gt;code != DBUS_GERROR_REMOTE_EXCEPTION) return FALSE; if (!exception_name) return TRUE; return strcmp(dbus_g_error_get_name(error), exception_name) == 0; } GPtrArray * get_nm_devices(DBusGConnection *connection, GError **err) { GError *tmp_error = NULL; DBusGProxy *proxy; GPtrArray *ptr_array; g_return_val_if_fail(connection != NULL, NULL); proxy = dbus_g_proxy_new_for_name( connection, DBUS_SERVICE_NM, DBUS_PATH_NM, DBUS_INTERFACE_NM); dbus_g_proxy_call(proxy, \u0026#34;getDevices\u0026#34;, \u0026amp;tmp_error, G_TYPE_INVALID, dbus_g_type_get_collection(\u0026#34;GPtrArray\u0026#34;, DBUS_TYPE_G_PROXY), \u0026amp;ptr_array, G_TYPE_INVALID); if (tmp_error != NULL) { if (is_remote_dbus_exception(tmp_error, NM_ERR_NODEVICES)) { g_error_free(tmp_error); return NULL; } else { g_propagate_error(err, tmp_error); return NULL; } } g_object_unref(proxy); return ptr_array; } The C code runs much faster, and I suspect is more maintainable then its original counterpart (which uses embedded python in C).\n","permalink":"https://lutzky.net/2008/04/16/faster-languages/","summary":"Due to an exercise in an AI course, I\u0026rsquo;m forced to confront an old nemesis - C++. Part of the reason is that the exercise contains a time-limited tournament, and the code needs to run very quickly. Another reason is, I guess, the fact that C++ serves as a sort of lowest common denominator in the course (which used, by the way, to be taught in LISP, along with the language).","title":"Faster Languages"},{"content":"YNet was running a story on how to use your computer as an alarm clock. Here\u0026rsquo;s what I do, for our commandline junkies :)\nHere\u0026rsquo;s ~/bin/run_alarm.sh:\n#!/bin/bash  find ~/music/ -name \u0026#39;*.mp3\u0026#39; -print0 | xargs -0 mplayer -shuffle \u0026amp; MAXVOL=31 TIME=900 for (( i = 0; i \u0026lt;= $MAXVOL; i++ )); do amixer set Master $i \u0026gt; /dev/null; sleep `echo $TIME / $MAXVOL | bc -l` done This basically plays all of my MP3 files, in random order. The -print0 and -0 arguments make it a null-terminated list, as some (most) files have spaces in their names. This process is backgrounded, and the script proceeds to gradually sweep the volume from 0 to the maximum, for a more gentle wakeup :)\nThis script is basically intended for use with at. I made a little wrapper around it for my comfort:\n#!/bin/bash  if [ -z \u0026#34;$1\u0026#34; ]; then echo \u0026#34;Usage: $0[time]\u0026#34;; exit 1; fi echo /home/ohad/bin/run_alarm.sh | at $1 ","permalink":"https://lutzky.net/2008/02/12/my-alarm-clock/","summary":"YNet was running a story on how to use your computer as an alarm clock. Here\u0026rsquo;s what I do, for our commandline junkies :)\nHere\u0026rsquo;s ~/bin/run_alarm.sh:\n#!/bin/bash  find ~/music/ -name \u0026#39;*.mp3\u0026#39; -print0 | xargs -0 mplayer -shuffle \u0026amp; MAXVOL=31 TIME=900 for (( i = 0; i \u0026lt;= $MAXVOL; i++ )); do amixer set Master $i \u0026gt; /dev/null; sleep `echo $TIME / $MAXVOL | bc -l` done This basically plays all of my MP3 files, in random order.","title":"My alarm clock"},{"content":"I\u0026rsquo;ve switched to a Nokia 6120 Classic, and I\u0026rsquo;ve switched my carrier over to Orange. I\u0026rsquo;m very happy with it: The price is right, at 0 NIS a month (if your monthly bill adds up to over 100 NIS without it, which it does). It\u0026rsquo;s very small, but has a nice screen and a respectable 2 megapixel camera. It\u0026rsquo;s \u0026ldquo;3.5G\u0026rdquo;, which means it has a very fast internet connection (I\u0026rsquo;ve clocked over 50kbyte/sec), and the Symbian S60 operating system lets me use it well - it comes with a very, very nice webkit-based browser and RSS reader, and a fast GMail client is a few clicks away.\nAnother nice feature is the built-in MP3 player - which is actually made relevant due to the micro-SD support and included 1GB SD card. The device has a standard USB connection (cable included, but it\u0026rsquo;s an ordinary Mini-to-A cable), and has a Mass Storage Device mode, so it works well with any OS. It can also automatically text-to-speech the name of the caller (or dial by voice recognition, which works remarkably well), which is handy when listening to MP3s.\nI\u0026rsquo;ve only had two problems with it so far - first, when viewing a long web page (on wikipedia, specifically), it gave an \u0026ldquo;out of RAM\u0026rdquo; message and rebooted. I\u0026rsquo;m curious as to whether there\u0026rsquo;s a simpler, non-CSS version of Wikipedia, or a way to get the phone to ignore the CSS - this will probably save on RAM. Another problem I had was that the vibration feature didn\u0026rsquo;t work until I rebooted it - but this no longer seems to occur.\nI wonder how well puTTy would work on this\u0026hellip;\n","permalink":"https://lutzky.net/2008/02/11/nokia-6120-classic/","summary":"I\u0026rsquo;ve switched to a Nokia 6120 Classic, and I\u0026rsquo;ve switched my carrier over to Orange. I\u0026rsquo;m very happy with it: The price is right, at 0 NIS a month (if your monthly bill adds up to over 100 NIS without it, which it does). It\u0026rsquo;s very small, but has a nice screen and a respectable 2 megapixel camera. It\u0026rsquo;s \u0026ldquo;3.5G\u0026rdquo;, which means it has a very fast internet connection (I\u0026rsquo;ve clocked over 50kbyte/sec), and the Symbian S60 operating system lets me use it well - it comes with a very, very nice webkit-based browser and RSS reader, and a fast GMail client is a few clicks away.","title":"Nokia 6120 Classic"},{"content":" The Egged Getter has been lost in the mists of time. However, it\u0026rsquo;s code has largely been integrated into TransportDroidIL. An old version of the Python code has been pasted at the end of this post.\n Here\u0026rsquo;s a little something I\u0026rsquo;ve been messing with: A simple fetcher script for the Egged (Israeli bus company) site. I\u0026rsquo;ve made a deskbar applet which uses it, which was fun to do :) (I\u0026rsquo;m looking for other cool ideas to implement as deskbar applets)\nYou can get it at http://lutzky.net/files/egged_getter. The readme file includes installation instructions (\u0026hellip;which involve placing the two included scripts in ~/.gnome2/deskbar-plugin/modules-2.20-compatible/.\nThere\u0026rsquo;s also a git repository here: http://git.lutzky.net/?p=ohad/egged_getter.git. I don\u0026rsquo;t think I\u0026rsquo;ve mentioned git on the blog before\u0026hellip; It\u0026rsquo;s freaking awesome. It made me really despise subversion :). Besides the abundance of information on the main site, there\u0026rsquo;s an excellent (and very amusing) talk by Linus about it. Also, I\u0026rsquo;m giving a talk about it in Haifux - this coming Monday (February 4th), the Taub building of the Technion, room 6, at 18:30.\n#!/usr/bin/python # coding: utf-8 import socket try: from pyfribidi import log2vis except ImportError: def log2vis(s): return s # Original values which worked: # User agent (a sane browser agent): # USERAGENT=\u0026#34;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b2) Gecko/2007121016 Firefox/3.0b2\u0026#34; # Session ID: Can be retrieved from the site, but seems to have a very long # keepalive, and isn\u0026#39;t checked anyway. # SESSION_ID=\u0026#34;thjbzmnrhrks3a55w1dymvnx\u0026#34; BUF_LEN=2048 HOST=\u0026#39;mslworld.egged.co.il\u0026#39; PORT=80 DOUBLE_NEWLINE=\u0026#34;\\r\\n\\r\\n\u0026#34; USER_AGENT=\u0026#34;EggedGetter\u0026#34; SESSION_ID=\u0026#34;0\u0026#34; JSON_DATA=\u0026#34;\u0026#34;\u0026#34;{\u0026#34;str1\u0026#34;:\u0026#34;%(query)s\u0026#34;,\u0026#34;strSession\u0026#34;:\u0026#34;%(session_id)s\u0026#34;}\u0026#34;\u0026#34;\u0026#34; _payload=\u0026#34;\u0026#34;\u0026#34;POST /eggedtimetable/WebForms/wsUnicell.asmx/getAnswer HTTP/1.1 Host: mslworld.egged.co.il User-Agent: %(user_agent)sAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Charset: utf-8 Keep-Alive: 300 Connection: keep-alive Content-Type: application/json; charset=utf-8 Referer: http://mslworld.egged.co.il/eggedtimetable/WebForms/wfrmMain.aspx?width=1280\u0026amp;state=3\u0026amp;taavura=0\u0026amp;language=he\u0026amp;freelang= Content-Length: %(content_length)dCookie: ASP.NET_SessionId=%(session_id)sPragma: no-cache Cache-Control: no-cache %(json_data)s\u0026#34;\u0026#34;\u0026#34;.replace(\u0026#34;\\n\u0026#34;,\u0026#34;\\r\\n\u0026#34;) def build_json_data(query, session_id = SESSION_ID): \u0026#34;\u0026#34;\u0026#34;Build a JSON-formatted query for the egged site.\u0026#34;\u0026#34;\u0026#34; return JSON_DATA % { \u0026#39;query\u0026#39;:query.replace(\u0026#39;\u0026#34;\u0026#39;,\u0026#39;\\\\\u0026#34;\u0026#39;).encode(\u0026#34;utf-8\u0026#34;), \u0026#39;session_id\u0026#39;:session_id, } def build_request(query, session_id = SESSION_ID): \u0026#34;\u0026#34;\u0026#34;Build an HTTP request for the egged site.\u0026#34;\u0026#34;\u0026#34; json_data = build_json_data(query, session_id) return _payload % { \u0026#39;user_agent\u0026#39;:USER_AGENT, \u0026#39;content_length\u0026#39;:len(json_data), \u0026#39;session_id\u0026#39;:session_id, \u0026#39;json_data\u0026#39;:json_data, } def send_query(query, session_id = SESSION_ID): \u0026#34;\u0026#34;\u0026#34;Prepare and send query to site. Returned data is raw.\u0026#34;\u0026#34;\u0026#34; http_data = build_request(query) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST,PORT)) s.send(http_data) data = s.recv(BUF_LEN) s.close() return data def clean_response_html(response,linebreak=\u0026#34;\\n\u0026#34;,item=\u0026#34;\\n* \u0026#34;): if response[0] == response[-1] == \u0026#39;\u0026#34;\u0026#39;: response = response[1:-1] BR = \u0026#34;\\u003cbr\\u003e\u0026#34; LI = \u0026#34;\\u003cli\\u003e\u0026#34; NBSP = \u0026#34;\u0026amp;nbsp\u0026#34; return response.replace(BR,linebreak) \\ .replace(LI,item) \\ .replace(NBSP,\u0026#34; \u0026#34;) \\ .replace(\u0026#34;\\\\\u0026#34;,\u0026#34;\u0026#34;) def query_site(query): \u0026#34;\u0026#34;\u0026#34;Query the egged site with query\u0026#34;\u0026#34;\u0026#34; site_response = send_query(query) returned_data = site_response.split(DOUBLE_NEWLINE)[1] try: cleaned_data = clean_response_html(returned_data) except: print \u0026#34;Error occured when trying to clean up the following response:\u0026#34; print \u0026#34;site_response:\u0026#34; print site_response print \u0026#34;returned_data:\u0026#34; print returned_data raise return unicode(cleaned_data, \u0026#34;utf-8\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: query = unicode(raw_input(\u0026#34;Enter query for Egged site: \u0026#34;),\u0026#34;utf-8\u0026#34;) result = query_site(query) print \u0026#34;\u0026#34; try: print log2vis(result) except UnicodeEncodeError: print log2vis(unicode.encode(result,\u0026#34;utf-8\u0026#34;)) ","permalink":"https://lutzky.net/2008/02/01/egged-getter-0-1/","summary":"The Egged Getter has been lost in the mists of time. However, it\u0026rsquo;s code has largely been integrated into TransportDroidIL. An old version of the Python code has been pasted at the end of this post.\n Here\u0026rsquo;s a little something I\u0026rsquo;ve been messing with: A simple fetcher script for the Egged (Israeli bus company) site. I\u0026rsquo;ve made a deskbar applet which uses it, which was fun to do :) (I\u0026rsquo;m looking for other cool ideas to implement as deskbar applets)","title":"Egged Getter 0.1"},{"content":"On an online board, friends posted a photo from a party a while back, as I\u0026rsquo;m chewing some extra-sour chewing gum:\n{: title=\u0026ldquo;חמוצקי נולד\u0026rdquo;}\nI find this suitable for use in macro form. For example, in the Computer Security course, we\u0026rsquo;re going to compromise a windows-based server using a buffer overflow vulnerability. Unfortunately, this means we\u0026rsquo;re going to have to use (as per the course\u0026rsquo;s demands) Visual Studio 2003. My response:\n{: title=\u0026ldquo;חמוצקי\u0026rdquo;}\n","permalink":"https://lutzky.net/2007/12/19/sour-chewing-gum/","summary":"On an online board, friends posted a photo from a party a while back, as I\u0026rsquo;m chewing some extra-sour chewing gum:\n{: title=\u0026ldquo;חמוצקי נולד\u0026rdquo;}\nI find this suitable for use in macro form. For example, in the Computer Security course, we\u0026rsquo;re going to compromise a windows-based server using a buffer overflow vulnerability. Unfortunately, this means we\u0026rsquo;re going to have to use (as per the course\u0026rsquo;s demands) Visual Studio 2003. My response:","title":"Sour chewing gum"},{"content":"New URL - not interesting. You\u0026rsquo;d notice by now, as you\u0026rsquo;ve been redirected. Guess my new E-mail. OpenID - interesting, but I don\u0026rsquo;t have anything particularily interesting to say about it right now.\nThis, however, is interesting: \u0026ldquo;10 things christians and atheists can (and must) agree on\u0026rdquo;, a nicely written piece over at cracked.com. But this isn\u0026rsquo;t blogspam, I\u0026rsquo;ll actually share my two cents. (or shnekel, if you like)\nI have a serious problem with religion; It is my opinion that it is an overly powerful means of control. Whether it has evolved as such or not is hard to tell. But today it seems to pose a very serious threat to the world.\nNow, don\u0026rsquo;t get me wrong - control of this type is very important and useful. Specifically, it manifests itself in a basic moral system which, many believe, has served mankind well. You know, \u0026ldquo;thou shalt not murder\u0026rdquo;, stuff like that. Some may even say that it was a central factor in overcoming our primal urges, and development into the ever-so-slightly more sophisticated society we are today.\nHowever, there are other, more dangerous manifestations of this control. Specifically, it seems all-too-easy nowadays to get up and say \u0026ldquo;This-and-that god has spoken to me - we must kill those-and-them\u0026rdquo;. \u0026ldquo;God has spoken to me, we must, uh, enlighten these our-religious-character-rejecting other-religion-followers. There\u0026rsquo;s some oil in it for us, too\u0026rdquo;. \u0026ldquo;This land has been promised to us this-and-that years ago, we must kill all other-religion-dwellers\u0026rdquo;.\nOf course, the link here is politics. When used as a series of anecdotes, morals, stories, hell - even as a way of life - religious is mostly harmless. However, when a religious leader becomes a political figure, the temptation is simply too great, and religion becomes used as a tool of the agenda. It doesn\u0026rsquo;t take a whole staff of advisors and a big media budget to convince the public now - it only takes a proper connection with arbitrary dogma to do that.\nThroughout the years, the secular public has wished for separation of church and state. But noone has yet stated it better than George Carlin - \u0026ldquo;Keep thy religion (or, in accordance with the linked post, thy lack thereof) to thyself.\u0026rdquo;\n","permalink":"https://lutzky.net/2007/12/17/means-of-control/","summary":"New URL - not interesting. You\u0026rsquo;d notice by now, as you\u0026rsquo;ve been redirected. Guess my new E-mail. OpenID - interesting, but I don\u0026rsquo;t have anything particularily interesting to say about it right now.\nThis, however, is interesting: \u0026ldquo;10 things christians and atheists can (and must) agree on\u0026rdquo;, a nicely written piece over at cracked.com. But this isn\u0026rsquo;t blogspam, I\u0026rsquo;ll actually share my two cents. (or shnekel, if you like)\nI have a serious problem with religion; It is my opinion that it is an overly powerful means of control.","title":"Means of control"},{"content":"The most recent events in my life which I would consider to be vacations would be the second Lebanon war and my basic training. I love the Technion, but I think it\u0026rsquo;s high time for some R\u0026amp;R. With no upcoming tests hovering over my head, homework pressure low-to-nonexistent, and my girlfriend\u0026rsquo;s birthday Murphy\u0026rsquo;s-law-bendingly coinciding with her getting some leave, this is a perfect opportunity to try my hand at a real vacation.\nOkay, so it\u0026rsquo;s just two days, but I could hardly ask for anything better. The location is a Tzimmer recommended by friends and family. My parents have graciously lent me the car for the purpose. Last but not least, I\u0026rsquo;ve gotten my hands on some massage oil. :-)\nStudying at the Technion can get rather hectic. But hell, I have just one more year to go, after which I undergo lime-tinted metamorphosis. Perhaps low-key, nearby, short-term vacations are all I can afford. But with good friends, a wonderful girlfriend, and a geeky way of getting excited at seemingly mundane things, I can\u0026rsquo;t complain. Even with EE atrocities in my recent past and, in all likelihood, my near future, I can\u0026rsquo;t help but wear an annoying smile on my face.\n","permalink":"https://lutzky.net/2007/11/04/vacation/","summary":"The most recent events in my life which I would consider to be vacations would be the second Lebanon war and my basic training. I love the Technion, but I think it\u0026rsquo;s high time for some R\u0026amp;R. With no upcoming tests hovering over my head, homework pressure low-to-nonexistent, and my girlfriend\u0026rsquo;s birthday Murphy\u0026rsquo;s-law-bendingly coinciding with her getting some leave, this is a perfect opportunity to try my hand at a real vacation.","title":"Vacation"},{"content":" All links in this post have been lost to the mists of time. I\u0026rsquo;ve kept it here out of pure nostalgia.\n I\u0026rsquo;m typing the lectures of the course 236343 Computability Theory this semester. Attached are my lectures notes in PDF form:\nComputability Lecture Notes Computability Tutorial Notes\nIf you also type the notes and would like to collaborate with me, I use a git repository stored here:\nhttp://yasmin.technion.ac.il/ohad/git/computability.git\nTo use it, install git-core and curl, and run\ngit clone http://yasmin.technion.ac.il/ohad/git/computability.git Any changes you have - send to me as patches, or push to your own repository and send me a link. (Drawings would be most welcome, and you\u0026rsquo;re obviously welcome to add your name to the list of typers)\nIf you need git storage, try repo.or.cz, or ask the T2 admins to install git :)\n","permalink":"https://lutzky.net/2007/10/31/computability-typed-lectures-and-tutorials/","summary":"All links in this post have been lost to the mists of time. I\u0026rsquo;ve kept it here out of pure nostalgia.\n I\u0026rsquo;m typing the lectures of the course 236343 Computability Theory this semester. Attached are my lectures notes in PDF form:\nComputability Lecture Notes Computability Tutorial Notes\nIf you also type the notes and would like to collaborate with me, I use a git repository stored here:\nhttp://yasmin.technion.ac.il/ohad/git/computability.git","title":"Computability - Typed Lectures and Tutorials"},{"content":"Reading some backlog on this blog, I found the following gem:\n It’s a sad state of affairs that people go ahead and limit access to their wireless network. I keep mine wide open - מי שאוכל לבד, מת לבד.\n Yeah\u0026hellip; not so anymore. For about four weeks (just a bit before the semester started), my net connection was working excrutiatingly slow. Now, we\u0026rsquo;re four roommates here, so we started blaming each other. But then I had a guess - I encrypted my connection with WPA/TKIP, and presto; the connection is now once again too fast for my browser to handle (\u0026hellip;which sent me back to Epiphany). Guys, if you mooch wi-fi, please\u0026hellip; be nice about it :(\n","permalink":"https://lutzky.net/2007/10/28/encrypted-my-wi-fi/","summary":"Reading some backlog on this blog, I found the following gem:\n It’s a sad state of affairs that people go ahead and limit access to their wireless network. I keep mine wide open - מי שאוכל לבד, מת לבד.\n Yeah\u0026hellip; not so anymore. For about four weeks (just a bit before the semester started), my net connection was working excrutiatingly slow. Now, we\u0026rsquo;re four roommates here, so we started blaming each other.","title":"Encrypted my Wi-fi"},{"content":"Writing multi-threaded applications in Python is often a headache because of the Global Interpreter Lock - only one Python thread can run at any given moment, which makes multi-threading useful only in the case where all modules but one actually run C code. However, thanks to the impressive new Python Magazine, I\u0026rsquo;ve stumbled across a package called processing, paraphrasing python\u0026rsquo;s built-in threading package. Essentially, the package provides an API identical to Python\u0026rsquo;s threading, but uses processes and pipes (or other mechanisms on non-posix operating systems) instead. What the magazine does not cover is the fact that this can also benefit GUI applications; updating a progressbar in the application doesn\u0026rsquo;t need to slow down heavy computations being done in a separate thread. To show how easy the integration is, take the following example which shows usage of either threads or processes at the user\u0026rsquo;s choice:\nimport processing import threading import Queue import time import gtk import gobject gtk.gdk.threads_init() USE_PROCESSING = False WORKER_DELAY = 1.0 GUI_DELAY = 0.5 def f(q, sq): print \u0026#34;Init other thread\u0026#34; i = 0 while sq.empty(): time.sleep(WORKER_DELAY) q.put(i) print \u0026#34;Other thread: %d\u0026#34; % i i += 1 def update_label((l, q, sq)): print \u0026#34;Updating label\u0026#34; try: i = q.get_nowait() l.set_text(\u0026#34;Number in thread: %d\u0026#34; % i) except Queue.Empty: l.set_text(\u0026#34;Queue is empty!\u0026#34;) except processing.Queue.Empty: l.set_text(\u0026#34;Queue is empty!\u0026#34;) return sq.empty() def close(window, sq): sq.put(True) gtk.main_quit() if __name__ == \u0026#39;__main__\u0026#39;: if USE_PROCESSING: q = processing.Queue() sq = processing.Queue() p = processing.Process(target = f, args = [q, sq]) else: q = Queue.Queue() sq = Queue.Queue() p = threading.Thread(target = f, args = [q, sq]) p.start() w = gtk.Window() l = gtk.Label() gobject.timeout_add(int(1000*GUI_DELAY), update_label, (l,q,sq)) w.add(l) w.connect(\u0026#39;destroy\u0026#39;, close, sq) w.show_all() print \u0026#34;Mainloop!\u0026#34; gtk.main() ","permalink":"https://lutzky.net/2007/10/13/on-threading-vs-processing/","summary":"Writing multi-threaded applications in Python is often a headache because of the Global Interpreter Lock - only one Python thread can run at any given moment, which makes multi-threading useful only in the case where all modules but one actually run C code. However, thanks to the impressive new Python Magazine, I\u0026rsquo;ve stumbled across a package called processing, paraphrasing python\u0026rsquo;s built-in threading package. Essentially, the package provides an API identical to Python\u0026rsquo;s threading, but uses processes and pipes (or other mechanisms on non-posix operating systems) instead.","title":"On Threading vs. Processing"},{"content":"My girlfriend just asked me what just might be the hardest question I\u0026rsquo;ve heard all semester; What do I like better, The Simpsons or beer?\n","permalink":"https://lutzky.net/2007/09/25/tough-question/","summary":"My girlfriend just asked me what just might be the hardest question I\u0026rsquo;ve heard all semester; What do I like better, The Simpsons or beer?","title":"Tough Question"},{"content":"I\u0026rsquo;ve been a very big proponent of Subversion so far, especially as a tool for collaborating on coding homework. However, I\u0026rsquo;ve recently been trying out Linus\u0026rsquo;s git. It\u0026rsquo;s very nice so far, and really seems to be catching on. Some good points:\n Fast as all hell (much faster than Bazaar, although I haven\u0026rsquo;t given that the proper attention) No need for a central server; hell, no need for an internet connection at all, everything can be done over USB keys or whatnot No real need to configure any special server; just install git on it Very nice alternative to configuring write-control for all of the users Very easy branching and merging, finally! SVN really shows its weakness here  One thing I couldn\u0026rsquo;t find out how to do is limiting read-access to git repositories without special server configuration. It would be nice if git had support for .htpasswd-compatible authentication, those are pretty easy to use.\n","permalink":"https://lutzky.net/2007/09/18/really-liking-this-git-thing/","summary":"I\u0026rsquo;ve been a very big proponent of Subversion so far, especially as a tool for collaborating on coding homework. However, I\u0026rsquo;ve recently been trying out Linus\u0026rsquo;s git. It\u0026rsquo;s very nice so far, and really seems to be catching on. Some good points:\n Fast as all hell (much faster than Bazaar, although I haven\u0026rsquo;t given that the proper attention) No need for a central server; hell, no need for an internet connection at all, everything can be done over USB keys or whatnot No real need to configure any special server; just install git on it Very nice alternative to configuring write-control for all of the users Very easy branching and merging, finally!","title":"Really liking this git thing"},{"content":"Lately I\u0026rsquo;ve been working on a project that has me using DBus a lot. After trying to figure out how to work DBus with C, and seeing how easy it is to do in Python, we figured we\u0026rsquo;d try to use embedded Python to do this. Fortunately, it\u0026rsquo;s very simple to use - especially thanks to this guide.\n It later turned out to be much easier to do in C, as described in Faster Languages.\n Now, we couldn\u0026rsquo;t have the Python code throwing exceptions outwards, so we had each function return, along with its actual return value (if any), a numeric code identifying the error. Unfortunately, this made the code get really big, really fast - especially once DBus exceptions are thrown into the mix. But once I learned how to use decorators, I accomplished something like this diff:\n+@wrap_exceptions((False,))  def checkSomething(): - global error_string - - error_string = \u0026#34;\u0026#34; - - try: - return (try_doing_something_over_dbus(), RET_OK) - except dbus.DBusException, e: - error_string = str(e) - if _nm_dbus_exception(e, \u0026#34;ServiceUnknown\u0026#34;): - return (False, RET_SERVICE_NOT_RUNNING) - return (False, RET_ERROR) - except Exception, e: - error_string = str(e) - return (False, RET_ERROR) - + return (try_doing_something_over_dbus(), RET_OK) Now, the duplicate DBus/non-DBus exception handling, global error_string, etc. - that happened in a lot of functions. Unfortunately, they didn\u0026rsquo;t all return their values in the same way. Some just returned a RET_VALUE, but most had other values before it in the tuple (not the ideal design, come to think of it\u0026hellip;). Here\u0026rsquo;s the decorator I wrote:\nclass wrap_exceptions: def __init__(self, prepend_tuple=None): self.prepend_tuple = prepend_tuple def tuplize(self, retval): # Change retval into a default tuple form, if necessary if not self.prepend_tuple: return retval return tuple(list(self.prepend_tuple) + [retval]) def __call__(self, f): def exception_wrapped(*args, **kargs): global error_string error_string = \u0026#34;\u0026#34; try: return f(*args, **kargs) except dbus.DBusException, e: # Check known DBus Exceptions first if _nm_dbus_exception(e, \u0026#34;ServiceUnknown\u0026#34;): return self.tuplize(RET_SERVICE_NOT_RUNNING) # Unknown exceptions (DBus) error_string = str(e) # Includes get_dbus_name return self.tuplize(RET_ERROR) except Exception, e: # Unknown exceptions (non-DBus) error_string = repr(e) return self.tuplize(RET_ERROR) return exception_wrapped ","permalink":"https://lutzky.net/2007/09/16/exception-handling-decorators-and-python/","summary":"Lately I\u0026rsquo;ve been working on a project that has me using DBus a lot. After trying to figure out how to work DBus with C, and seeing how easy it is to do in Python, we figured we\u0026rsquo;d try to use embedded Python to do this. Fortunately, it\u0026rsquo;s very simple to use - especially thanks to this guide.\n It later turned out to be much easier to do in C, as described in Faster Languages.","title":"Exception handling, decorators, and python"},{"content":"First of all, new iPods won\u0026rsquo;t work on Linux. Now, while it\u0026rsquo;s very obvious that the idea is to block competition against other music vendors, that makes it even less legitimate. Good thing we\u0026rsquo;re starting to see some very nice cheap players out there - I\u0026rsquo;ve been rather impressed with the Meizu M6 MiniPlayer.\nSecondly, they didn\u0026rsquo;t think of this: Indexed search within the \u0026ldquo;Open\u0026rdquo; dialog. It\u0026rsquo;s in Ubuntu Gutsy, and really makes desktop search (implemented with Tracker in gutsy) worthwhile. Especially when attaching files in GMail :)\n","permalink":"https://lutzky.net/2007/09/16/two-reasons-apple-suck/","summary":"First of all, new iPods won\u0026rsquo;t work on Linux. Now, while it\u0026rsquo;s very obvious that the idea is to block competition against other music vendors, that makes it even less legitimate. Good thing we\u0026rsquo;re starting to see some very nice cheap players out there - I\u0026rsquo;ve been rather impressed with the Meizu M6 MiniPlayer.\nSecondly, they didn\u0026rsquo;t think of this: Indexed search within the \u0026ldquo;Open\u0026rdquo; dialog. It\u0026rsquo;s in Ubuntu Gutsy, and really makes desktop search (implemented with Tracker in gutsy) worthwhile.","title":"Two reasons Apple suck"},{"content":"Despite having a critical midterm Sunday, as well as being sick, I could not, and should not have, give up on the NaNuchKa show. Some of the best music I\u0026rsquo;ve ever heard, no doubt, and with the unexpectedly intimate setting, I had the opportunity to get to know the truly incredible Yula after the show. They\u0026rsquo;re playing in Tel-Aviv today, at the Koltura, where I was supposed to\u0026hellip; Fantastic music, at any rate. Keep your ears open!\n","permalink":"https://lutzky.net/2007/07/27/nanuchka/","summary":"Despite having a critical midterm Sunday, as well as being sick, I could not, and should not have, give up on the NaNuchKa show. Some of the best music I\u0026rsquo;ve ever heard, no doubt, and with the unexpectedly intimate setting, I had the opportunity to get to know the truly incredible Yula after the show. They\u0026rsquo;re playing in Tel-Aviv today, at the Koltura, where I was supposed to\u0026hellip; Fantastic music, at any rate.","title":"NaNuchKa"},{"content":"Some things renew your faith in people, in the time you spend with them. Amazingly small things, considering their grand scope. Making things worse is known to be easy, and rebuilding is one of the hardest things we have to do in life. But sometimes, when things turn out to be completely different than they seem - new perspective is gained, old perspective is found again, and like something out of an old Disney cartoon, kitschy clouds of gloom make way for kitschy rays of sunshine. Complete with the smiling sun and everything. Like freakin' Roger Rabbit :)\nFinally, the story gets the ending it deserves.\n","permalink":"https://lutzky.net/2007/07/23/some-things-make-you-feel-good/","summary":"Some things renew your faith in people, in the time you spend with them. Amazingly small things, considering their grand scope. Making things worse is known to be easy, and rebuilding is one of the hardest things we have to do in life. But sometimes, when things turn out to be completely different than they seem - new perspective is gained, old perspective is found again, and like something out of an old Disney cartoon, kitschy clouds of gloom make way for kitschy rays of sunshine.","title":"Some things make you feel good"},{"content":"\nI present to you, the only creature which is more of a celebrity in the undergrad CS world than I am\u0026hellip; The Cow. (Paradox)\nEdit: Yes, that\u0026rsquo;s me. No, that\u0026rsquo;s not my bass. That\u0026rsquo;s a very good friend\u0026rsquo;s Fender Fat Stratocaster. So smooooth\u0026hellip;\nEdit: Photo by some chum ;)\n","permalink":"https://lutzky.net/2007/06/07/all-hail-the-cow/","summary":"Silly post about a cow called Paradox.","title":"All hail the cow!"},{"content":"Recording this morning was excellent! Awesome studio, not expensive at all, and a whole lot of fun. We\u0026rsquo;ve posted one song at our myspace page, and it seems that Lior has found an apt name for the CD (hint) ;)\nFor those of you who don\u0026rsquo;t want to visit Myspace (can\u0026rsquo;t blame you), here\u0026rsquo;s the song we posted, as well as an extra track (my personal favorite), Falsely Accused.\n The Deal Falsely Accused  I really want to point out the incredible recording studio we used - it\u0026rsquo;s a place called MIXסולידי in Tel Hanania. The man charged us very little, and the equipment and space are excellent. As you can probably tell, those are just demo recordings - recorded \u0026ldquo;live\u0026rdquo;, with plenty of mistakes, and with very minimal balance and sound tweaking. We\u0026rsquo;ll definitely be going back there to record a more serious version.\n","permalink":"https://lutzky.net/2007/06/02/some-music-posted-to-myspace/","summary":"Recording this morning was excellent! Awesome studio, not expensive at all, and a whole lot of fun. We\u0026rsquo;ve posted one song at our myspace page, and it seems that Lior has found an apt name for the CD (hint) ;)\nFor those of you who don\u0026rsquo;t want to visit Myspace (can\u0026rsquo;t blame you), here\u0026rsquo;s the song we posted, as well as an extra track (my personal favorite), Falsely Accused.\n The Deal Falsely Accused  I really want to point out the incredible recording studio we used - it\u0026rsquo;s a place called MIXסולידי in Tel Hanania.","title":"Some music posted to myspace"},{"content":"This Saturday we\u0026rsquo;re going to record our material, and hopefully a cover we\u0026rsquo;ve been working on - Venom\u0026rsquo;s excellent \u0026ldquo;School Daze\u0026rdquo;. We took some photos yesterday, visible here: http://www.myspace.com/switchblade777/photos/albums/my-photos/8265381\nWe have a show at the Koltura Club on July 12th.2\n  Link modified to accomodate mists of time.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Poster lost in the mists of time, show ended up being cancelled at the last moment.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://lutzky.net/2007/05/31/some-band-stuff/","summary":"This Saturday we\u0026rsquo;re going to record our material, and hopefully a cover we\u0026rsquo;ve been working on - Venom\u0026rsquo;s excellent \u0026ldquo;School Daze\u0026rdquo;. We took some photos yesterday, visible here: http://www.myspace.com/switchblade777/photos/albums/my-photos/8265381\nWe have a show at the Koltura Club on July 12th.2\n  Link modified to accomodate mists of time.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Poster lost in the mists of time, show ended up being cancelled at the last moment.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","title":"Some band stuff"},{"content":"Life is good, for the most part. And as a technology enthusiast, there are many new and cool things to see online. For example, there\u0026rsquo;s the new Schools site, part of the Vaya project which helps Israeli schools use Linux; this site uses the up-and-coming Lahak CMS, built on the Django framework, and looks very promising to the eyes of the bidi-lingual webmaster.\nHowever, some things just plain suck. One of them is myspace; today, in an attempt to make it more legible, I found that My Band\u0026rsquo;s Page implements all of its styling changes by a \u0026ldquo;style\u0026rdquo; tag hidden within the \u0026ldquo;Members\u0026rdquo; text block. Myspace doesn\u0026rsquo;t filter this out - nor does it provide any other means of changing the styling. This, combined with myspace\u0026rsquo;s horrid administration interface, makes editing incredible unwieldy. I\u0026rsquo;m considering opening another Wordpress site for the band here on this server\u0026hellip;\nAnd on that topic - Wordpress 2.2 is out. Shinier. Faster. Built-in support for sidebar modules. And K2 broke :(. I love K2\u0026hellip; Even though now that sidebars are implemented, the only thing I really need is a very simple template that allows me an ordinary, rectangular logo. Update: I didn\u0026rsquo;t even notice, but the excellent K2 guys released a fix. However, it seems that when you copy the plugin they created directly, it inadvertantly adds a space to the end of the file - and PHP proceeds to barf. Hard to believe people still use this junk to develop websites\u0026hellip; They should use other junk.\n","permalink":"https://lutzky.net/2007/05/17/myspace-sucks/","summary":"Life is good, for the most part. And as a technology enthusiast, there are many new and cool things to see online. For example, there\u0026rsquo;s the new Schools site, part of the Vaya project which helps Israeli schools use Linux; this site uses the up-and-coming Lahak CMS, built on the Django framework, and looks very promising to the eyes of the bidi-lingual webmaster.\nHowever, some things just plain suck. One of them is myspace; today, in an attempt to make it more legible, I found that My Band\u0026rsquo;s Page implements all of its styling changes by a \u0026ldquo;style\u0026rdquo; tag hidden within the \u0026ldquo;Members\u0026rdquo; text block.","title":"Myspace sucks"},{"content":"By now I\u0026rsquo;ve lost count of how long ago my last class was. The strike has begun immediately after passover, and is certainly beginning to take its toll. For one thing, I have no homework deadlines - a rare situation indeed for the Technion student. Furthermore, contemplations are rising about whether or not this coming summer semester will be held, as the current semester will most likely leak into it. This is of special interest to me, as I\u0026rsquo;m behind on my degree, which is problematic because of my military scholarship. This is shaping up to be the second time in which, while I\u0026rsquo;ve been authorized by the military to take a summer semester for completion, I am not able to. However, one cannot trivially dismiss this strike; in a country which is known worldwide mostly for its technological exports and frequent bloodbaths, one shouldn\u0026rsquo;t take the matter of tuition lightly.\nThe vacation was not, however, boring - I got to spend a lot of time with my lovely girlfriend, a chance to see friends I have not seen in a long time, and a lot of posts racked up in various forums. The vacation actually expanded far enough to contain independence day, so I managed to experience the closest thing to a hangover I\u0026rsquo;d ever had (But that was some great scotch). Actually, independence day could have been truly superb; the whole thing got me thinking about what the perfect night out would be: It\u0026rsquo;s obviously best with my girlfriend. It would probably start with a rock show of sorts, continue with food and beer, and end in my girlfriend\u0026rsquo;s bed. Better yet - if I\u0026rsquo;m in the show. Better still - if there\u0026rsquo;s no reason to get up early the following day.\nAnother item of interest is that I\u0026rsquo;ve joined a band. Hopefully I\u0026rsquo;ll be able to keep up the 3-hours-on-Saturday rehearsals. It\u0026rsquo;s a \u0026ldquo;Trash Metal\u0026rdquo; band which has evidently had really bad experience with bass players. Unfortunately, we seem to have a myspace page. It looks\u0026hellip; myspaceish. However, I really think the group has potential, as well as excellent influences. Furthermore, I\u0026rsquo;m an attention whore :D. Hopefully I\u0026rsquo;ll be able to help influence the band into more of a heavy-metal direction by harassing them with melodic basslines.\nVery little geek news this time, other than the fact that Feisty Fawn is out. My verdict - get it. It\u0026rsquo;s awesome. Period. Suspend works much better, NetworkManager is now installed by default, a lot of things have really been polished, and - can you believe it - Sudoku :)! If you already run Ubuntu, I\u0026rsquo;d advise against using the update manager - it works, but it takes a long time, and cannot run unattended. Also, a word of caution to server admins though - sqlite3 is the new default, so if you have sqlite2 databases you\u0026rsquo;ll need to convert them (use the sqlite and sqlite3 binaries to do this) - otherwise you\u0026rsquo;ll get \u0026ldquo;file is not a database, or is encrypted\u0026rdquo; errors.\nWhew - that\u0026rsquo;s much better. My thoughts have been depleted into the bits and bytes before you. I\u0026rsquo;ll just plug a friend\u0026rsquo;s blog and hit the publish button now ;)\n","permalink":"https://lutzky.net/2007/04/24/on-the-matter-of-a-really-long-vacation/","summary":"By now I\u0026rsquo;ve lost count of how long ago my last class was. The strike has begun immediately after passover, and is certainly beginning to take its toll. For one thing, I have no homework deadlines - a rare situation indeed for the Technion student. Furthermore, contemplations are rising about whether or not this coming summer semester will be held, as the current semester will most likely leak into it. This is of special interest to me, as I\u0026rsquo;m behind on my degree, which is problematic because of my military scholarship.","title":"On the matter of a really long vacation"},{"content":"A lot of people ask me how to change the default operating system booted after installing Linux. The answer they get in Ubuntu\u0026rsquo;s case, \u0026ldquo;Edit /boot/grub/menu.lst, it\u0026rsquo;s self-explanatory\u0026rdquo;, is often unsatisfactory. Attached is the solution :)\n Actual script lost in the mists of time\u0026hellip;\n Download the file, open a terminal, and run gksudo python grubmenu.py\nI\u0026rsquo;ll try and make a package of this soon, so it becomes a menu entry and that much easier to use.\n","permalink":"https://lutzky.net/2007/04/19/grub-menu-lst-editor/","summary":"A lot of people ask me how to change the default operating system booted after installing Linux. The answer they get in Ubuntu\u0026rsquo;s case, \u0026ldquo;Edit /boot/grub/menu.lst, it\u0026rsquo;s self-explanatory\u0026rdquo;, is often unsatisfactory. Attached is the solution :)\n Actual script lost in the mists of time\u0026hellip;\n Download the file, open a terminal, and run gksudo python grubmenu.py\nI\u0026rsquo;ll try and make a package of this soon, so it becomes a menu entry and that much easier to use.","title":"Grub menu.lst editor"},{"content":"Why was it down, you ask? Well, it was out here in the lab, because of a shortage of network ports in the server room. From the acpid log:\n[Sun Apr 15 18:53:07 2007] received event \u0026quot;button/power PWRF 00000080 00000001\u0026quot;\nThat is, at 18:53, someone simply pushed the power button. The server promptly closed all processes and properly shut itself down. I\u0026rsquo;ve moved it into the server room now\u0026hellip;\n","permalink":"https://lutzky.net/2007/04/16/yasmin-back-up/","summary":"Why was it down, you ask? Well, it was out here in the lab, because of a shortage of network ports in the server room. From the acpid log:\n[Sun Apr 15 18:53:07 2007] received event \u0026quot;button/power PWRF 00000080 00000001\u0026quot;\nThat is, at 18:53, someone simply pushed the power button. The server promptly closed all processes and properly shut itself down. I\u0026rsquo;ve moved it into the server room now\u0026hellip;","title":"Yasmin back up"},{"content":"The more I use Python, the nicer it becomes. I\u0026rsquo;m currently working on a project for a course, which involves somewhat heavy-duty database and algorithm work. Python is my language of choice for it - let\u0026rsquo;s hope it works out well.\nIn the meantime, I\u0026rsquo;ve found a really nice python shell called iPython (available in apt) - it adds a bunch of stuff to the python shell which I sorely missed from irb - autocompletion, auto-indentation, and - it seems - adds a whole lot more.\nLooks like I\u0026rsquo;ll have to check django out as well. I\u0026rsquo;ve been working with Ruby on Rails for quite a while now (and that\u0026rsquo;s how I got introduced to Ruby in the first place). Odd as it may be\u0026hellip; do I have a new favorite language?\n","permalink":"https://lutzky.net/2007/03/04/ipython/","summary":"The more I use Python, the nicer it becomes. I\u0026rsquo;m currently working on a project for a course, which involves somewhat heavy-duty database and algorithm work. Python is my language of choice for it - let\u0026rsquo;s hope it works out well.\nIn the meantime, I\u0026rsquo;ve found a really nice python shell called iPython (available in apt) - it adds a bunch of stuff to the python shell which I sorely missed from irb - autocompletion, auto-indentation, and - it seems - adds a whole lot more.","title":"IPython"},{"content":"A very neat find for those of you who want to use Jabber from within the Technion, but with your client of choice rather than a web-based one: Many Jabber servers, including Google Talk, support using Port 443 over SSL. Since the Technion does not block outbound SSL connections, this will work there as well. Be sure to mark the appropriate \u0026lsquo;Use old SSL protocol\u0026rsquo; option in your jabber client (that\u0026rsquo;s what it\u0026rsquo;s called in gaim and pidgin, at any rate).\n","permalink":"https://lutzky.net/2007/02/27/using-jabber-from-within-the-technion/","summary":"A very neat find for those of you who want to use Jabber from within the Technion, but with your client of choice rather than a web-based one: Many Jabber servers, including Google Talk, support using Port 443 over SSL. Since the Technion does not block outbound SSL connections, this will work there as well. Be sure to mark the appropriate \u0026lsquo;Use old SSL protocol\u0026rsquo; option in your jabber client (that\u0026rsquo;s what it\u0026rsquo;s called in gaim and pidgin, at any rate).","title":"Using Jabber from within the Technion"},{"content":"Check that the RAID it supports is actual Raid. My experience today:\n Decide that secondary server should gradually become more and more primary Decide that since it has two 160GB hard drives and built-in RAID, we should use that for mirroring Mail (both!) users of the secondary server that it\u0026rsquo;ll be down for rebuilding Set up RAID array from BIOS, clearing all old information Insert installation CD Notice that installation still sees two hard drives Discover that built-in NVRaid is actually software RAID Disable built in RAID in favor of LVM, proceed to reinstall :(  ","permalink":"https://lutzky.net/2007/02/26/before-reinstalling-your-server-for-raid/","summary":"Check that the RAID it supports is actual Raid. My experience today:\n Decide that secondary server should gradually become more and more primary Decide that since it has two 160GB hard drives and built-in RAID, we should use that for mirroring Mail (both!) users of the secondary server that it\u0026rsquo;ll be down for rebuilding Set up RAID array from BIOS, clearing all old information Insert installation CD Notice that installation still sees two hard drives Discover that built-in NVRaid is actually software RAID Disable built in RAID in favor of LVM, proceed to reinstall :(  ","title":"Before reinstalling your server for RAID"},{"content":"I brought my Fender Squier Jazz Bass up to my Technion apartment. I hope it won\u0026rsquo;t have too much of an adverse effect on my studying\u0026hellip; playing it (loud) is great for stress, and I\u0026rsquo;m taking a jazz improvisation course next semester.\nBy the way - if any of you record with one of these, I highly recommend Arour, using a low-pass LADSPA filter. Also, activating both pickups on about 80% does wonders against hum if you connect directly.\n","permalink":"https://lutzky.net/2007/02/25/bass-guitar/","summary":"I brought my Fender Squier Jazz Bass up to my Technion apartment. I hope it won\u0026rsquo;t have too much of an adverse effect on my studying\u0026hellip; playing it (loud) is great for stress, and I\u0026rsquo;m taking a jazz improvisation course next semester.\nBy the way - if any of you record with one of these, I highly recommend Arour, using a low-pass LADSPA filter. Also, activating both pickups on about 80% does wonders against hum if you connect directly.","title":"Bass guitar"},{"content":"I\u0026rsquo;ve converted my Antigibberish script1 (converts \u0026ldquo;broken hebrew\u0026rdquo; into proper hebrew, useful for sent-offline ICQ messages) to Python\u0026hellip; it\u0026rsquo;s quite a nice language, and the interpreter is FAST! I\u0026rsquo;m really torn between it and Ruby :(\n  Used to have a copy of antigibberish.py, but it\u0026rsquo;s been lost in the mists of time. It used to do the equivalent of this:\niconv -f utf-8 -t iso8859-1 | iconv -f iso8859-8 -t utf-8 \u0026#160;\u0026#x21a9;\u0026#xfe0e;   ","permalink":"https://lutzky.net/2007/02/25/really-liking-the-whole-python-thing/","summary":"I\u0026rsquo;ve converted my Antigibberish script1 (converts \u0026ldquo;broken hebrew\u0026rdquo; into proper hebrew, useful for sent-offline ICQ messages) to Python\u0026hellip; it\u0026rsquo;s quite a nice language, and the interpreter is FAST! I\u0026rsquo;m really torn between it and Ruby :(\n  Used to have a copy of antigibberish.py, but it\u0026rsquo;s been lost in the mists of time. It used to do the equivalent of this:\niconv -f utf-8 -t iso8859-1 | iconv -f iso8859-8 -t utf-8 \u0026#160;\u0026#x21a9;\u0026#xfe0e;   ","title":"Really liking the whole Python thing"},{"content":"def factor(grade, params = {}) return 100 if params.empty? # Optimistic, eh? case params[:type] when :pass return 55 when :fail return 54 when :root params[:gamma] = 0.5 end grade = grade.to_f return params[:proc].call(grade) if params[:proc] grade *= params[:coefficient] if params[:coefficient] if params[:gamma] grade /= 100 grade **= params[:gamma] grade *= 100 end if params[:offset] grade += params[:offset] end return grade if params[:idnoclip] [ grade, 100 ].min end ","permalink":"https://lutzky.net/2007/02/14/heres-hoping/","summary":"def factor(grade, params = {}) return 100 if params.empty? # Optimistic, eh? case params[:type] when :pass return 55 when :fail return 54 when :root params[:gamma] = 0.5 end grade = grade.to_f return params[:proc].call(grade) if params[:proc] grade *= params[:coefficient] if params[:coefficient] if params[:gamma] grade /= 100 grade **= params[:gamma] grade *= 100 end if params[:offset] grade += params[:offset] end return grade if params[:idnoclip] [ grade, 100 ].min end ","title":"Here's hoping"},{"content":"In the Haifa Bay Central bus station (מרכזית המפרץ), it\u0026rsquo;s possible to get an internet connection. HTTPS works automatically, and setting the proxy to proxy.technion.ac.il:8080 works for HTTP. I was unsuccessful in using corkscrew to get SSH connections to tunnel over it as well, but perhaps there is still a way.\n","permalink":"https://lutzky.net/2007/02/10/internet-in-haifa-bay-central/","summary":"In the Haifa Bay Central bus station (מרכזית המפרץ), it\u0026rsquo;s possible to get an internet connection. HTTPS works automatically, and setting the proxy to proxy.technion.ac.il:8080 works for HTTP. I was unsuccessful in using corkscrew to get SSH connections to tunnel over it as well, but perhaps there is still a way.","title":"Internet in Haifa Bay Central"},{"content":"This man has some beautiful design ideas for the Linux desktop.\n","permalink":"https://lutzky.net/2007/02/08/beautiful-ideas/","summary":"This man has some beautiful design ideas for the Linux desktop.","title":"Beautiful ideas"},{"content":"I\u0026rsquo;ve heard the latest Security Now, regarding the debate between Dave Marsh and Peter Guttman on DRM in Windows Vista. While a few good points were made, the major one - in my opinion - was not.\nDRM, in a practical sense, is deeply flawed: The idea is to give you your media - say, a WMA piece of music - and a program to play it with - say, Windows Media Player - but encrypt the media. Now, naturally, Media Player will need the decryption key for the media, and the idea is that Media Player will verify that you are allowed to listen to the song, and only then decrypt it - as it is played.\nHowever, something is clearly wrong here - both the encrypted media and the decryption key are sitting locally on your computer. It\u0026rsquo;s like giving you a locked box, as well as a butler (which will live in your house, where you presumably have a shotgun) with the key, and telling the butler not to open the box for anyone unauthorized. That is, you can open the Windows Media Player executable with your favorite hex editor, and dig away for the key. This is, of course, very complicated to do - but there are advanced ways of finding these keys, and once they\u0026rsquo;re found - they\u0026rsquo;re out. That\u0026rsquo;s why we keep hearing about WMA and iTunes' equivalent format being cracked every once in a while, when they change it. No matter how sophisticated the DRM, you still get both the locked box and the key. They might build bigger butlers, but we can build deadlier shotguns. (Sorry for the violent analogy, but DRM kinda does that to me ;))\nSo, what can the *AA/Microsoft/Apple/DRM scapegoats inc. do about this? Well, they could supposedly have Windows recognize that you are trying to view the Windows Media Player executable, and stop you (I\u0026rsquo;d be surprised if they haven\u0026rsquo;t done this yet). However, currently you can still, for example, run Linux on the computer, and use that to view the executable. And if, by some crazy coincidence, all variants of Linux stop you from viewing the executable - you can pick your favorite, change the source code so it doesn\u0026rsquo;t, and use that. To stop you from running whatever unprotected operating system you want, changes to the hardware must be made.\nThis is exactly what worries me about Vista. For the first time, we are seeing major effects like HDMI/HDCP, where the operating system interacts with the hardware directly to figure out exactly what the user is or isn\u0026rsquo;t allowed to do. Also, Vista boasts the \u0026ldquo;Trustworthy Computing\u0026rdquo; project, which is all too reminiscent of \u0026ldquo;Trusted Computing\u0026rdquo; - a project in which, through integrating protection from the bottom of the hardware (with a TPM, Trusted Platform Module chip) to the top of the software, the computer verifies that it is only running authorized operating systems, which run only authorized programs.\nNow, the media companies would love this. Say HD-DVD\u0026rsquo;s been completely cracked, and an alternative, open-source, unprotected player has been released. If your system is TPM-protected, it simply won\u0026rsquo;t allow this software to run. Your own compiled applications can be forbidden from running as well, seeing as their source code just might be the HD-DVD cracking code. Unauthorized operating systems would, naturally, not be allowed to run.\nNow, I\u0026rsquo;m not explicitly blaming Microsoft for this. Fact of the matter is, the protection they\u0026rsquo;ve built into Vista, although probably (for the reasons I\u0026rsquo;ve mentioned) insufficient, was required by the media companies in order for HD-DVD support to be (legally/technically) possible in Vista. Would Microsoft go so far as to enable the horror scenario I\u0026rsquo;ve pictured above? Probably not. But I do believe we all need to be aware of the risks, just to be on the safe side.\n","permalink":"https://lutzky.net/2007/02/07/why-vista-worries-me/","summary":"I\u0026rsquo;ve heard the latest Security Now, regarding the debate between Dave Marsh and Peter Guttman on DRM in Windows Vista. While a few good points were made, the major one - in my opinion - was not.\nDRM, in a practical sense, is deeply flawed: The idea is to give you your media - say, a WMA piece of music - and a program to play it with - say, Windows Media Player - but encrypt the media.","title":"Why Vista worries me"},{"content":"Well, penny knows. But I have proof she knows\u0026hellip;\nhttp://www.wisdom.weizmann.ac.il/~naor/PUZZLES/waldo.html\n","permalink":"https://lutzky.net/2007/02/05/i-know-where-waldo-is/","summary":"Well, penny knows. But I have proof she knows\u0026hellip;\nhttp://www.wisdom.weizmann.ac.il/~naor/PUZZLES/waldo.html","title":"I know where waldo is"},{"content":"Everyone knew this was going to be an interesting one to watch. Die-hard Microsoft fans were sure Vista would be the final nail in the Open Source coffin, die-hard Linux fans were sure that the release would be Microsoft\u0026rsquo;s demise. Myself - I\u0026rsquo;m sitting and enjoying the show.\nIt\u0026rsquo;s always very interesting to show Beryl to non-Linux users. They are almost always highly impressed, and are often completely in shock that Linux is a graphical system - many people still believe Linux is command-line only. But the funniest thing is that they always seem to care more about useless, spinning, transparent desktop cubes than, say, security. This holds for Vista\u0026rsquo;s flashy new graphics, as well - mainstream media seems to be focusing on Vista\u0026rsquo;s GUI a lot more than they are about its controversial new security features. Very interesting, keeping in mind that Windows has never been \u0026ldquo;not pretty enough\u0026rdquo; in consumer\u0026rsquo;s eyes, but rather too unstable or virus-prone.\nControversial security? Yup. And I\u0026rsquo;m not even talking about the actually controversy-worth topics, like DRM\u0026hellip; I\u0026rsquo;m talking about the system asking if you\u0026rsquo;re sure you want to set the clock. I\u0026rsquo;ve heard more noise about this than the fact that all of Vista\u0026rsquo;s new features pale in comparison to 7-year-old OS X which, incidentally, also \u0026ldquo;asks if you\u0026rsquo;re sure\u0026rdquo; that you want to set the clock. Nobody complains about that however. Why? In my opinion - it\u0026rsquo;s the password prompt.\nJust as people complained about Windows XP\u0026rsquo;s \u0026ldquo;Fisher-Price\u0026rdquo; theme, they\u0026rsquo;re now complaining about being treated like little kids. \u0026ldquo;Are you sure you want to set your clock?\u0026rdquo; - how condescending of the operating system. The reason it works well in Linux and OS X is that the system phrases the exact same question completely differently - \u0026ldquo;You are attempting to run \u0026ldquo;system-config-date\u0026rdquo; which requires administrative privileges\u0026rdquo;. Cryptic, right? I think they changed that for Ubuntu, too (I\u0026rsquo;m writing this off a Fedora box). But most users won\u0026rsquo;t have a hard time understanding that this, coupled with the password entry box, means that the system wants to make sure you are indeed someone allowed to set the clock. Hell, I believe that most people won\u0026rsquo;t have a problem making the logical leap from there to \u0026ldquo;hmm, perhaps setting the clock (im)properly can really mess up my system\u0026rdquo;. Either way, it\u0026rsquo;s much more pleasing than Vista\u0026rsquo;s seemingly endless, senseless sequences of \u0026ldquo;Are you sure?\u0026rdquo; dialog boxes. A password prompt like this tells the user - \u0026ldquo;You\u0026rsquo;re opening the hood here, watch your step\u0026rdquo;, the idea being that the user takes a hint and, realizing he has arrived at a password-protected part of his system, will indeed watch his proverbial step.\nBut nobody is going to ditch windows over a couple of dialog boxes. There are much more interesting reasons to do that - I\u0026rsquo;ve heard of much instability, inavailability of drivers, confusions in the user interface\u0026hellip; all of the things that Microsoft worked very hard to get rid of when XP was released, making Vista look like a step back. But most of all - it\u0026rsquo;s the timing. Vista\u0026rsquo;s 2007 release has given the world time to hear about shiny new Linux distributions, macs that run all of their old software, indexing services at least as powerful as Vista\u0026rsquo;s (now that WinFS has gone down the drain), more advanced graphical \u0026ldquo;shinyness\u0026rdquo; which works on older systems, and the horrors of DRM (thanks for that one, Sony). With nothing really new to give them, a high price tag (because it often includes a new computer), and several years of not being in the habit of buying a new OS, people have very little motivation to upgrade to Vista.\nBut I don\u0026rsquo;t think that Microsoft and Windows are going anywhere, anytime soon. I do think Vista\u0026rsquo;s lost the battle - but to XP. Vista\u0026rsquo;s launch made people realize how successful XP was as an operating system, and the sheer momentum will keep people there. If Microsoft locks people out of technologies like DirectX 10 by making them Vista-only, this will keep people leaking away to OS X and Linux. But in the immediate future, I don\u0026rsquo;t think any OS will be taking a serious bite out of the XP userbase.\n","permalink":"https://lutzky.net/2007/02/04/on-vista/","summary":"Everyone knew this was going to be an interesting one to watch. Die-hard Microsoft fans were sure Vista would be the final nail in the Open Source coffin, die-hard Linux fans were sure that the release would be Microsoft\u0026rsquo;s demise. Myself - I\u0026rsquo;m sitting and enjoying the show.\nIt\u0026rsquo;s always very interesting to show Beryl to non-Linux users. They are almost always highly impressed, and are often completely in shock that Linux is a graphical system - many people still believe Linux is command-line only.","title":"On Vista"},{"content":"This is absolutely antique (2000), but it\u0026rsquo;s good to hear an artist with a clue.\nhttp://archive.salon.com/tech/feature/2000/06/14/love/print.html\n","permalink":"https://lutzky.net/2007/02/02/courtney-love-on-piracy/","summary":"This is absolutely antique (2000), but it\u0026rsquo;s good to hear an artist with a clue.\nhttp://archive.salon.com/tech/feature/2000/06/14/love/print.html","title":"Courtney Love on Piracy"},{"content":"If you\u0026rsquo;re like me, and don\u0026rsquo;t use Gnome or KDE, then you probably use the pmount or pmount-hal applications to mount removable media. Here\u0026rsquo;s a neat thing to add to your .bash_aliases:\nfunction pmh { pmount-hal $1 UDI=`hal-find-by-property --key block.device --string $1` cd \u0026#34;`hal-get-property --udi $UDI--key volume.mount_point`\u0026#34; } ","permalink":"https://lutzky.net/2007/02/01/pmount-hal-cd/","summary":"If you\u0026rsquo;re like me, and don\u0026rsquo;t use Gnome or KDE, then you probably use the pmount or pmount-hal applications to mount removable media. Here\u0026rsquo;s a neat thing to add to your .bash_aliases:\nfunction pmh { pmount-hal $1 UDI=`hal-find-by-property --key block.device --string $1` cd \u0026#34;`hal-get-property --udi $UDI--key volume.mount_point`\u0026#34; } ","title":"Pmount-hal + cd"},{"content":"I do type mesmerizingly fast, though\u0026hellip; :)\nI am told these were scattered around Taub\u0026hellip; I haven\u0026rsquo;t been there to day, but it feels good to be infamous.\n","permalink":"https://lutzky.net/2007/01/31/i-do-not-kick-puppies/","summary":"I do type mesmerizingly fast, though\u0026hellip; :)\nI am told these were scattered around Taub\u0026hellip; I haven\u0026rsquo;t been there to day, but it feels good to be infamous.","title":"I do NOT kick puppies!"},{"content":"My lecture slides. Have a peek if you like :)\nsybilproof Reputation Mechanisms - Seminar\n","permalink":"https://lutzky.net/2007/01/30/i-might-need-these-tomorrow/","summary":"My lecture slides. Have a peek if you like :)\nsybilproof Reputation Mechanisms - Seminar","title":"I might need these tomorrow..."},{"content":"When approaching a port, the Scotsman:\n You will never find a more wretched hive of scum and villany. And the crab cakes ain\u0026rsquo;t too bad, either!\n Later on:\n  Is it fast? It sure is. But it\u0026rsquo;s gonna cost ya - 10,000 up-front. 10,000? We could buy our own ship for that! But who\u0026rsquo;s gonna sail it? I can. I piloted (some smaller kind of ship) back when I was a kid.   (and if you haven\u0026rsquo;t seen Star Wars, you\u0026rsquo;re just not gonna get it)\n","permalink":"https://lutzky.net/2007/01/30/samurai-jack-ingenious/","summary":"When approaching a port, the Scotsman:\n You will never find a more wretched hive of scum and villany. And the crab cakes ain\u0026rsquo;t too bad, either!\n Later on:\n  Is it fast? It sure is. But it\u0026rsquo;s gonna cost ya - 10,000 up-front. 10,000? We could buy our own ship for that! But who\u0026rsquo;s gonna sail it? I can. I piloted (some smaller kind of ship) back when I was a kid.","title":"Samurai Jack - Ingenious!"},{"content":"My new work desktop has a GeForce 4 MX, so I naturally installed Beryl on it. The graphics card has relatively little RAM, so it finds handling my 1280x1024 resolution difficult when additional texture memory is needed - so using something like Firefox really slows it down when Beryl is activated, making me keep it off most of the time. However, for coding, I\u0026rsquo;m finding that Beryl is very useful - it actually helps me that the code windows are transparent, so that I can see what\u0026rsquo;s underneath them, and the \u0026ldquo;Expose\u0026rdquo; effect still leaves text legible, which is great for reading off a lot of terminals at once. So is Beryl\u0026hellip; a programmer\u0026rsquo;s tool?\n","permalink":"https://lutzky.net/2007/01/25/3d-effects-for-coders/","summary":"My new work desktop has a GeForce 4 MX, so I naturally installed Beryl on it. The graphics card has relatively little RAM, so it finds handling my 1280x1024 resolution difficult when additional texture memory is needed - so using something like Firefox really slows it down when Beryl is activated, making me keep it off most of the time. However, for coding, I\u0026rsquo;m finding that Beryl is very useful - it actually helps me that the code windows are transparent, so that I can see what\u0026rsquo;s underneath them, and the \u0026ldquo;Expose\u0026rdquo; effect still leaves text legible, which is great for reading off a lot of terminals at once.","title":"3D effects for coders?"},{"content":"Sometimes imperfections in Software drive me nuts. It\u0026rsquo;s what drove me away from Windows. It\u0026rsquo;s what keeps me switching back and forth between desktop environments. It\u0026rsquo;s what has me wasting a lot of time getting the software to do what I want, instead of getting anything done. I even have two particularily good examples.\nFirefox and Opera are my two favorite browsers. Opera is actually not as good, in my taste, as Firefox. Firefox\u0026rsquo;s slew of extensions (especially my latest favorites - Del.icio.us bookmarks and Firebug), better font handling (on Linux) and Open-Source nature keep it ahead, if all things were equal. However, Opera is much faster on my laptop. Way faster. And with the kind of browsing I usually do - zillions of tabs open and all, that difference counts.\nMy other good example is LaTeX. I have the Beamer package, which makes absolutely stunning presentations in my favorite style of document creation - writing and compiling source code. However, one little thing drives me nuts about it - the symbols in math mode, even if I set it to Serif (Beamer uses sans-serif fonts by default), are not the default ones, which I prefer. For example, the symbol for \u0026ldquo;\\in\u0026rdquo; (a member of a set) looks horrible in my opinion. This tiny little thing had me chasing font preferences around for half an hour, to no avail.\nGraphviz. Ruby on Rails. Networkmanager. Openbox. IVMan. The list goes on\u0026hellip; almost every piece of software I use has a little imperfection - not necessarily a bug, usually a missing features - that drives me crazy. Maybe I should quit my degree so I have time to fix all of those?\n","permalink":"https://lutzky.net/2007/01/25/software-perfection-lost-in-the-details/","summary":"Sometimes imperfections in Software drive me nuts. It\u0026rsquo;s what drove me away from Windows. It\u0026rsquo;s what keeps me switching back and forth between desktop environments. It\u0026rsquo;s what has me wasting a lot of time getting the software to do what I want, instead of getting anything done. I even have two particularily good examples.\nFirefox and Opera are my two favorite browsers. Opera is actually not as good, in my taste, as Firefox.","title":"Software Perfection - Lost in the details"},{"content":"I\u0026rsquo;m going home for the weekend, as usual. Unfortunately, the first bus of my route comes by at highly unpredictable times - I\u0026rsquo;ve had it be an hour late on me once. There are plenty of Wi-fi networks around the station - either WPA, WEP or MAC-whitelisted\u0026hellip; fortunately, someone was using the latter long enough for me to catch him with Kismet. Thank you, stranger! :)\nIt\u0026rsquo;s a sad state of affairs that people go ahead and limit access to their wireless network. I keep mine wide open - מי שאוכל לבד, מת לבד.\n","permalink":"https://lutzky.net/2007/01/25/waiting-for-the-bus/","summary":"I\u0026rsquo;m going home for the weekend, as usual. Unfortunately, the first bus of my route comes by at highly unpredictable times - I\u0026rsquo;ve had it be an hour late on me once. There are plenty of Wi-fi networks around the station - either WPA, WEP or MAC-whitelisted\u0026hellip; fortunately, someone was using the latter long enough for me to catch him with Kismet. Thank you, stranger! :)\nIt\u0026rsquo;s a sad state of affairs that people go ahead and limit access to their wireless network.","title":"Waiting for the bus"},{"content":"Just finished downloading an episode of American Dad off Bittorrent. TV has ancient episodes of Family Guy. Took about an hour though\u0026hellip; I tells ya, I\u0026rsquo;d pay for this kind of service if it were faster\u0026hellip; ;)\n","permalink":"https://lutzky.net/2007/01/23/alright-american-dad/","summary":"Just finished downloading an episode of American Dad off Bittorrent. TV has ancient episodes of Family Guy. Took about an hour though\u0026hellip; I tells ya, I\u0026rsquo;d pay for this kind of service if it were faster\u0026hellip; ;)","title":"Alright, American Dad!"},{"content":"Myself, I\u0026rsquo;m a Ruby hacker. I send everyone within earshot to TryRuby, code my sites using Rails, am surprised that I\u0026rsquo;m using a php-based blog\u0026hellip; you get the picture. Ruby is sometimes called the Japanese Python, and comparisons are inevitable. I know very little about Python, but I do know that\u0026hellip;\n It has a larger community More GUI applications are written in it More bindings are available for it Its interpreter is much faster Not a far inferior language  Ruby certainly does have its advantages over it - trivial class expansion, extremely concise syntax, seemingly better-suited for heavy usage of closures, and Matz. Ya gotta love Matz.\nI will be giving Python a try soon\u0026hellip; I love learning new programming languages. That\u0026rsquo;s why I\u0026rsquo;m taking Programming Languages this coming semester.\n","permalink":"https://lutzky.net/2007/01/23/as-for-python/","summary":"Myself, I\u0026rsquo;m a Ruby hacker. I send everyone within earshot to TryRuby, code my sites using Rails, am surprised that I\u0026rsquo;m using a php-based blog\u0026hellip; you get the picture. Ruby is sometimes called the Japanese Python, and comparisons are inevitable. I know very little about Python, but I do know that\u0026hellip;\n It has a larger community More GUI applications are written in it More bindings are available for it Its interpreter is much faster Not a far inferior language  Ruby certainly does have its advantages over it - trivial class expansion, extremely concise syntax, seemingly better-suited for heavy usage of closures, and Matz.","title":"As for Python"},{"content":" This post is written in Hebrew, which was the blog\u0026rsquo;s language at the time.\n קצת גיקיות יתרה, ברשותכם ;)\nהתקנתי את הגירסה מ-CVS של מנהל החלונות האהוב עליי, Openbox, לקראת הגרסה המתעתדת לצאת 3.3, ומאוד התרשמתי לטובה: ‏\n נוספה תמיכה ב-Pango, אז עברית סוף-סוף עובדת כמו שצריך (יש לקמפל עם הדגל with-pango הפאץ' ל-Split gradients נכנס, מה שנותן ל-Themes ממש יפים לעבוד. מה שכן, הם שינו את שם ההגדרה מ-\u0026ldquo;split\u0026rdquo; ל-\u0026ldquo;splitvertical\u0026rdquo;, אז צריך לשנות את זה בקובץ themerc של כל theme רלוונטי מצ\u0026quot;ב תמונת-מסך. שמייח :)  (Screenshot was saved on Imageshack, and had been deleted)\nעריכה: אני רוצה גם לציין לשבח את Obmenu, תוכנה שמאוד מקלה על עריכת התפריטים של Openbox.\n","permalink":"https://lutzky.net/2006/08/26/openbox-cvs/","summary":"(Hebrew) A bit of excessive geekery","title":"Openbox CVS"},{"content":" This post is written in Hebrew, which was the blog\u0026rsquo;s language at the time. Context: 2006 Lebanon War\n החבר\u0026rsquo;ה הטובים ב-lgf מראים - הפלא ופלא - איך בהשוואה בין נזק פגיעות ישירות של קטיושות וטילי אוויר-קרקע ישראליים, הקטיושה עושה הרבה יותר נזק.\nבנוסף, אל תכנסו לבלוג של אחמדיניג\u0026rsquo;אד עם אקספלורר. זה מסוכן.\nמוות לקיצונים ;)\n","permalink":"https://lutzky.net/2006/08/15/katyusha-damage_copy/","summary":"(Hebrew) Comparative Katyusha damage","title":"אהבתי את שני אלה"},{"content":" This post is written in Hebrew, which was the blog\u0026rsquo;s language at the time.\n מרצ מציעה: להוציא את שיתוף הקבצים אל מחוץ לחוק. הכותרת אולי נשמעת מטעה, יחשוב לו הקורא התמים - הרי וודאי וּוודאי שלמרץ אין בעיה עם שיתוף קבצים באופן כללי, וכמובן שהמאבק שלהם מרוסן לעניין עבירות בנושא קניין רוחני. אך לא ולא - הסעיף הרביעי בהצעת החוק שלהם מוציא מחוץ לחוק תוכנות ושירותים לשיתוף קבצים. בכלל. זה שמאל זה? זו פרימיטיוויוּת מחשבתית חמורה ממה שאנחנו רואים מה-RIAA.\nלזכותם יאמר כי הם תומכים בפתרון בדמות מיסוי של הגולשים - אבל עושה רושם שהם ממהרים לוותר בחזית זו. אכזבה עמוקה ממפלגה שראיתי בה סיכוי לרפורמה ב\u0026quot;קניין רוחני\u0026quot; ותמיכה בתוכנה חופשית.\n","permalink":"https://lutzky.net/2006/08/15/shame-on-meretz_copy/","summary":"(Hebrew) Shame on Meretz","title":"בושה וחרפה למרצ"},{"content":" This post is written in Hebrew, which was the blog\u0026rsquo;s language at the time.\n בהתחלה פלאש היה משהו קטן וחמוד. השתמשתי בו בכיתה ו' בשביל \u0026ldquo;פרוייקט סיום\u0026rdquo; על גלגולי אנרגייה, בעוד שאחרים הכינו מכשירים שלא היו מביישים את The Incredible Machine. זה המשיך בכל מיני משחקים קטנים באתר של Shockwave. לאט לאט זה הפך למעצבן, כשאנשים החליטו ש-HTML זה סתם כמה טאגים ששמים כדי שהדפדפן יציג את הפלאש שהוא בעצם האתר. או לחילופין, החליטו שפלאש זה אחלה מדיום לפרסומות, מה שהוביל להופעת AdBlock.\nאבל בזמן האחרון עושה רושם שסוף-סוף מצאו את הייעוד האמיתי של פלאש - סרטוני ווידאו היתוליים. והגרסה האחרונה של פלאש עושה את זה נהדר - באמצעות Codec קנייני חדש ומתוחכם, הסרטים יורדים חיש-קל. הביצועים טובים, העומס על המערכת מינימלי\u0026hellip; בקיצור - כולם נהנים.\nאבל לא לכולם יש את הגרסא האחרונה הזו. לא לכולם אפילו יש את גרסה 8. משתמשי לינוקס תקועים עם גרסה 7 - וגרסה גרועה של גרסה 7. כל אובייקט פלאש תופס ה-מ-ו-ן משאבי מערכת. הם עובדים לאט, הסאונד לא מסונכרן (אלא אם משתמשים ב-aoss, מה שמוסיף לפגוע ביציבות), וה-Codec החדש והנפלא הזה - שכחו ממנו. באתרי הווידאו שבכל זאת דואגים לתמוך בפלאש 7 אפשר לראות את הסרטים יורדים לאט-לאט. ב-Youtube, למעשה, אפילו את זה אי אפשר לראות - צריך לנחש מתי הסרט סיים לרדת.\nגרוע מכך, Adobe (הבעלים החדשים של פלאש) כל פעם אומרים ש\u0026quot;הגרסה החדשה ללינוקס יוצאת בקרוב\u0026quot;. כך הם אמרו בפלאש 8. כשלא יצא, אמרו שיהיה 8.5. עכשיו הם אומרים את אותו הדבר ב-9. כרגע תאריך היעד המפורסם הוא \u0026ldquo;מוקדם ב-2007\u0026rdquo;, והם אפילו טרחו להעלות בלוג של אחד מהמפתחים.\nמעניין מאוד מה שהולך בבלוג הזה, אגב - הם אומרים שהם עובדים נורא קשה על לגרום לתאימות עם מצלמות ווידאו בלינוקס, ולוודא שכמה שיותר מצלמות עובדות. עכשיו, תגידו לי - מישהו כאן אי פעם ראה סרטון פלאש שאשכרה משתמש במצלמת ווידאו? איפהשהו? שימו לינק בתגובות. גרוע מכך - הם אומרים שכרגע הם לא משחררים גרסת בטא כי למרות שהסאונד מסונכרן פרפקט ו-Youtube עובד די טוב, עדיין יש הרבה בעיות יציבות. אז יש לי חדשות בשבילכם חברים - גם בגירסה הנוכחית יש המון בעיות יציבות! שחררו את זה מצידי בגירסת \u0026ldquo;סופר-היפר-אלפה-אל-תגעו-יא-חארות\u0026rdquo;!\nורק עוד נקודה אחת. אומרים בפורומים אחרים שזה בעיה של קהילת הקוד הפתוח שלא פיתחנו גרסה משלנו לפלאש. למרבה הצער, פלאש משתמש במספר אלמנטים קנייניים - החשוב ביניהם הוא הקודק החדש של הווידאו. מה לעשות, כאן אנחנו תלויים ב-Adobe.\nזהו, יצא הקיטור. בחזרה ל-Youtube. 🙂\n","permalink":"https://lutzky.net/2006/08/14/flash-in-linux_copy/","summary":"(Hebrew) The absolute state of Flash in Linux","title":"המצב של פלאש בלינוקס"},{"content":" This post is written in Hebrew, which was the blog\u0026rsquo;s language at the time. Context: 2006 Lebanon War\n ממש שקט. לא שמתי שעון מעורר, כי סמכתי על הנסראללה המעורר. בכלל, הישוב שלי מחובר לאזעקות של כל הארץ (כי הוא באמצע שום מקום) אז אנחנו מקבלים גם אזעקות של קרית שמונה.\nכבר היה כל כך שקט, שאבא שלי קצת הלך לישון\u0026hellip; ואז אני שומע דרך המזגן אזעקה, צועק \u0026ldquo;אזעקה\u0026rdquo;, ואמא שלי אומרת להיות בשקט כי אבא ישן\u0026hellip;\n","permalink":"https://lutzky.net/2006/08/12/nice-and-quiet_copy/","summary":"(Hebrew) Oh but it was nice and quiet. (wartime)","title":"דווקא היה נחמד, שקט וכאלה"},{"content":"כולנו ראינו אותו בטלוויזיה ובתמונות. קראנו את הכתבות, ראינו את הצילומים של איך שהוא מוריד את הגופות מהאמבולנס כדי שיצלמו שוב, עם פוקוס יותר טוב ובלי שאנשים יסתירו. איך במשך שעות הוא סוחב אותה גופה הלוך ושוב בשביל המצלמות. ושאיכשהו הוא תמיד מצליח להגיע לכל זירה מצולמת.\nועכשיו יש לו בלוג משלו! 🙂\n","permalink":"https://lutzky.net/2006/08/11/green-helmet-guy/","summary":"(Hebrew) The green helmet guy - now with his own blog.","title":"החבוב עם הקסדה הירוקה - עכשיו הבלוג"},{"content":" This post is written in Hebrew, which was the blog\u0026rsquo;s language at the time.\n מלחמה. נסראללה שולח עלינו בומים. אנחנו שולחים עליו בומים (כל 10 שניות יציאה שלנו אתמול בלילה, והתריסים רועדים). ואני בבית, עושה בומים משלי. זה לא כמו לנגן עם חברים, זה לא כמו להופיע, אבל לפחות סוף סוף גיליתי איך לגרום לזה להישמע נורמאלי.\nהציוד - בס ג’אז של סקוייר. אדום. כבל LP - גם אדום. מקטין LP ולפטופ.\nהתוכנה - Ardour, יחד עם כמה פלאגינים של LADSPA.\nאז מה שגיליתי זה ככה -\n להפעיל את שני הפיקאפים על אותו ווליום, ושלא יהיה עד הסוף. ככה הם מבטלים את ההמהום. להשתמש ב-lowpass filter כדי לבטל את הרחשים הגבוהים להשתמש ב-compressor, ולבחור אותו בקפידה. ככה ישמעו את ה-hammer-ons/pull-offs הרבה יותר טוב, ואפשר לנגן חלש או חזק בלי שזה ירד מהסקאלה  במסע להוציא את האינפורמציה הזו עליתי על אחלה להקה מאיטליה. שווה האזנה.\n","permalink":"https://lutzky.net/2006/08/11/recording-booms_copy/","summary":"(Hebrew) Loudness fight - artillery vs bass guitar","title":"מקליטים בומים"},{"content":" This is a handy little page for copying the stress mark (acute mark) to clipboard. Useful if your Russian keyboard doesn't support it.\ń  function copyIt() { document.getElementById('copyBuffer').select(); document.execCommand('copy'); }  Copy","permalink":"https://lutzky.net/russian-stress/","summary":" This is a handy little page for copying the stress mark (acute mark) to clipboard. Useful if your Russian keyboard doesn't support it.\ń  function copyIt() { document.getElementById('copyBuffer').select(); document.execCommand('copy'); }  Copy","title":"Russian stress mark"}]