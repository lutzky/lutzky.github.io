<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Shallow and Pedantic</title><link>https://lutzky.net/</link><description>Recent content on Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Newborn parenting software - part 3</title><link>https://lutzky.net/2021/10/10/software-parenting-3/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/10/10/software-parenting-3/</guid><description>Transitioning PooButtons to a microcontroller</description><content:encoded><![CDATA[<p>As noted in the <a href="https://lutzky.net/2021/10/05/software-parenting-2/">previous post</a>, I decided that the implementation is more appropriate for a microcontroller than a full-fledged computer. While the Arduino is probably the best-known microcontroller, the standard one doesn&rsquo;t have wifi (the one with wifi is ~$50). The ESP8266, on the other hand, is a microcontroller chip with wifi capabilities, available<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> on dev boards like the NodeMCU for about $2 apiece - so I bought a few of them. The ESP8266 is sometimes used as a wifi add-on for Arduino, but it&rsquo;s quite capable as a microcontroller on its own (and the newer ESP32 is faster).</p>
<p>So what&rsquo;s the difference between a (very small) computer and a microcontroller? A Raspberry Pi boots off an SD card, usually to a full-fledged Linux operating system; you&rsquo;d operate it either directly with a monitor and keyboard, or connect remotely using SSH. You can install/create software on it as you would on a &ldquo;full-size&rdquo; computer, and I usually do this in Go (although Python is more popular). Conversely, a microcontroller will usually run only one program, which you need to build on a separate computer, connect it over USB to the microcontroller board, and flash it. This has a number of advantages, including simplicity and pretty-much-instant boot.</p>
<p>Coding for the ESP8266 can be done using the same tooling as Arduino - namely, in C++<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, on the Arduino IDE. However, during this project I learned of <a href="https://platformio.org/">PlatformIO</a>, which is far more comfortable to work with: It&rsquo;s integrated into VSCode, and git, auto-formatting, autocomplete and <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">VIM keybindings</a> all work nicely. It also provides a more organized approach to unit testing (practically absent in Arduino IDE) and per-project dependency management (you can list what each project needs and have it auto-install). This made the project fun enough for a few iterations.</p>
<p>One quirk of working with the BabyBuddy API is that reporting a diaper change requires supplying the time of change, even if our intention is &ldquo;right now&rdquo;. That&rsquo;s easy enough on a Linux system, but microcontrollers don&rsquo;t generally have clocks. Thankfully, libraries such as <a href="https://github.com/mcxiaoke/ESPDateTime">ESPDateTime</a> provide NTP support baked right into your program. At this point, the NodeMCU version worked, and replaced the previous implementation:</p>
<figure>
  <a href="/2021/10/10/software-parenting-3/poobuttons-v2.jpg">
    <img loading="lazy" src="/2021/10/10/software-parenting-3/poobuttons-v2.jpg" />
  </a><figcaption>Poobuttons v2 - nodeMCU on breadboard</figcaption></figure>
<p>Indeed, this version fits neatly onto a single (full-sized) breadboard. It&rsquo;s not quite <a href="https://www.youtube.com/watch?v=PE-_rJqvDhQ">Ben Eater</a> grade, but the NodeMCU is pretty good for breadboard mounting, and using solid-core jumpers let me make it much neater than the previous iteration. However, at this point we realized there was a missing feature: We were never quite sure if we had pressed the button, especially if we were performing a diaper change together<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> . A couple of LEDs can only convey so much information.</p>
<p>I decided to repurpose my <a href="https://lutzky.net/2021/03/14/pitemp/">shitty cardboard LCD case</a> for this project. These tactile buttons have quite short feet - they don&rsquo;t make it through the cardboard, and I insisted on avoiding using a perfboard and soldering iron - as, at the time, I had neither. I ultimately decided to reuse the mini-breadboard from <a href="https://lutzky.net/2021/10/05/software-parenting-2/">the previous version</a>; like many (all?) breadboards, its bottom is an adhesive pad; I didn&rsquo;t even bother to remove the resistors from V1, they add a certain design flare to it. With a few iterations on the UI, it was wife-approved: Custom characters are fully supported in C++ (though, not in Go), so I got nice labels for the tactile buttons, as well as a heartbeat<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> to indicate that NTP is still working.</p>
<figure>
  <a href="/2021/10/10/software-parenting-3/poobuttons-v3.jpg">
    <img loading="lazy" src="/2021/10/10/software-parenting-3/poobuttons-v3.jpg" />
  </a><figcaption>Poobuttons v3 - nodeMCU with LCD in cardboard</figcaption></figure>
<p>Overall, the project has been a blast, and the result is everyday-useful. Working on it has made me realize how much I need my own space for late-night electronics projects, but that&rsquo;s a project for another day.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Actually available - as in, as opposed to Raspberry Pi 0w, they&rsquo;re in stock in many places at the moment.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Unfortunately, <a href="https://tinygo.org/docs/reference/microcontrollers/nodemcu/">TinyGo does not yet support wifi</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>We call this procedure <a href="https://www.youtube.com/watch?v=BI75uWxEajA">Formula 1</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>2nd row from the bottom, rightmost column; you can see it fading out in this shot. It blinks every second. Although the photo doesn&rsquo;t show it, the LCD&rsquo;s contrast is actually great in-person.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><title>Newborn parenting software - part 2</title><link>https://lutzky.net/2021/10/05/software-parenting-2/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/10/05/software-parenting-2/</guid><description>Logging diapers with satisfying clicks</description><content:encoded><![CDATA[<p>With BabyBuddy now installed and running properly (see <a href="https://lutzky.net/2021/10/03/software-parenting-1/">previous post</a>), and an always-on display showing the latest information, we now got into the swing of using it. We loved the timeline for &ldquo;what happened while I as sleeping&rdquo;; we loved the food amount reports; and because we had a consistent &ldquo;feed, then change, then wait 15 minutes with baby upright to reduce spit-up&rdquo; system, the display&rsquo;s &ldquo;time since last change&rdquo; box was super useful as well. However, as you might imagine, we did <em>not</em> love handling a freshly-re-diapered baby with one hand while using the other to unlock the phone and navigate to the &ldquo;yes he pooped now&rdquo; page in a web app.</p>
<p>My first idea was to create voice commands for the Nest Home Mini in the room. However, it&rsquo;s prone to misunderstanding us; you have to enunciate, and even then the speech recognition is mostly tuned to preexisting Google Assistant commands, and tends to guess that we aren&rsquo;t really saying words like &ldquo;pee&rdquo; or &ldquo;poo&rdquo;. Furthermore, the baby might be crying, or worse yet - lightly sleeping, at risk of being woken up by our voice (or the assistant&rsquo;s). What we needed was a button (well, two - one for pee and one for poo).</p>
<p>I had a Raspberry Pi ZeroW lying around <a href="https://lutzky.net/2021/03/14/pitemp/">from a previous project</a> and decided to use it for this (the small OLED display wasn&rsquo;t used for this project, but I didn&rsquo;t find a good reason to take it off yet; more on that later). With bits I had from a generic &ldquo;learn electronics&rdquo; kit (which I bought for the specific purpose of having such bits), I created the user interface: Two buttons, a green LED for &ldquo;OK&rdquo;, a red LED for &ldquo;something went wrong&rdquo;; all tied together by some jumper cables and a mini breadboard. The Raspberry Pi would handle communicating with BabyBuddy&rsquo;s API (over wifi), reading the buttons, and driving the LEDs. The setup was indeed quite similar to PiTemp&rsquo;s with the software written in Go, cross-compiled, and run on startup using systemd.</p>
<figure>
  <a href="/2021/10/05/software-parenting-2/poobuttons-rpi0w.jpg">
    <img loading="lazy" src="/2021/10/05/software-parenting-2/poobuttons-rpi0w.jpg" />
  </a><figcaption>PooButtons on Raspberry Pi ZeroW</figcaption></figure>
<p>One annoying quirk with the Raspberry Pi Zero for this is that it would register phantom button presses; they&rsquo;d be quite rare, fewer than 5 a day, but that&rsquo;s certainly enough to mess up diaper reporting. I&rsquo;m not sure if it&rsquo;s something about the particular GPIO pins I used (GPIO24, GPIO22), and disconnecting the OLED display didn&rsquo;t work. I ended up following the old joke:</p>
<blockquote>
<p>How many software engineers does it take to change a lightbulb?</p>
<p>None, it&rsquo;s a hardware problem.</p>
<p>How many hardware engineers does it take to change a lightbulb?</p>
<p>None, they&rsquo;ll fix it in the software drivers.</p>
</blockquote>
<p>Specifically it ended up looking something like this (with another goroutine listening on the resulting channel):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">const</span> <span class="p">(</span>
  <span class="nx">debounceTime</span> <span class="p">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span>
  <span class="nx">stableTime</span>   <span class="p">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">listenButtons</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">pull</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">PullUp</span>
  <span class="nx">edge</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">FallingEdge</span>
  <span class="nx">level</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">Low</span>

  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">pin</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="nx">gpio</span><span class="p">.</span><span class="nx">PinIO</span><span class="p">{</span>
    <span class="nx">pinButton1</span><span class="p">,</span>  <span class="c1">// GPIO24
</span><span class="c1"></span>    <span class="nx">pinButton2</span><span class="p">,</span>  <span class="c1">// GPIO22
</span><span class="c1"></span>  <span class="p">}</span> <span class="p">{</span>
    <span class="nx">n</span> <span class="o">:=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="nx">pin</span> <span class="o">:=</span> <span class="nx">pin</span>

    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">{</span>
        <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">debounceTime</span><span class="p">)</span>

        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">In</span><span class="p">(</span><span class="nx">pull</span><span class="p">,</span> <span class="nx">edge</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
          <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Failed to set pin to input: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">WaitForEdge</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Got edge, waiting %v for stability&#34;</span><span class="p">,</span> <span class="nx">stableTime</span><span class="p">)</span>
          <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">stableTime</span><span class="p">)</span>

          <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">Read</span><span class="p">()</span> <span class="o">==</span> <span class="nx">level</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal was stable, counting as press&#34;</span><span class="p">)</span>
            <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">n</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal did not remain stable, discarding&#34;</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;WaitForEdge returned false, ignoring&#34;</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>It&rsquo;s not ideal, but it seemed to work; certainly seemed like it should be library code, for someone smarter to debug. Indeed, it turns out that the <code>periph.io</code> library had a <a href="https://pkg.go.dev/periph.io/x/conn/v3@v3.6.8/gpio/gpioutil#Debounce">Debounce function</a> to help with this, but at the time it <a href="https://github.com/periph/conn/issues/5">wasn&rsquo;t implemented at all</a> (and now that I&rsquo;ve spent some time on it, it&rsquo;s partially implemented).</p>
<p>Ultimately, the device worked rather well, and the button pushes were quite satisfying, especially after a particularly nasty diaper change (AKA a poonami). However, it did leave a lot to be desired: The cabling was flimsy and patchy (the pins coming from the ribbon were easy to disconnect), and using a Raspberry Pi here was overkill. Indeed, I ended up using that Raspberry Pi (and OLED display) as a <a href="https://pikvm.org/">PiKVM</a>, and using a microcontroller for the diaper change buttons instead. More on that in the next post.</p>
]]></content:encoded></item><item><title>Newborn parenting software - part 1</title><link>https://lutzky.net/2021/10/03/software-parenting-1/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/10/03/software-parenting-1/</guid><description>Choosing and hacking on baby tracking apps</description><content:encoded><![CDATA[<p>A few months ago, I became a father. To help overcome some of the challenges of raising a newborn, I decided to employ my standard MO - software; preferably the kind where I understand what it&rsquo;s doing. It&rsquo;s been working well, and I learned a lot doing it - several blog posts' worth, in fact.</p>
<p>For this story to make sense, it bears mentioning that our conditions are pretty much optimal for it: My employer provides a generous parental leave for the non-birth parent; we decided in advance to formula-feed, which allows us to share that load, which means we need to communicate about it; my partner is an early bird whereas I am a night-owl, meaning we essentially have separate shifts necessitating a handoff; and, critically, we&rsquo;re the type of people who <em>like</em> everything being super-organized and scheduled and spreadsheet-y (calms us down, gives us an illusion of control). Furthermore, our baby is remarkably consistent, being hungry right about every 3 hours - so the question we ended up constantly asking (of each other and our phones) was &ldquo;how long since the baby ate&rdquo;.</p>
<p>We knew in advance we&rsquo;d need some sort of a baby tracking app, of which there are <em>many</em>. After some research, I found that few of the free ones are designed to be used from multiple devices (e.g. dad&rsquo;s and mom&rsquo;s phones), which is a hard requirement. We found two contenders: Baby+ and BabyBuddy.</p>
<h2 id="baby">Baby+</h2>
<p><a href="https://philips-digital.com/baby-new/">Baby+</a> is an Android and iPhone app for tracking babies; it follows <a href="https://philips-digital.com/pregnancy-new/">pregnancy+</a>, which we were quite happy with (especially as, before the birth, our responsiveness requirements were looser - I&rsquo;ll get to that). It can track quite a few things, but not Tummy Time for one (in our case it turns out to be pretty important). Like pregnancy+, the design is very aesthetically pleasing, and it regularly shows timely, short, and useful articles for the parents.</p>
<p>While the app does have cloud sync, it doesn&rsquo;t have a web UI (it&rsquo;s phone/tablet-only) nor an open HTTP API for me to reasonably code against. It does have an export function, but it&rsquo;s only really intended for importing by the app itself as backup. It&rsquo;s super-clunky to work with - I know because I ended up using it to perform some analysis with a spreadsheet(&ldquo;how long is the baby going between feeds&rdquo;).</p>
<p>The biggest disadvantage of Baby+ is that it doesn&rsquo;t <em>really</em> support multiple users. From the app&rsquo;s internal FAQ (only available after installing it and setting up an account):</p>
<blockquote>
<p><strong>How can I use this app with my partner?</strong></p>
<p>You can share the app by logging in with the <strong>same email and password</strong>. If you use your device and enter data (e.g. a note) then you need to minimise or close the app for it to send the new data to the server <em>[&hellip;]</em>.</p>
<p><strong>Important</strong>: the app is designed to be used by on person at a a time <em>[&hellip;]</em> otherwise data can be overwritten or deleted. <em>[&hellip;]</em> allow a few mins for the data to sync (the second device should also have the app closed for a few mins at this point so it can fetch the data <em>[&hellip;]</em>).</p>
<p>Please note that you will encounter data loss if you are using the app on two devices at the same time.</p>
</blockquote>
<p>I&rsquo;d guess that the app basically talks to the server on startup, compares timestamps of its entire database, and downloads or uploads the entire database depending on which version is newer. The startup time checks out:</p>
<p>Starting Baby+ on an android phone, after closing it so it syncs, takes about 7 seconds; an eternity in screaming-baby-debug-time. Furthermore, that doesn&rsquo;t include sync time, and old data will be shown for a few more seconds before the sync is complete; that starts off with slight frights (&ldquo;the baby didn&rsquo;t eat for 5 hours?! oh, wait, actually 1 hour&rdquo;), and eventually devolves into distrusting the app.</p>
<p>This felt like a silly problem to have; almost any web-based app would have none of these issues. Furthermore, I thought, there&rsquo;s surely an open-source one where I could fix any annoyances I have myself. Indeed, that would be BabyBuddy.</p>
<h1 id="babybuddy">BabyBuddy</h1>
<p><a href="https://github.com/babybuddy/babybuddy">BabyBuddy</a> is an open-source web app, self-described as &ldquo;to help caregivers track sleep, feedings, diaper changes, and tummy time to learn about and predict baby&rsquo;s needs without (as much) guess work&rdquo;. I describe it as &ldquo;the dumbest-sounding idea ever - sleep-deprived parents of newborns creating and maintaining baby-tracking software as a hobby&rdquo;. It turns out to be wonderful, and is what we use today. It requires self-hosting (but provides a button to do that easily on Heroku), but works remarkably well. It didn&rsquo;t work <em>exactly</em> like I wanted, but that just provided ample opportunity to hack on it.</p>
<p>Before we could use it, I had to make it more mobile-friendly. While it technically worked on phones, it had several usability issues, which I described in <a href="https://github.com/babybuddy/babybuddy/issues/229">#229</a>: horizontal scrolling was needed in places; the &ldquo;Timeline&rdquo; view didn&rsquo;t show a lot of the critical bits of info, requiring more clicks; the contrast was too low for sunlight; and more. Fortunately, through some wonderful collaboration from the author, I was able to quickly get it into a wife-acceptable state and transition us over from Baby+.</p>
<p>As I hacked on the project, I added a <a href="https://gitpod.io">Gitpod</a> <a href="https://github.com/babybuddy/babybuddy/blob/master/.gitpod.yml">config</a> and a link to the README. This allows people to hack on Babybuddy without installing any software whatsoever - everything is done through, essentially, a free tier cloud instance (on which my config will install everything needed) with a browser-builtin VSCode UI. I used this today to whip up <a href="https://github.com/babybuddy/babybuddy/pull/316">another pull request</a>.</p>
<p>In addition to being quick and comfortable to use, BabyBuddy allowed me to set up two integrations that I had in mind. The first is an always-on display, essentially intended as &ldquo;the baby clock&rdquo;. It&rsquo;s positioned by the couch where we usually feed, so it&rsquo;s great as a feeding timer as well. I had started out with an old tablet (Huawei T3 Mediapad) running <a href="https://github.com/thanksmister/wallpanel-android">wallpanel</a> - this is a form of &ldquo;kiosk&rdquo; application, which locks the device into a mode where it always runs the browser on a particular page (the device has no other credentials on it, so it&rsquo;s reasonably safe). The tablet&rsquo;s battery, unfortunately, did <em>not</em> like that - seemingly having the screen on discharges it faster than it can charge, and after a few weeks the tablet refused to charge at all. I&rsquo;ve therefore switched to using an old ASUS C100P Chromebook running <a href="https://chrome.google.com/webstore/detail/kiosk/afhcomalholahplbjhnmahkoekoijban?hl=en">kiosk</a> - this gives the benefit of having a physical keyboard, useful for entering the food amounts.</p>
<p>The second integration I call &ldquo;poobuttons&rdquo; - a couple of tactile buttons on the changing dresser which tell BabyBuddy to mark a diaper (they are labeled &ldquo;poo&rdquo; and &ldquo;pee&rdquo;). This is both easier than fumbling with a phone touchscreen and, frankly, way more satisfying. The next posts will detail the iterations of these buttons and how I built them.</p>
<p>This has been a wonderful and challenging journey so far. I wonder what else I&rsquo;ll find myself building.</p>
]]></content:encoded></item><item><title>Code comments</title><link>https://lutzky.net/2021/05/02/comments/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/05/02/comments/</guid><description>&lt;p>Good code comments only describe &lt;em>why&lt;/em> the code is (or isn&amp;rsquo;t!) doing something.&lt;/p></description><content:encoded><![CDATA[<p>Good code comments only describe <em>why</em> the code is (or isn&rsquo;t!) doing something.</p>
<p>When teaching coding or reviewing code, I sometimes encounter comments describing <em>what</em> it&rsquo;s doing, and those are almost always harmful.</p>
<p>To be clear, I&rsquo;m talking about <em>code comments</em>, not <em>documentation comments</em>. This nuance is different in every language and setup, but for Go, this is it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="c1">// UsefulFunction does useful things. This is a documentation
</span><span class="c1">// comment, and will be displayed in godoc, IDE autocomplete,
</span><span class="c1">// and more.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">UsefulFunction</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// this and all of the below are code comments
</span><span class="c1"></span>
    <span class="c1">// count visitors //
</span><span class="c1"></span>    <span class="c1">// x is the visitor counter
</span><span class="c1"></span>    <span class="nx">x</span> <span class="o">:=</span> <span class="mi">0</span>
    <span class="nx">x</span><span class="o">++</span> <span class="c1">// increment x
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><h2 id="why">Document &ldquo;why&rdquo;</h2>
<p>In some code, things are done for non-intuitive reasons. It&rsquo;s worth pointing that out - it makes your code easier to read for a newcomer trying to understand why it&rsquo;s written that way. In this example, technically <code>sumOfIntsWithThreshold</code> will work absolutely correctly without its input being sorted, but it <a href="https://stackoverflow.com/questions/11227809">turns out that it will be faster if it is</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// improves performance; see https://stackoverflow.com/questions/11227809
</span><span class="c1"></span><span class="nx">x</span> <span class="o">:=</span> <span class="nf">sumOfIntsWithThreshold</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span>
</code></pre></div><p>Other good &ldquo;why&rdquo; examples are code being written in a less-intuitive way to make a particular test possible or to avoid a specific edge-case - be sure to note what those are.</p>
<p>If a well-researched algorithm is being used, definitely add a reference to it, including the best URL you have for someone who wants a quick overview of how it works.</p>
<h2 id="why-not">Document &ldquo;why not&rdquo;</h2>
<p>In some code, the reader might see something missing, a pattern apparently broken. Sometimes this is for a good reason, as keeping with the pattern would cause a bug. More specifically, you might be <em>fixing</em> a bug by breaking the pattern.</p>
<p>In this example, especially if you&rsquo;re removing a line <code>sort.Strings(c)</code>, it&rsquo;s a good idea to leave a comment explaining why it shouldn&rsquo;t be there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{}</span>
    <span class="nx">sort</span><span class="p">.</span><span class="nf">Strings</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="nx">sort</span><span class="p">.</span><span class="nf">Strings</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
    <span class="c1">// don&#39;t sort c, we need to keep its original order for foo
</span><span class="c1"></span>    <span class="nf">foo</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h2 id="trivial">Don&rsquo;t document &ldquo;what&rdquo; when it&rsquo;s trivial</h2>
<p>You might be asking yourself &ldquo;what&rsquo;s the harm in a comment if it isn&rsquo;t needed. The answer is that it can be misleading; code will function correctly even if it&rsquo;s out-of-sync with its comments, so comments aren&rsquo;t always updated when code is changed, leading to this canonical example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="c1">// increment x by 1
</span><span class="c1"></span><span class="nx">x</span> <span class="o">+=</span> <span class="mi">2</span>
</code></pre></div><p>In less-trivial cases, the reader can be left scratching their head for far longer than they would&rsquo;ve if the comment weren&rsquo;t there in the first place.</p>
<h2 id="sections">Documenting &ldquo;sections&rdquo; is a code smell</h2>
<p>If your code looks is divided using comments into &ldquo;sections&rdquo;, it&rsquo;s probably long and difficult to reason about:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">ServeSite</span><span class="p">(</span><span class="nx">o</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//// Get site data ////
</span><span class="c1"></span>    <span class="nx">f</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;data.md&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">parser</span> <span class="o">:=</span> <span class="nx">markdown</span><span class="p">.</span><span class="nf">NewParser</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
    <span class="nx">data</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>

    <span class="c1">//// Get layout data ////
</span><span class="c1"></span>    <span class="nx">f2</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;layout.cfg&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nx">f2</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">layoutReader</span> <span class="o">:=</span> <span class="nx">awesomelayout</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">layoutOpts</span><span class="p">.</span><span class="nx">Defaults</span><span class="p">)</span>
    <span class="c1">// Name &#34;data&#34; is already in use&#34;
</span><span class="c1"></span>    <span class="nx">dataOfLayout</span> <span class="o">:=</span> <span class="nx">layoutReader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">f2</span><span class="p">)</span>

    <span class="c1">//// Set up HTML renderer ////
</span><span class="c1"></span>    <span class="nx">renderer</span> <span class="o">:=</span> <span class="nx">htmlrender</span><span class="p">.</span><span class="nf">NewRenderer</span><span class="p">()</span>
    <span class="nx">renderer</span><span class="p">.</span><span class="nf">SetHTMLMode</span><span class="p">(</span><span class="s">&#34;my-favorite-html-style&#34;</span><span class="p">)</span>
    <span class="nx">renderer</span><span class="p">.</span><span class="nf">SetCompression</span><span class="p">(</span><span class="s">&#34;max-compression&#34;</span><span class="p">)</span>

    <span class="nx">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataOfLayout</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>This gets even messier if you don&rsquo;t sneakily omit error handling. In any case, the section headers are reasonable (albeit not great) candidates for function names:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">ServeSite</span><span class="p">(</span><span class="nx">o</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">siteData</span> <span class="o">:=</span> <span class="nf">getSiteData</span><span class="p">()</span>
    <span class="nx">layoutData</span> <span class="o">:=</span> <span class="nf">getLayoutData</span><span class="p">()</span>
    <span class="nx">renderer</span> <span class="o">:=</span> <span class="nf">setupHTMLRenderer</span><span class="p">()</span>
    <span class="nx">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataOfLayout</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getSiteData</span><span class="p">()</span> <span class="nx">markdown</span><span class="p">.</span><span class="nx">Data</span> <span class="p">{</span>
    <span class="nx">f</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;data.md&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">p</span> <span class="o">:=</span> <span class="nx">markdown</span><span class="p">.</span><span class="nf">NewParser</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">getLayoutData</span><span class="p">()</span> <span class="nx">awesomelayout</span><span class="p">.</span><span class="nx">Data</span> <span class="p">{</span>
    <span class="nx">f</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;layout.cfg&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">awesomelayout</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">layoutOpts</span><span class="p">.</span><span class="nx">Defaults</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">layoutReader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">setupHTMLRenderer</span><span class="p">()</span> <span class="nx">htmlrenderer</span><span class="p">.</span><span class="nx">Renderer</span> <span class="p">{}</span>
    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">htmlrender</span><span class="p">.</span><span class="nf">NewRenderer</span><span class="p">()</span>
    <span class="nx">r</span><span class="p">.</span><span class="nf">SetHTMLMode</span><span class="p">(</span><span class="s">&#34;my-favorite-html-style&#34;</span><span class="p">)</span>
    <span class="nx">r</span><span class="p">.</span><span class="nf">SetCompression</span><span class="p">(</span><span class="s">&#34;max-compression&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">r</span>
<span class="p">}</span>
</code></pre></div><p>The main <code>ServeSite</code> function is now much easier to read. The &ldquo;section names&rdquo; are now function names, and are less likely to fall out of date. And as a bonus, the scope of many variables is reduced - so the reader doesn&rsquo;t have to keep them in mind, and we can use short names for them.</p>
<h2 id="code-scars">Don&rsquo;t leave code scars around</h2>
<p>Finally, just a pet peeve - while it&rsquo;s absolutely fine to &ldquo;comment out&rdquo; code while developing, you usually shouldn&rsquo;t commit this to version control. I like calling these &ldquo;code scars&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">x</span> <span class="o">:=</span> <span class="nf">getMaxValue</span><span class="p">()</span>
<span class="c1">// x = 3
</span><span class="c1"></span><span class="nf">handle</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</code></pre></div><p>In this case, <code>x = 3</code> was there for testing &ldquo;what if <code>getMaxValue</code> returns 3&rdquo;. You should not commit this. However, a possible exception can be if you&rsquo;re documenting &ldquo;why not&rdquo; as above - if it comes with an explanation.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Code is meant to be read by machines and humans, with comments generally being intended for humans to read. Therefore, all of these should be taken as guidelines rather than gospel. Hopefully this post can be of some use for people trying to reason about comment etiquette, or perhaps for code reviewers wanting to point their reviewees at a preexisting summary.</p>]]></content:encoded></item><item><title>PiTemp</title><link>https://lutzky.net/2021/03/14/pitemp/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/03/14/pitemp/</guid><description>An adventure with Raspberry Pi, Golang, and small displays.</description><content:encoded><![CDATA[<p>I had been looking for an excuse to mess around with Raspberry Pi for a while, and found one: I wanted a graph of temperature and humidity over time, and - while we&rsquo;re at it - a nice display of those two. Technically speaking, I already have a Nest thermostat which should provide those, but it won&rsquo;t display humidity and there&rsquo;s no easy way to get a graph off it (besides, then I&rsquo;d need another excuse for messing around with a Pi).</p>
<p>The code for the final result is in <a href="https://github.com/lutzky/pitemp">https://github.com/lutzky/pitemp</a>.</p>
<h1 id="stage-1-lcd-and-dht">Stage 1: LCD and DHT</h1>
<p>Hardware:</p>
<ul>
<li>A <a href="https://www.raspberrypi.org/products/raspberry-pi-zero-w/">Raspberry Pi Zero W</a> a friend gave me (that&rsquo;ll become important later on)</li>
<li>A <a href="https://www.amazon.co.uk/gp/product/B07L83K6CF">DHT11</a> temperature &amp; humidity sensor</li>
<li>A <a href="https://www.amazon.co.uk/gp/product/B07QNKCLJM">4x20 character LCD</a>; apparently an HD44780 controller or compatible.</li>
</ul>
<p>This was my first time coding for hardware on the raspberry pi, and it went fairly well.</p>
<h1 id="lcd-quirks">LCD quirks</h1>
<p>Getting the degree symbol (°, ASCII <code>0xb0</code>) was a bit of a challenge. While the official HD44780 spec shows it should be available with &ldquo;ROM Code A02&rdquo; (i.e. Latin mode), it&rsquo;s not clear if this can be toggled in software, and the characters my unit displayed matched &ldquo;ROM Code A00&rdquo; (Japanese)&hellip; mostly, that is. Some characters were malformed, and the <a href="https://github.com/d2r2/go-hd44780">unofficial library I used</a> didn&rsquo;t support custom characters (which the hardware seems to support). Fortunately, the Japanese ROM code had a Handakuten symbol (ﾟ, like the circle from ぽ but as a separate character), which is close enough.</p>
<p>The LCD was also quite slow to refresh, the way I was using it; any faster than 1 hz would lead to corruption, meaning that the &ldquo;second-by-second&rdquo; clock display I wanted wasn&rsquo;t feasible.</p>
<p>Finally, the LCD unit is much, <em>much</em> large than the Raspberry Pi Zero, and has to be wired awkwardly to it. With some covid-lockdown-induced creativity, a twist tie, and a bit of sewing thread (!), I turned the box it came in into a &ldquo;case&rdquo;.</p>
<figure>
  <a href="/2021/03/14/pitemp/lcd_box.jpg">
    <img loading="lazy" src="/2021/03/14/pitemp/lcd_box.jpg" />
  </a><figcaption>LCD in a cardboard box &ldquo;case&rdquo;</figcaption></figure>
<h1 id="cross-compilation">Cross compilation</h1>
<p>While the Pi Zero is certainly <em>capable</em> of being a fully-fledged Go development environment, it&rsquo;s not a fast one (and me using a cheap old SD card isn&rsquo;t helping). I got a much faster edit-compile-run loop by working on my main laptop, cross-compiling for ARM, and <code>scp</code>-ing the result over. That&rsquo;s despite Go&rsquo;s hefty statically-build binaries (7-12MB for these, depending on stripping).</p>
<p>Cross compiling is done like so (e.g. in a <a href="https://github.com/lutzky/pitemp/blob/main/build.sh">convenience script</a>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install gcc-arm-linux-gnueabi
$ <span class="nb">export</span> <span class="nv">CC</span><span class="o">=</span>arm-linux-gnueabi-gcc <span class="nv">CGO_ENABLED</span><span class="o">=</span><span class="m">1</span> <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARM</span><span class="o">=</span><span class="m">6</span> <span class="nv">GOARCH</span><span class="o">=</span>arm
$ go -o main.arm build main.go
</code></pre></div><p>For build-and-run-on-save, this can be used with <code>entr</code>. However, because you can&rsquo;t modify an executable file as it runs (in this case), you need to use a temporary file. On my laptop, I run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ find <span class="p">|</span> entr -c -s <span class="s2">&#34;./build.sh &amp;&amp; scp main.arm TARGET-MACHINE:main.arm.new
</span></code></pre></div><p>Then, on the pi, I run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ls main.arm.new <span class="p">|</span> sudo entr -r -c -s <span class="s2">&#34;cp main.arm.new main &amp;&amp; exec ./main&#34;</span>
</code></pre></div><h1 id="stage-2-pioled">Stage 2: PiOLED</h1>
<p>I looked for a not-so-ridiculously-large display, and found <a href="https://www.adafruit.com/product/3527">adafruit&rsquo;s PiOLED</a> to be perfect. Its HAT form factor makes for a much tidier device, and the display itself is reminiscent of the 2007 Sansa Clip m300 (albeit monochromatic). Library support is also much better, thanks to <a href="http://periph.io">http://periph.io</a>.</p>
<p>That being said, my friend soldered the Pi&rsquo;s pins on &ldquo;downwards&rdquo;, as this is apparently more convenient when using it on a breadboard. I figured it&rsquo;s time to order my own Pi Zero (you can get them with the pins pre-soldered, facing &ldquo;up&rdquo;); I later found that <a href="https://pkg.go.dev/periph.io/x/devices/v3/ssd1306#Opts">this might be configurable</a>, but it&rsquo;d still be pretty awkward.</p>
<p>The PiOLED library (actually periph.io&rsquo;s ssd1306 library) essentially lets you render an <code>image.Image</code>; since these are also trivially renderable to PNG, I could speed up development even further by adding an HTTP endpoint to serve the current image, even if the hardware isn&rsquo;t present; this also let me zoom into the rendered image instead of squinting at the actual display, making it easier to align things pixel-by-pixel. I eventually ended up separating the code into two binaries - <code>pitemp</code> would communicate with the sensors and provide an HTTP endpoint, whereas <code>pitemp_pioled</code> (and <code>pitemp_lcd</code>) would communicate with <code>pitemp</code> and the physical display (or run in <code>--simulator</code> mode on my laptop, for HTTP-endpoint-only rendering).</p>
<p>I&rsquo;m quite happy with the final result:</p>
<figure>
  <a href="/2021/03/14/pitemp/pioled.jpg">
    <img loading="lazy" src="/2021/03/14/pitemp/pioled.jpg" />
  </a><figcaption>PiTemp with PiOLED</figcaption></figure>
<p>Happy hacking!</p>
]]></content:encoded></item><item><title>Server drawer</title><link>https://lutzky.net/2021/01/03/server-drawer/</link><pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/01/03/server-drawer/</guid><description>A quick look at my partner-approved &amp;ldquo;server drawer&amp;rdquo;</description><content:encoded><![CDATA[<p>This is as good a time as any to give a quick tour of my &ldquo;homelab&rdquo; or server drawer.</p>
<p>The external view is rather innocuous: A visually inoffensive Nest Wifi, a rather elegant Nest Thermostat (shame that the display can&rsquo;t be always-on), and the gorgeous Nintendo Switch dock cover my partner got me. The TV aerial is tucked to the back, a reasonable compromise between &ldquo;gets reception&rdquo; and &ldquo;hidden away and ugly&rdquo;. The TV is mounted on upside-down IKEA boxes which we painted to roughly match the rest, hiding some botched carpentry behind the TV.</p>
<figure>
  <a href="/2021/01/03/server-drawer/external.jpg">
    <img loading="lazy" src="/2021/01/03/server-drawer/external.jpg" />
  </a><figcaption>External view</figcaption></figure>
<p>You may note some cables heading down through a hole in the woodwork (yeah, I could probably make them a bit neater on the way down):</p>
<figure>
  <a href="/2021/01/03/server-drawer/hole.jpg">
    <img loading="lazy" src="/2021/01/03/server-drawer/hole.jpg" />
  </a><figcaption>Through the hole</figcaption></figure>
<p>When opened, the drawer shows the Virgin Media router (in <a href="https://www.virginmedia.com/help/virgin-media-hub-modem-mode">Modem Mode</a>), hooked up to the Nest Wifi and back into a small switch. The TV is hardwired in, and so is the NUC i3 media server (&ldquo;Michael&rdquo;, replacing the previous server &ldquo;George&rdquo;). The NUC is wearing a 4TB USB HDD as a hat. Everything is quite low-powered, and Michael usually hovers around 42°C.</p>
<figure>
  <a href="/2021/01/03/server-drawer/top.jpg">
    <img loading="lazy" src="/2021/01/03/server-drawer/top.jpg" />
  </a><figcaption>Top view</figcaption></figure>
<p>Finally, here&rsquo;s how everything is powered. The guy who built it thought 10 sockets (8 in the drawer, 2 behind the TV) was overkill. It was not.</p>
<figure>
  <a href="/2021/01/03/server-drawer/power.jpg">
    <img loading="lazy" src="/2021/01/03/server-drawer/power.jpg" />
  </a><figcaption>Power view</figcaption></figure>
]]></content:encoded></item><item><title>WFH Wifi</title><link>https://lutzky.net/2020/12/10/wfh-wifi/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>https://lutzky.net/2020/12/10/wfh-wifi/</guid><description>My adventures in setting up wifi when working from home, working around limitations of my apartment form factor.</description><content:encoded><![CDATA[<p>2020 being what it is, I&rsquo;ve been working from home for quite a while. We decided to convert our spare bedroom into a home office, and I realized how nice it is to have a proper desk at home, even for non-work stuff (I haven&rsquo;t had one in over 10 years!). That being said, wifi is a challenge with the apartment&rsquo;s structure.</p>
<p>(Diagram below is approximate; I&rsquo;ll explain why and how it was created in a bit.)</p>
<figure>
  <a href="/2020/12/10/wfh-wifi/base.png">
    <img loading="lazy" src="/2020/12/10/wfh-wifi/base.png" />
  </a></figure>
<p>My broadband comes in via a cable connection in the living room - the modem and router/AP sit in the bottom middle of the room. Before WFH times we would occasionally work from home, mostly from the living room, which was the only place with chairs. To get wifi in the bedrooms (one of which is now labeled &ldquo;office&rdquo;), I used a TP-link powerline pack - i.e. one thing stuck to a power socket by the router in the living room, and another in the bedroom. Or the hallway. The tradeoffs were these:</p>
<ul>
<li>We wanted to have it as close to the bedroom as possible, so we&rsquo;d have good reception there.</li>
<li>Having it <em>in</em> the bedroom let us hard-wire the TV to it.</li>
<li>It&rsquo;d have better performance the closer it was to the living room. While I&rsquo;m not sure what the electrical topology of my apartment is, the further from the living room it got, the worse its &ldquo;reception&rdquo; got - i.e. the slower and less reliable its communication with the one in the living room would be.</li>
</ul>
<p>So for the most part, it worked. We&rsquo;d get the odd disconnections or slowness, but it was used mostly on our phones, so we could switch wifi off (or, better yet, just go to sleep or get out of bed). There was one annoying issue though - roaming never worked right.</p>
<ul>
<li>Giving the powerline wifi network a different name worked OK, but we&rsquo;d have to manually switch networks; especially on my partner&rsquo;s iPhone, which tends to be &ldquo;sticky&rdquo; (and requires more taps to switch wifi networks to boot).</li>
<li>Giving the powerline wifi network the same name (SSID) and password worked OK for roaming most of the time, but not always - and now it was quite difficult to tell, when a problem occurred, if it was due to our phones looking for the wrong AP; turning wifi off and on again didn&rsquo;t always fix this.</li>
</ul>
<p>Working from home, connectivity suddenly became <em>important</em>. We have a ton of video meetings, we&rsquo;re using our laptops all day, and sometimes we need to move around quickly - we can&rsquo;t both have meetings in the home office, so one of us needs to switch to the living room table and have the connection <em>work</em> with minimal extra fiddling.</p>
<p>I decided two get a two-pack of Nest Wifi devices (a Router and a Point). Over time, I found a third one was necessary, and still doesn&rsquo;t always work quite right. Unfortunately, running ethernet to the home office isn&rsquo;t currently a possibility (&hellip;but should definitely be a priority for any renovation). After some messing around, I came up with a solution, but figured I&rsquo;d try and understand if I can do better by analyzing the apartment.</p>
<p>So, step 1 - I needed a floor plan. I do not have one of my apartment, but the 3D visualization the realtor provided was still up and had a &ldquo;measurement&rdquo; tool. So I went to <a href="http://floorplanner.com">http://floorplanner.com</a> and used that visualization to sketch up the diagram above. The point of this was the next step: In a wonderful company-internal talk about home wifi (this is a common issue in Israel, where many apartments have <a href="https://en.wikipedia.org/wiki/Merkhav_Mugan">concrete-walled shelters</a>), the neat mapping capability of Unifi&rsquo;s controller software was shown. While I don&rsquo;t own any Unifi gear, I installed the controller software (available as <a href="https://docs.linuxserver.io/images/docker-unifi-controller">a neat docker container</a>), imported my diagram, drew the walls, and positioned my living room router.</p>
<figure>
  <a href="/2020/12/10/wfh-wifi/livingroom-2g-64dBm.png">
    <img loading="lazy" src="/2020/12/10/wfh-wifi/livingroom-2g-64dBm.png" />
  </a><figcaption>Router in the living room</figcaption></figure>
<p>This is, naturally, only an estimate; the AP model is wrong, the -64dBm client sensitivity is just a guess, as are the wall widths and materials; reflections also aren&rsquo;t taken into account (and I suspect the Nest Wifi is making good use of those). The washing machine and dryer in the utility room are modeled as a steel box, perhaps overestimating their attenuation. This is the diagram for 2.4ghz - things are naturally <a href="/2020/12/10/wfh-wifi/livingroom-5g-64dBm.png">worse in 5ghz</a>.</p>
<p>The spot we naturally chose for the point was the hallway (the utility room now seems like it would&rsquo;ve worked better for reception, but it&rsquo;s often quite damp and has no free power sockets anyway). Indeed, the Google Wifi app (which you still use for Nest Wifi) would say that the connection between it and the living room is &ldquo;Great&rdquo; (and that&rsquo;s as much detail as you&rsquo;ll get). But the reception in the office would still be pretty bad, sometimes leading to disconnections.</p>
<figure>
  <a href="/2020/12/10/wfh-wifi/hallway-2g-60dBm.png">
    <img loading="lazy" src="/2020/12/10/wfh-wifi/hallway-2g-60dBm.png" />
  </a><figcaption>Wifi point in the hallway</figcaption></figure>
<p>I suspect the issue here might be that 5ghz connectivity is <em>just barely</em> available (<a href="/2020/12/10/wfh-wifi/hallway-5g-60dBm.png">diagram</a>). At any rate, I decided to throw some more money at the problem, adding a 2nd Point in the office:</p>
<figure>
  <a href="/2020/12/10/wfh-wifi/office-2g-60dBm.png">
    <img loading="lazy" src="/2020/12/10/wfh-wifi/office-2g-60dBm.png" />
  </a><figcaption>Wifi point in the office</figcaption></figure>
<p>There is now most certainly a strong connection between the office point and the hallway point (as well as the laptops in the office), and the hallway point has a good connection with the living room. However, as it turned out, the mesh test did not consistently give me good results - sometimes I would just get &ldquo;poor&rdquo; results. I suspect the issue is the dynamic nature of&hellip; doors.</p>
<p>We tend to get quite loud in meetings, so when we have them, we close the office and living room doors - represented here as wooden walls. It seems that, when the doors are open, the office point could still just barely communicate with the router in the living room. It turns out that Nest does all it can to avoid daisy-chaining, so the office point would connect to the living room router if it could see it. Closing the doors would make that connection worse, but it&rsquo;d take the network some time to reconfigure. However, rebooting the system with all doors closed got a &ldquo;great mesh&rdquo; (presumably daisy-chained, though this can&rsquo;t be seen from the app). That meant that my wifi-signal depended on the particular state of the doors when the mesh network last decided to self-optimize.</p>
<p>The solution I came up with was to move the point from the office to the bedroom (&hellip;where nobody is during the work day), and make sure that door stays open:</p>
<figure>
  <a href="/2020/12/10/wfh-wifi/bedroom-opendoor-2g-60dBm.png">
    <img loading="lazy" src="/2020/12/10/wfh-wifi/bedroom-opendoor-2g-60dBm.png" />
  </a><figcaption>Wifi point in the bedroom, door open</figcaption></figure>
<p>I now have no idea if the network is daisy-chained or not, but it has been working consistently well&hellip; even at night when I stay up writing stuff like this blog post, and the bedroom door is closed.</p>
<p>I&rsquo;d really want to get some CAT7 around the apartment, but for now - this works. Hopefully these tools and methods can help you out as well.</p>
]]></content:encoded></item><item><title>Editing old family videos</title><link>https://lutzky.net/2020/11/07/editing-old-family-videos/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate><guid>https://lutzky.net/2020/11/07/editing-old-family-videos/</guid><description>Messing with old video from tapes, simple audio corrections, splitting and organizing for the family&amp;rsquo;s benefit.</description><content:encoded><![CDATA[<p>In the 90s, my family (along with much of the rest of the world) filmed a lot of home videos. At some point we converted them to what we believed to be DVD for preservation and ease-of-access, but this was actually VCD (which has somewhat worse compatibility), burned on CD-R (which degrades faster than you might think), and optical media has pretty much become extinct as well. In a family visit in 2018 I found the old stash of original video cassettes, flew them with me from Israel to Ireland, and got a local shop called DVD Centre to re-rip them - these guys provide the great service of uploading directly to Dropbox.</p>
<p>I&rsquo;ve been spending some sporadic time on weekends rewatching all of these, cataloguing them into what Googlers call a &ldquo;one-pager&rdquo; - a long document that may span many pages if printed out, but can be loaded by normal software with simple search functionality (a Google Doc, in my case). This is great for searching by name or event to more easily locate the right video. The tapes are still quite long though - usually 1-2 hours, and can be logically split into smaller segments. They also often have audio issues, such as audio only coming out of one side or having very inconsistent volume.</p>
<p>For the last few weekends (2020 is a weird year that gives me more time to do this kind of thing), I&rsquo;ve been working my way through the videos, correcting audio and splitting them into smaller logical chunks. I&rsquo;ve uploaded them to Google Drive and shared with my family, who can now easily access them right from their phones from a different continent. It&rsquo;s been bringing back many memories and feels like a worth preservation effort for these memories.</p>
<p>Here&rsquo;s my workflow, in case it&rsquo;s useful for anyone else:</p>
<h2 id="audio-corrections">Audio corrections</h2>
<p>First, split the audio stream into a separate file so you can modify it with the software of your choice. I use <code>ffmpeg</code> for this. The <code>ffprobe</code> program lets me determine the current audio type, which is <code>aac</code> in my case, so I do:</p>
<pre tabindex="0"><code>ffmpeg -i ORIGINAL_VIDEO.mov -vn -acodec copy output-audio.aac
</code></pre><p>Now I open <code>output-audio.aac</code> in Audacity, and perform:</p>
<ol>
<li>If only one audio stream is available, downmix stereo to mono so it at least comes out of both speakers. (Tracks -&gt; Mix -&gt; Mix Stereo down to Mono)</li>
<li>Normalize, to get the baseline audio levels comfortable (Effects -&gt; Normalize)</li>
<li>As a personal choice, to get the audio levels consistent, I apply extremely aggressive compression - Effects -&gt; Compressor, lowest possible threshold (-60 dB here), maximal possible ratio (10:1), attack time of 0.2 seconds and release time of 1.0 seconds. This destroys any dynamic range, but the forced consistency of audio levels helped me pick up what people are saying - they were being recorded from various distances at varying noise levels.</li>
</ol>
<p>There&rsquo;s a lot more processing you can do here (graphic equalization may be a good idea), but the ones I described worked well as &ldquo;catch-all&rdquo; fixes that I could apply to all audio without thinking about it too much.</p>
<p>Export this in the same audio format (again, aac in my case - I&rsquo;d use <code>ffprobe</code> on the original to see the approximate bitrate, but it&rsquo;s not necessary to match it precisely), and recombine like so:</p>
<pre tabindex="0"><code>ffmpeg -i ORIGINAL_VIDEO.mov -i output-audio-fixed.aac -c:v copy -map 0:v:0 -map 1:a:0 ORIGINAL_VIDEO_sound_fixed.mov
</code></pre><p>This method was both faster and more flexible than using the video editors I have at my disposable.</p>
<h2 id="splitting-video">Splitting video</h2>
<p>At this point, I watch the video through, writing down key points of what&rsquo;s going on with approximate time-codes. It helps to do 3-4 different tapes of this before moving forward, as it gives you a feel for what the &ldquo;logical separation&rdquo; to smaller chunks is. I usually define those chunks as &ldquo;different set of consecutive days&rdquo; (usually just one), but it helps to have all the timecodes available in text so you don&rsquo;t have to re-watch. I recommend using a player that supports faster-than-realtime viewing, such as VLC (speed up, stop on &ldquo;hey what was that&rdquo;, rewind, watch at regular speed). This is the most time-consuming part.</p>
<p>After this, I decide on the section structure, and need to determine the precise frames where I want to split. Since most video players aren&rsquo;t designed to &ldquo;go back one frame&rdquo;, I actually open the video in a video editor (the free HitFilm Express, in my case). I start with the rough time-codes from the previous step, and step frame-by-frame back-and-forth until I find the first and last usable frames of a section. I write these to a <code>points.txt</code> file with the following syntax:</p>
<pre tabindex="0"><code>00:00:00:00-00:15:48:13
00:15:50:17-00:40:14:01
...
</code></pre><p>Here, the format is <code>Hour:Minute:Second:Frame</code> - in my case the video is 25 FPS, so <code>Frame</code> is between <code>00</code> and <code>24</code>.</p>
<p>Next, I want to split the video using ffmpeg - this can be done without recoding, which is much faster (on my laptop - a few seconds per section, as opposed to multiple minutes) and doesn&rsquo;t degrade quality. For the timecodes above, the correct split commands are:</p>
<pre tabindex="0"><code>ffmpeg -ss 0:00:00.000 -i audio_corrected.mov -to 0:15:48.520 -c copy segment_1.mov
ffmpeg -ss 0:15:50.680 -i audio_corrected.mov -to 0:24:23.360 -c copy segment_2.mov
</code></pre><p>These are annoying to create manually, because:</p>
<ol>
<li>The timecode for ffmpeg is given in milliseconds, so 13 frames in 25fps becomes 520 milliseconds.</li>
<li>The <code>-to</code> offset is from the section&rsquo;s <em>start</em> (so it&rsquo;s more of a <code>-length</code>), and subtraction is hard.</li>
</ol>
<p>So, of course, I wrote <a href="https://github.com/lutzky/splitpoints">some code</a> to do this for me. It takes a <code>points.txt</code> as described above, and outputs the appropriate series of commands.</p>
<p>All that&rsquo;s left to do is to let the commands run, upload the videos, and wait for Google Drive&rsquo;s video-rendering to catch up.</p>
<p>Good luck on your video preservation adventure!</p>
]]></content:encoded></item><item><title>Ass-cover</title><link>https://lutzky.net/2019/07/12/asscover/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://lutzky.net/2019/07/12/asscover/</guid><description>On the importance of blameless postmortem culture, demonstrated via its antithesis.</description><content:encoded><![CDATA[<p>When presenting <a href="https://landing.google.com/sre/sre-book/chapters/postmortem-culture/">SRE postmortem culture</a>, and the importance of its blamelessness, I always find it useful to present its antithesis. As it&rsquo;s often-claimed that the Eskimo have many words for snow, my home country of Israel has a word for covering one&rsquo;s ass - כסת&quot;ח, pronounced /kastáχ/, an abbreviation of כיסוי תחת. This abbreviation is impressively conjugatable; for example, the term מכוסת&quot;ח roughly corresponds to &ldquo;appears as though it was made while covering one&rsquo;s ass&rdquo;.  I have it on good authority that the italian term &ldquo;Paraculo&rdquo; is closely related.</p>
<p><a href="https://orikatz.wordpress.com/2012/06/10/kastac/">Ori Katz&rsquo;s blog post</a> provides a wonderful introduction to this concept. I bring this translated version before you as a warning example of the importance of blame-free culture.</p>
<p>Notes in (OL:) are translator&rsquo;s notes. I have attempted to represent the original (Hebrew) post as accurately as possible.</p>
<!-- raw HTML omitted -->
<p>One of the common and erroneous beliefs is that the primary business of people responsible for something - be they politicians, military commanders, civilian managers etc. - is managing the thing they&rsquo;re responsible for. This belief is fed by the illusion of control, which has us overestimating the importance of conscious actions of people as reasons for things that happen, and underestimating blind luck and circumstances that are outside the control of those involved.</p>
<p>The truth is that many things happen for no reason, by chance. A commander might make all the correct decisions in battle, but still lose due to an error in judgement by his superiors or subordinates. A businessperson might make the worst possible decisions, and still turn a profit because the entire field of his business has had an impressive profit surge due to an external reason, or because a competitor went bankrupt. A minister can make correct decisions that would only affect the following term of office, and be criticized for decisions made by his predecessor or a global economic crisis outside of their control.</p>
<p>Therefore, in many cases the best managers, politicians and commanders (and anyone else who manages anything) are those who excel at the following task: Make the bad things that happened during their shift look like someone else&rsquo;s fault, as external circumstances outside their control or bad luck, and make the good things that happened during their tenure look like they happened thanks to them. Truly, many of the managers I&rsquo;ve met are experts in this matter - the ass-covering ability.</p>
<p>Ass-covering is far more than military slang intending to describe amusing phenomena. Ass-covering is the way a world works when there&rsquo;s uncertainty about people&rsquo;s ability to properly perform their job; when there&rsquo;s no way to accurately measure the output of most people in most professions, especially higher-ranking ones, and it&rsquo;s impossible to separate individual contributions from external influences. Ass-covering is the way our world works.</p>
<p>Many things which seem as though they shouldn&rsquo;t exist in a logical world with rational humans have their roots in ass-covering. For example, recruitment screening agencies.</p>
<p>If there are ten measures of stupidity in the business world, recruitment screening agencies have taken at least eight upon themselves<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Upon first exposure to the phenomenon, people are astounded by its scope, the superficiality of the tests and interviews, and the cheap psychology behind the whole matter. The truth is that recruitment screening agencies exist for a very good reason: it&rsquo;s difficult to find good employees. People (especially those who read my post on the matter) don&rsquo;t represent themselves fairly during job interviews, school grades don&rsquo;t accurately predict the required traits for an excellent employee, and ultimately hiring a new employee is always a wager. And once there&rsquo;s uncertainty, ass-covering slithers its way in.</p>
<p>When an HR officer at a certain company needs to hire new people, they can make this wager themselves, or they can send them to one of the recruitment screening agencies. There, the potential employees will pass a variety of tests which, as is known for decades, predict next-to-nothing; they will be asked to draw trees in order to see that they draw pretty and optimistic trees; to fill in blanks such as &ldquo;the child was sad when &hellip;&rdquo; (recommended: &ldquo;when an analyst at the recruitment screening agency decided he wasn&rsquo;t a good fit for the job, and he was forced to kill them&rdquo;), et cetera. If the candidates turn out to be bad employees, the HR officer can always say &ldquo;they passed ScreenAgent&rdquo;. It isn&rsquo;t their responsibility.</p>
<p>In his book &ldquo;Rationality, Fairness, Happiness&rdquo;, economics nobel laureate Daniel Kahneman describes tests he performed decades ago on <a href="https://en.wikipedia.org/wiki/Israel_Defense_Forces">IDF</a> officer&rsquo;s course candidates (it&rsquo;s possible the same tests are being performed today). He and his colleagues gave soldiers various tasks, and observed which soldiers display leadership, which shy away, and so forth. In post-facto checks, Kahneman found that these assessments had very poor predictive abilities for the soldiers' success as officers, but despite him notifying his superiors about this they kept the tests in their present state, and his psychologist friends simply refused to accept the fact that their intuition isn&rsquo;t as strong as they had thought. At the end of the day, IDF recruiters also need ass-covering to avoid being blamed for placing people in roles they are unfit for.</p>
<p>Ass-covering culture is very developed in the IDF, and it explains the variety of useless briefings and debriefings performed for every fool thing, so - heaven forbid - nobody will be able to claim that LCDR<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> John Doe didn&rsquo;t draw conclusions and respond to the incident. As an amusing example I&rsquo;ve come across recently, see the recommendations at the end of the following document:</p>
<p>(OL: The following is a best-fit translation of a military debriefing/&ldquo;postmortem&rdquo; document. See original below. Its standard format is instantly identifiable to anyone that has ever read an IDF document attempting to look official; this includes the wonky formatting and enumeration of every sentence. &ldquo;Sunday Culture&rdquo; is an event held in many units that, during the first day of the week, soldiers are taken to various cultural or entertainment events.)</p>
<blockquote>
<p><strong>Subject: Assault of a soldier by a peacock during the course of Sunday Culture.</strong></p>
<p>Battalion HSN, lieutenant commander</p>
<ol>
<li><strong>General</strong>
<ol>
<li><strong>Description of the event:</strong> In 11/9/05 the battalion performed Sunday Culture at the Jerusalem Biblical Zoo. During this visit one of the soldiers provoked a peacock displayed at the location, and was attacked by it.</li>
<li>Involved in the event:
<ul>
<li>Igal Zaguri (OL: the following is the ID) 72924690</li>
<li>A peacock of the biblical zoo</li>
</ul>
</li>
</ol>
</li>
<li><strong>Findings:</strong>
<ol>
<li>The soldier Igal Zaguri arrived for a visit at the biblical zoo in Jerusalem during the battalion Sunday Culture.</li>
<li>During the visit, it was clarified to the soldiers that they should stay away from the animals that roam the zoo freely.</li>
<li>During a visit to the bird section, the soldier Igal approached one of the peacocks and began provoking it.</li>
<li>The peacock saw the soldier as a threat, attacked him and injured his leg lightly.<!-- raw HTML omitted --><strong>Additional findings:</strong></li>
<li>The peacock is male and saw the provocation as a territorial offense.</li>
<li>The soldier Igal Zaguri is known as a problematic soldier.</li>
<li>During the provocation, an additional soldier was present and threw stones at the peacock.</li>
</ol>
</li>
<li><strong>Conclusions:</strong>
<ul>
<li><strong>Cause:</strong> The attack happened as a response to the soldier&rsquo;s provocation of the animal.</li>
<li><strong>Things worth preserving:</strong>
<ul>
<li>Vigilance of the commanders to the event and rapid treatment of the casualty</li>
</ul>
</li>
<li><strong>Outcome:</strong> A slight injury to the right leg of soldier Igal Zaguri.</li>
</ul>
</li>
<li><strong>Lessons learned and recommendations:</strong>
<ol>
<li>A safety briefing needs to be performed prior to any military visit to establishments involving contact with animals.</li>
<li>A lecture needs to be given in the units about contacting animals in the base.</li>
<li>Soldiers need to understand the problematic nature of provoking peacocks.</li>
</ol>
</li>
</ol>
<p><strong>For immediate distribution to all command courses in the IDF</strong></p>
<p><!-- raw HTML omitted -->Daniel Peleg, Sergeant<!-- raw HTML omitted -->MNHIG 75<!-- raw HTML omitted --><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
</blockquote>
<!-- raw HTML omitted -->
<p>Translator&rsquo;s note: It turns out that this debriefing is a hoax. A 2005 <a href="http://www.ynet.co.il/articles/0,7340,L-3161734,00.html">news article</a> states this. After describing the debriefing shortly, the article states:</p>
<blockquote>
<p>Sounds convincing? Yes, as it turns out. Many officers and soldiers that received this debriefing via (OL: internal) email were convinced that the event did, in fact, happen. Even the chief armored command stated that they received the email and did not doubt it.&quot;</p>
<p>And now the truth: There is no soldier by the name Igal Zaguri in battalion 75, and on September 11th the battalion was in Gaza, preparing for the disengagement. Some in the IDF are not smiling. According to military sources, using military email is not intended for distribution of jokes; furthermore the usage of military topics such as battalion number was frowned upon, and now there are attempts to locate the soldier and possibly court-martial them.</p>
</blockquote>
<p>The translator does not believe that this debriefing being fake detracts from the value of this post.</p>
<!-- raw HTML omitted -->
<p>Why does this happen? On the one hand, the IDF has a strict hierarchy and the principle of command responsibility, and on the other hand the IDF deals with tasks that are naturally dangerous and likely to have casualties, especially training accidents. Therefore, commanders in the military must ass-cover (OL: לכסת&quot;ח, yes, this is a verb) themselves at a higher intensity than managers in the civilian market.</p>
<p>A similar phenomenon is the growth of consultancy companies, which perform projects of organizational, operative and strategic consulting for large companies. In many cases the purpose of the consultancy company is merely to provide an &ldquo;objective&rdquo; approval to a reform a manager wanted to perform anyway, and essentially supply that manager with ass-cover (OL: noun) in case the reform fails (&ldquo;What? It wasn&rsquo;t me, the consultants said to do this&rdquo;). I worked in a company like this for almost two years, and for fairness I must state that there were also successful projects where this wasn&rsquo;t their purpose, or cases in which the recommendations contradicted the opinion of management and higher-ups in the consultancy company insisted on professional integrity, but there are many projects which are nothing but part of the ass-cover phenomena. It&rsquo;s just very convenient to pass the buck to some external &ldquo;expert&rdquo;, blame them in case misfortune occurs, and take credit for hiring them in case fortune occurs. For the same reason politicians, especially in Israel, start committees instead of making decisions. The committees seat a variety of bureaucrats which are easy to blame in case some reform or another fails, and often enough the finger of blame is pointed at the bureaucrats rather than the politicians that appointed them.</p>
<p>There is variance in the depth of ass-cover between organizations, and it might be worth asking what the source of this variance is - can the phenomenon be reduced?</p>
<p>In my opinion, the answer to this question lies in the &ldquo;concept of failure&rdquo; among the deciding ranks - in the case of commanders or managers, it is those above them in the hierarchy, and in the case of politicians it&rsquo;s us, the public. In the military, as I wrote, the concept of failure references &ldquo;command responsibility&rdquo;. If some base sentry does something stupid, the base commander is also responsible for the results. Furthermore, there aren&rsquo;t too many second chances in the military, and one sufficiently-severe mistake can end with dismissal. There is, of course, a good reason for this concept of failure, and it certainly has positive implications, but the ass-cover culture is the negative side of the matter. In other organizations where a manager is expected to be responsible for every little detail, and every manager that makes a mistake is dismissed without a second thought, ass-covering will flourish. Managers will spend more time preventing future blame of themselves, and less time managing the field they&rsquo;re responsible for. For politicians as well, public and media criticism tends to be populistic, which supports ass-cover culture. Sometimes it seems, mainly with the poorer prime ministers we&rsquo;ve had, that daily life is dictated by attempts to evade the current media storm and not be decision-making and working towards some policy.</p>
<p>Organizations with weaker ass-covering are ones where it&rsquo;s very obvious who&rsquo;s responsible for what, it&rsquo;s relatively easy to measure results and output, and there is an ongoing effort not to judge solely by post-facto results. Sometimes the managers who made mistakes are actually the ones you want to keep employed, as they will be more careful going forward, but few organizations internalize this truth.</p>
<p>Ass-covering is a basic incentive deep in the heart of the modern world, and can certainly explain a variety of additional phenomena not stated here that at first glance look like absolute stupidity. When attempting to think about why the world is the way it is, one should not be confused and assign imagined motives to people, different from their real ones. Yes, managers also attempt to form a long-term strategy for their company, and many military commanders also make tough choices in stressful situations and take responsibility, and I honestly believe that deep down, most of our politicians are truly interested to drive forward the ideology they believe in. But at the end of the day we all act according to the incentives the system poses against us, and ass-covering is one hell of an incentive.</p>
<h2 id="appendix-related-terms">Appendix: Related terms</h2>
<p>I highly recommend understanding the related term &ldquo;Sentry Syndrome&rdquo; (תסמונת הש&quot;ג), explained in the Wikipedia entry for <a href="https://en.wikipedia.org/wiki/Night_of_the_Gliders">Night of the Gliders</a>.</p>
<p>A related slang term to כסת&quot;ח/Kastach/Asscover is בלת&quot;ם/Baltam. It&rsquo;s an abbreviation of בלתי מתוכנן, or &ldquo;unplanned&rdquo;, but is used as a noun (one Baltam, many Baltamim), representing an unexpected event that throws a wrench in your plans. This is often the result of poor planning, possibly as a result of lack of taking responsibility due to ass-cover. The presence of these within blameful culture also necessitates additional ass-covering, altogether creating the בלת&quot;ם-כסת&quot;ח cycle.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>OL: This is a Talmud reference. Originally: &ldquo;Ten measures of beauty descended to the world, nine were taken by Jerusalem.&rdquo;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>OL: Lieutenant Commander, the 4th rank of officers in naval terminology.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>For those familiar with the font, the signature was originally in Guttman Yad Brush; Comic Sans is an appropriate approximation.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><title>Mutation testing in Go</title><link>https://lutzky.net/2018/08/05/mutation-testing/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><guid>https://lutzky.net/2018/08/05/mutation-testing/</guid><description>Your test coverage might be very high, but it&amp;rsquo;s possible that your tests wouldn&amp;rsquo;t notice if you deleted some code. Let&amp;rsquo;s check for that automatically!</description><content:encoded><![CDATA[<p>Now that we&rsquo;re done <a href="/2018/08/04/ioutil-yakshave/">yak shaving</a>, we can start talking about mutation testing. As an engineer at Google, I often use the Go programming language (which I really enjoy), so that is my choice for these examples; however, mutation testing is available for other languages.</p>
<h3 id="constructing-bolson-people">Constructing Bolson people</h3>
<p>Let&rsquo;s start with an example; we have a <code>people</code> package, where a person has an age and a name. For these people to be <a href="https://polygon.com/zelda-breath-of-the-wild-guide-walkthrough/2017/3/30/15127770/from-the-ground-up-side-quest-locations-son-characters-find-help-grante-secret-shop-merchant-hidden">appropriate for our quest</a>, they need to be over 18, have names with at least two whitespace-separated words in them, and have those names end with <em>-son</em>. You can claim those are the strangest software project requirements you&rsquo;ve ever had all you want, I know better.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">people</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;strings&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">name</span> <span class="kt">string</span>
	<span class="nx">age</span>  <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkAge</span><span class="p">(</span><span class="nx">p</span> <span class="nx">person</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">age</span> <span class="p">&gt;</span> <span class="mi">18</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkValidName</span><span class="p">(</span><span class="nx">p</span> <span class="nx">person</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Fields</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">))</span> <span class="p">&gt;</span> <span class="mi">1</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">checkBolsonPolicy</span><span class="p">(</span><span class="nx">p</span> <span class="nx">person</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">HasSuffix</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="s">&#34;son&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">validatePerson</span><span class="p">(</span><span class="nx">p</span> <span class="nx">person</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nf">checkAge</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nf">checkValidName</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nf">checkBolsonPolicy</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Now, <code>validatePerson</code> performs the overall validation, but we&rsquo;ve split it into smaller <code>check*</code> functions to make them simple to test independently, in case the requirements get more complicated in the future. Here are the tests:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">people</span>

<span class="kn">import</span> <span class="s">&#34;testing&#34;</span>

<span class="kd">type</span> <span class="nx">testSet</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">person</span> <span class="nx">person</span>
	<span class="nx">want</span>   <span class="kt">bool</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">runTestSet</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">,</span> <span class="nx">check</span> <span class="kd">func</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">tests</span> <span class="nx">testSet</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">t</span><span class="p">.</span><span class="nf">Helper</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
		<span class="nx">got</span> <span class="o">:=</span> <span class="nf">check</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">person</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">want</span> <span class="o">!=</span> <span class="nx">got</span> <span class="p">{</span>
			<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;check(%#v) = %t; want %t&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">person</span><span class="p">,</span> <span class="nx">got</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestCheckAge</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">runTestSet</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">checkAge</span><span class="p">,</span> <span class="nx">testSet</span><span class="p">{</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">age</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span> <span class="kc">false</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">age</span><span class="p">:</span> <span class="mi">17</span><span class="p">},</span> <span class="kc">false</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">age</span><span class="p">:</span> <span class="mi">19</span><span class="p">},</span> <span class="kc">true</span><span class="p">},</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestCheckValidName</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">runTestSet</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">checkValidName</span><span class="p">,</span> <span class="nx">testSet</span><span class="p">{</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">},</span> <span class="kc">false</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Ohad Lutzky&#34;</span><span class="p">},</span> <span class="kc">true</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;John J.J. Schmidt&#34;</span><span class="p">},</span> <span class="kc">true</span><span class="p">},</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestCheckBolsonPolicy</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">runTestSet</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">checkBolsonPolicy</span><span class="p">,</span> <span class="nx">testSet</span><span class="p">{</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Hudson&#34;</span><span class="p">},</span> <span class="kc">true</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Rhondson&#34;</span><span class="p">},</span> <span class="kc">true</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Eriksen&#34;</span><span class="p">},</span> <span class="kc">false</span><span class="p">},</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestValidPerson</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">runTestSet</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">validatePerson</span><span class="p">,</span> <span class="nx">testSet</span><span class="p">{</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="s">&#34;Rito Fryson&#34;</span><span class="p">,</span> <span class="mi">19</span><span class="p">},</span> <span class="kc">true</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="s">&#34;Greyson&#34;</span><span class="p">,</span> <span class="mi">20</span><span class="p">},</span> <span class="kc">false</span><span class="p">},</span>
		<span class="p">{</span><span class="nx">person</span><span class="p">{</span><span class="s">&#34;Zora Kapson&#34;</span><span class="p">,</span> <span class="mi">15</span><span class="p">},</span> <span class="kc">false</span><span class="p">},</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div><p>Running <code>go test -cover</code> will show us that we have 100% test coverage! Hurray! However, danger lurks. In a couple of months, a newcomer to the team will refactor <code>validatePerson</code> to add logging indicating <em>why</em> a person is considered invalid, all the tests will pass&hellip; and suddenly one &ldquo;Christian Eriksen&rdquo; is counted by the system as valid. How can this be? All the tests still pass, and we had 100% coverage!</p>
<h3 id="using-mutation-testing">Using mutation testing</h3>
<p>Let&rsquo;s see if mutation testing can help us out. I put my code in <code>$GOPATH/src/github.com/lutzky/people</code>, so I install and run <code>zimmski/go-mutesting</code>:</p>
<pre tabindex="0"><code>$ go get -v github.com/zimmski/go-mutesting
$ go-mutesting github.com/lutzky/people/...
PASS &quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.0&quot; with checksum 252162809c884e5616872b71196c90df
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gd">--- /home/lutzky/gopath/src/github.com/lutzky/people/people.go  2018-08-05 00:13:44.333319200 +0100
</span><span class="gd"></span><span class="gi">+++ /tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.1    2018-08-05 10:15:30.013388991 +0100
</span><span class="gi"></span><span class="gu">@@ -22,5 +22,5 @@
</span><span class="gu"></span> }

 func validatePerson(p person) bool {
<span class="gd">-       return checkAge(p) &amp;&amp; checkValidName(p) &amp;&amp; checkBolsonPolicy(p)
</span><span class="gd"></span><span class="gi">+       return checkAge(p) &amp;&amp; checkValidName(p) &amp;&amp; true
</span><span class="gi"></span> }

</code></pre></div><pre tabindex="0"><code>FAIL &quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.1&quot; with checksum 996748ab09eeca8feb3f87ecf23b8319
PASS &quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.2&quot; with checksum 7be514fe57e53f4d02ce1e128641333f
PASS &quot;/tmp/go-mutesting-036340603//home/lutzky/gopath/src/github.com/lutzky/people/people.go.3&quot; with checksum 88a83b2731fda42ae4f3ac9350191c9f
The mutation score is 0.750000 (3 passed, 1 failed, 0 duplicated, 0 skipped, total is 4)
</code></pre><p>What the mutation testing package does is take the test-covered code (all of <code>people.go</code>, in our case) and attempt to modify it at random, so that it will still build, but the logic will change; things like removing statements, changing conditions in <code>if</code> statements, or in this case - changing an arbitrary boolean value to <code>true</code>. If the code is correct and tested properly, any such mutated version of the code (&ldquo;mutant&rdquo;) should not pass the tests (the tests should &ldquo;kill the mutant&rdquo;).</p>
<p>In this case, it appears that modifying <code>checkBolsonPolicy(p)</code> to <code>true</code> (which is the same as just removing it and the preceding <code>&amp;&amp;</code>) does not cause any tests to fail. Indeed, in <code>TestValidPerson</code>, none of the test cases violate the Bolson policy! If we try adding a test case <code>person{&quot;Bob Rasmussen&quot;, 15}</code> this mutant would still survive, as <code>checkAge(p)</code> would return false; so we have to make sure <code>checkBolsonPolicy</code> on its own is sufficient to identify this test case as invalid. Indeed, adding <code>person{&quot;Bob Rasmussen&quot;, 19}</code> to the test cases for <code>TestValidPerson</code> gets a mutation score of 1.0, fixing our problem.</p>
<h3 id="drawbacks">Drawbacks</h3>
<p>Mutation testing can sometimes be noisy. For example, if we write <code>validatePerson</code> like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">validatePerson</span><span class="p">(</span><span class="nx">p</span> <span class="nx">person</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="kc">true</span>
	<span class="nx">result</span> <span class="p">=</span> <span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="nf">checkAge</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
	<span class="nx">result</span> <span class="p">=</span> <span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="nf">checkValidName</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
	<span class="nx">result</span> <span class="p">=</span> <span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="nf">checkBolsonPolicy</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></div><p>&hellip;then the following mutant would survive:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gd">--- bla  2021-05-09 15:57:12.242530400 +0100
</span><span class="gd"></span><span class="gi">+++ bla  2021-05-09 15:57:12.242530400 +0100
</span><span class="gi"></span><span class="gu">@@ -23,7 +23,7 @@
</span><span class="gu"></span> func validatePerson(p person) bool {
         result := true
<span class="gd">-        result = result &amp;&amp; checkAge(p)
</span><span class="gd"></span><span class="gi">+        result = true &amp;&amp; checkAge(p)
</span><span class="gi"></span>         result = result &amp;&amp; checkValidName(p)
         result = result &amp;&amp; checkBolsonPolicy(p)
</code></pre></div><p>I would treat this mutant possibility as very &ldquo;meh&rdquo;. So much like you shouldn&rsquo;t necessarily fail your build if coverage is less than 100%, you probably shouldn&rsquo;t fail your build if the mutation score is less than 1.0, and quite likely not based on the mutation score at all. It would help if there were a way to annotate lines as &ldquo;do not mutate&rdquo;. While zimmski/go-mutesting does support blacklisting of specific mutants, these blacklists are based on the checksum of the mutated code, which would have to be updated every time the tested code changes.</p>
<p>Happy testing!</p>
]]></content:encoded></item><item><title>The osutil yakshave</title><link>https://lutzky.net/2018/08/04/ioutil-yakshave/</link><pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate><guid>https://lutzky.net/2018/08/04/ioutil-yakshave/</guid><description>How I had to fix zimmski/osutil in order to write the Mutation Testing post.</description><content:encoded><![CDATA[<p>I&rsquo;ve been planning to write a blog post about <em>Mutation Testing</em>, and finally got around to it a couple of weeks ago. I set up my example, and looked to some publicly-available mutation testing tools for my programming language of choice, Go (I get to use it quite often as an engineer in Google). The best-maintained one appears to be <a href="https://github.com/zimmski/go-mutesting">go-mutesting</a>, so I figured I&rsquo;ll try it out. Unfortunately, I ran into a build issue with one of its depdencies:</p>
<pre tabindex="0"><code>../../../github.com/zimmski/osutil/capture.go:79: cannot assign to _Cmacro_stderr()
../../../github.com/zimmski/osutil/capture.go:79: cannot assign to _Cmacro_stdout()
../../../github.com/zimmski/osutil/capture.go:103: cannot assign to _Cmacro_stderr()
../../../github.com/zimmski/osutil/capture.go:103: cannot assign to _Cmacro_stdout()
</code></pre><p><a href="https://en.wiktionary.org/wiki/yak_shaving">Yak shaving</a> time! This was covered in <a href="https://github.com/zimmski/osutil/issues/8">zimmski/osutil#8</a>, which showed it was an incompatibility with Go 1.10.</p>
<h3 id="testing-the-issue">Testing the issue</h3>
<p>It turns out there&rsquo;s a really convenient way to check this using Docker (which I finally took the time to learn for the <a href="https://github.com/lutzky/wamc">umpteenth iteration</a> of <a href="/2011/12/15/the-show-downloading-stack-part-n1/">the show downloading stack</a>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker run -it --rm golang:1.9 go get -v github.com/zimmski/osutil
</code></pre></div><p>This will download a minimal image for getting (using git), building, and running Go code, extract it, get the <code>zimmski/osutil</code> package, run the tests (successfully), and clean up after itself, leaving no trace on your system other than the cached base image for <code>golang:1.9</code>. Change the <code>1.9</code> to a <code>1.10</code> and the process will be identical, except for the version of Go, and fail. In my opinion that&rsquo;s pretty astoundingly convenient, especially as the whole thing takes just under 38 seconds. We&rsquo;re cheating here, of course - docker needs to be preinstalled, and you could solve this in other ways (e.g. <a href="https://github.com/moovweb/gvm">gvm</a>). However, docker is pretty ubiquitous nowadays (Google Cloud Shell conveniently includes it), and this method does have the benefit of testing on a completely clean image (no surprise dependencies).</p>
<p>We can use a similar technique to test our fix, once we have it: On the host, <code>go get github.com/zimmski/osutil</code>, and from the downloaded directory, run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker run -it --rm -v <span class="nv">$PWD</span>:/go/src/github.com/zimmski/osutil golang:1.10 <span class="se">\
</span><span class="se"></span>  bash -c <span class="s2">&#34;cd /go/src/github.com/zimmski/osutil; go get -t -v; go test -v&#34;</span>
</code></pre></div><p>This will mount the current directory into the <code>GOPATH</code> of the docker image (conveniently at <code>/go</code>), get the required dependencies, and run our tests. You could modify this one-liner to not remove the image every time, but seeing as it only takes 7 seconds on consequent runs, I didn&rsquo;t bother.</p>
<h3 id="the-issue-and-the-fix">The issue and the fix</h3>
<p>The root cause here is in <code>capture.go</code>, which provides the <code>Capture</code> and <code>CaptureWithCGo</code> functions. These get a <code>func()</code> callback, capture whatever it outputs to <code>stdout</code> and <code>stderr</code>, and return them as a string. The <code>Capture</code> function only works with pure Go code, and <code>CaptureWithCGo</code> is meant to support code that includes CGo as well. The latter assumes that the CGo code would use the C <code>stdout</code> and <code>stderr</code> globals (which are <code>FILE *</code> pointers which are used by <code>printf</code> and <code>fprintf</code>), so it creates a pipe and points <code>stdout</code> and <code>stderr</code> at it. This has two problems:</p>
<ol>
<li>Assigning to <code>stdout</code> and <code>stderr</code> is no longer allowed in Go 1.10 (and, according to <a href="https://github.com/golang/go/issues/25221">golang/go#25221</a>, was never <em>intentionally</em> allowed).</li>
<li>Functions could output to standard output and error in other ways, such as calling external programs or using the <code>write</code> system call. This is true for the <code>Capture</code> function as well, but I wanted to modify as little behavior as possible.</li>
</ol>
<p>Technically, the behavior-preserving solution could be to just use <code>freopen</code> instead, but I didn&rsquo;t know about it at the time. In general, capturing output using redirects seems to me like it should capture <em>all</em> output, regardless of how it&rsquo;s generated.</p>
<p>To accomplish this, let&rsquo;s first have a look a how shells accomplish redirects.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ strace -f bash -c <span class="s1">&#39;/bin/echo hello &gt; /tmp/redirected&#39;</span>
...
<span class="o">[</span>pid 20210<span class="o">]</span> openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/tmp/redirected&#34;</span>, O_WRONLY<span class="p">|</span>O_CREAT<span class="p">|</span>O_TRUNC, 0666<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
<span class="o">[</span>pid 20210<span class="o">]</span> dup2<span class="o">(</span>3, 1<span class="o">)</span>                  <span class="o">=</span> <span class="m">1</span>
<span class="o">[</span>pid 20210<span class="o">]</span> close<span class="o">(</span>3<span class="o">)</span>                    <span class="o">=</span> <span class="m">0</span>
<span class="o">[</span>pid 20210<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/bin/echo&#34;</span>, <span class="o">[</span><span class="s2">&#34;/bin/echo&#34;</span>, <span class="s2">&#34;hello&#34;</span><span class="o">]</span>, 0x556c1736e260 /* <span class="m">30</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
...
</code></pre></div><p>Here, strace runs a parent bash process (pid 20209, not shown in the trace above), which forks into PID 20210 which ultimately ends up running <code>/bin/echo</code> (and not the <code>echo</code> bash builtin). To accomplish the redirect, bash does the following:</p>
<ol>
<li>Open the requested file, which ends up being file descriptor 3.</li>
<li>Use the <code>dup2</code> system call to overwrite file descriptor 1 (standard output) with the same file descriptor as 3. Now this open file has two descriptors pointing at it.</li>
<li>Close file descriptor 3; this reduces the number of file descriptors pointing at <code>/tmp/redirected</code> back to one.</li>
<li>Finally, uses <code>execve</code> to replace the running program with <code>/bin/echo</code>, which will (as always) output to file descriptor 1, which now points to <code>/tmp/redirected</code>.</li>
</ol>
<p>No matter how <code>echo</code> internally causes output to appear (even if it ran yet another binary), the output would always go to <code>/tmp/redirected</code>.</p>
<p>It&rsquo;s worth mentioning that the <code>dup</code> system call is similar to the <code>dup2</code> system call, but the caller doesn&rsquo;t choose the destination file descriptor; instead, the first available file descriptor is used and returned.</p>
<p>This technique is the basic one behind <a href="https://github.com/zimmski/osutil/pull/9/commits/f15804f0e6285e5634cf78f703ca544a6936a8fa">the fix</a>. The old method was, roughly:</p>
<ol>
<li>Save the old <code>os.Stdout</code>, <code>os.Stderr</code>, <code>C.stdout</code>, and <code>C.stderr</code> objects</li>
<li>Open a pipe - this gets you two file descriptors (<code>w.Fd()</code> and <code>r.Fd()</code>)</li>
<li>Point the Go objects <code>os.Std{out,err}</code> at <code>w.Fd()</code> by just assigning <code>w</code> to them</li>
<li>Point the C objects <code>C.std{out,err}</code> at <code>w.Fd()</code> by opening it with <code>fdopen</code> and assigning the result to them. (This no longer works)</li>
<li>Call the callback function</li>
<li>Copy from the <code>r</code> end of the pipe to a buffer using <code>io.Copy</code>.</li>
<li>When the method returns (using <code>defer</code>), restore the four objects we saved</li>
</ol>
<p>The new technique is, roughly:</p>
<ol>
<li>Use <code>syscall.Dup</code> to save file descriptors 1 and 2 (standard output and error)</li>
<li>Open the pipe as before</li>
<li>Use <code>syscall.Dup2</code> to overwrite file descriptors 1 and 2 with <code>w.Fd()</code></li>
<li>When the method returns, restore the original file descriptors</li>
<li>Call the callback function</li>
<li>Close <em>all</em> instances of the <code>w</code> end of the pipe</li>
<li>Copy from the <code>r</code> end of the pipe to a buffer using <code>io.Copy</code>.</li>
<li>WHen the method returns, restore the original file descriptors 1 and 2</li>
</ol>
<p>When closing <em>all</em> instances of the <code>w</code> end of the pipe, this means <code>w.Fd()</code>, <code>syscall.Stdout</code>, and <code>syscall.Stderr</code>. If any of those three stays open, the underlying file descriptor will still count as open, and <code>io.Copy</code> will never return.</p>
<p>To demonstrate this, let&rsquo;s take a look at a simplified version (no error handling, don&rsquo;t try this at home):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">const</span> <span class="nx">closeStdout</span> <span class="p">=</span> <span class="kc">true</span>

<span class="kd">func</span> <span class="nf">capture</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
        <span class="nx">r</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Pipe</span><span class="p">()</span>

        <span class="nx">oldStdout</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nf">Dup</span><span class="p">(</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>

        <span class="nx">syscall</span><span class="p">.</span><span class="nf">Dup2</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nf">Fd</span><span class="p">()),</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>
        <span class="nf">log</span><span class="p">(</span><span class="s">&#34;Writing to stdout (actually to pipe)&#34;</span><span class="p">)</span>

        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Hello, world!&#34;</span><span class="p">)</span>

        <span class="nf">log</span><span class="p">(</span><span class="s">&#34;Closing write-end of pipe&#34;</span><span class="p">)</span>
        <span class="nx">w</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

        <span class="k">if</span> <span class="nx">closeStdout</span> <span class="p">{</span>
                <span class="nf">log</span><span class="p">(</span><span class="s">&#34;Closing stdout&#34;</span><span class="p">)</span>
                <span class="nx">syscall</span><span class="p">.</span><span class="nf">Close</span><span class="p">(</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="kd">var</span> <span class="nx">b</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>

        <span class="nf">log</span><span class="p">(</span><span class="s">&#34;Copying from pipe to buffer&#34;</span><span class="p">)</span>
        <span class="nx">io</span><span class="p">.</span><span class="nf">Copy</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

        <span class="nf">log</span><span class="p">(</span><span class="s">&#34;Restoring stdout&#34;</span><span class="p">)</span>
        <span class="nx">syscall</span><span class="p">.</span><span class="nf">Dup2</span><span class="p">(</span><span class="nx">oldStdout</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>

        <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><p>With <code>closeStdout</code> set to true, everything works correctly. However, with it false, <code>io.Copy</code> will hang.</p>
<p>The full code is in <a href="https://play.golang.org/p/Xg2iajdiuNN">the playground</a>, but because of <a href="https://github.com/golang/go/issues/24610">golang/go#24610</a>, for which the fix has yet to be rolled out, <code>Dup2</code> will fail, so you need to copy the code over to your local machine.</p>
]]></content:encoded></item><item><title>The Matzliah method</title><link>https://lutzky.net/2017/10/23/matzliah/</link><pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate><guid>https://lutzky.net/2017/10/23/matzliah/</guid><description>An attempt at explaining שיטת מצליח, a method to take advantage of people not paying attention.</description><content:encoded><![CDATA[<p>My native language, Hebrew, has a useful term - the &ldquo;Matzliah&rdquo; method. It&rsquo;s documented in a <a href="https://he.wikipedia.org/wiki/%D7%A9%D7%99%D7%98%D7%AA_%D7%9E%D7%A6%D7%9C%D7%99%D7%97">hebrew wikipedia entry</a>, but my <a href="https://en.wikipedia.org/wiki/Draft:Matzliah_Method">translation</a> can&rsquo;t make it past the draft stage. I&rsquo;ll add my translation here for posterity:</p>
<p>The &ldquo;Matzliah&rdquo; (Hebrew: מַצְלִיחַ) method is a common phrase in Hebrew slang, translating roughly as &ldquo;Works&rdquo;, which describes exploitation of other people&rsquo;s lack of attention, and capitalization on their account. Its name is based on a joke, which tells of a restaurant customer, who discovers a charge for an item called &ldquo;Matzliah&rdquo;, which they don&rsquo;t remember ordering. To the question of what dish this is, the waiter responds: &ldquo;If the customer pays, it works (matzliah)&rdquo;.</p>
<p>In its most common and most negative description, the method exists between two parties who have a business or other relationship. It is based on premeditated and hidden dishonesty, and includes an attempt of one side to perform an action that affects the other. The effect of the action depends on the second party and their ability to detect the attempt. With detection, the first party withdraws the action.</p>
<p>The Israeli law of consumer protection determines in section 13D1 (A) that if a customer was overcharged in an ongoing deal beyond the amount the business-owner is allowed to charge according to the details of their agreement, the business-owner will return the excess with interest and indexation, in 4 business days. Furthermore, the businessman will compensate the consumer at 16 <a href="https://en.wikipedia.org/wiki/Israeli_new_shekel">Israeli new shekel</a> for their expenses.</p>
<h3 id="usage-of-the-method">Usage of the method</h3>
<p>This method is most prevalent in the financial field, for example: A commercial company increases its service charge without notifying the customer; this is done under the assumption that the customer, who is used to get their monthly charge, will not notice the change. If the assumption turns out to be true, it &ldquo;works&rdquo;; if the customer notices and appeals the charge - it &ldquo;doesn&rsquo;t work&rdquo;, and the company will correct the charge, with barely any damage (e.g. public relations damage).</p>
<p>The constant rule of this method, from which it gets is name, is &ldquo;if it works - it works; if it doesn&rsquo;t work - it doesn&rsquo;t work&rdquo;; in other words, there&rsquo;s a chance the attempt will succeed, and conversely, little to no damage will happen if it won&rsquo;t, so there&rsquo;s nothing to lose and it&rsquo;s worth trying.</p>
<p>The Matzliah method occurs in other fields as well:</p>
<ul>
<li>A business-owner that doesn&rsquo;t pay their employees the full wage and benefits they deserve</li>
<li>Litigation intended to intimidate into settlement, such as <a href="https://en.wikipedia.org/wiki/Vexatious_litigation">vexatious litigation</a>.</li>
<li>A business-owner deducts taxes for expenses, when they are unsure if the expenses are deductible or not. If the IRS does not review this business, it works. If a review occurs, they will remove the deduction.</li>
<li>A failing politician is called to resign, but does not hurry to do so, assuming that the public is otherwise occupied. If the public notices, the politician can always resign.</li>
<li>An insurance company dismisses a claimant&rsquo;s demand for payment with various claims, such as contradicting with the terms of the policy. If the claimant does not respond nor refer to the courts, the insurance company profits (due to non-payment). If the claimant does refer to the courts, the insurance company will offer to settle for a partial sum, hoping that the claimant, due to pressure and interest in shortening legal proceedings, will agree to it. The insurance company will, at most, pay part of the policy&rsquo;s sum. (See <a href="https://en.wikipedia.org/wiki/Insurance_bad_faith">Insurance bad faith</a>).</li>
</ul>
<p>In <a href="https://en.wikipedia.org/wiki/The_Rainmaker_(novel)">The Rainmaker</a>, a young lawyer called Rudy Baylor deals with an insurance company operating with the Mazliah method: it would initially deny every insurance claim submitted, and only pay claimants that continued to fight for their rights.</p>
<p>A softer version of the Mazliah version is &ldquo;at least we tried&rdquo;, or &ldquo;can&rsquo;t blame us for trying&rdquo;. In this version, an attempt is made to gain an advantage, but not necessarily with fair means. For example, haggling by presenting unreasonably extreme opening positions.</p>
<h3 id="see-also">See also</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Patent_troll">Patent troll</a></li>
</ul>
<h3 id="external-links">External links</h3>
<ul>
<li><a href="https://web.archive.org/web/20070718145756/http://info1.court.gov.il/Prod03/ManamHTML4.nsf/1967929CB7F5A08F42257313002D8085/$FILE/051B24553DBC6EA642257312005575A6.html?OpenElement">A verdict denouncing the &ldquo;Matzliah&rdquo; method</a></li>
<li><a href="http://www.israelbar.org.il/article_inner.asp?pgId=28795&amp;catId=287">Insurance companies and the &ldquo;Matzliah&rdquo; method</a>, at the Israeli bar association.</li>
</ul>
]]></content:encoded></item><item><title>תקלה ב-TransportDroidIL</title><link>https://lutzky.net/2016/01/11/transportdroidil-outage/</link><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>https://lutzky.net/2016/01/11/transportdroidil-outage/</guid><description>(Hebrew) The tale of my now-defunct android app for fetching public transport information.</description><content:encoded><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>לצערי, האפליקציה TransportDroidIL הפסיקה לפעול, והסיבה היא כזו שלא מאפשרת תיקון. אני ממליץ בחום על החלופה <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.maps">Google Maps</a>.</p>
<h3 id="שאלות-ותשובות">שאלות ותשובות</h3>
<h4 id="למה-האפליקציה-הפסיקה-לעבוד">למה האפליקציה הפסיקה לעבוד?</h4>
<p>האפליקציה TransportDroidIL פועלת ע&quot;י בקשת נתונים מאתר אגד או משרד אתר התחבורה, תוך שימוש במנגנון ה&quot;שפה חופשית&quot;. שני האתרים השתנו בצורות שונות, שלא מאפשרות לאפליקציה לפעול יותר:</p>
<ul>
<li>ב<a href="http://bus.gov.il">אתר משרד התחבורה</a>, מנגנון ה&quot;שפה חופשית&quot; כבר לא עובד כלל - קופצת ההודעה <code>[object Object]</code>, ומאחורי הקלעים ניתן לראות שהאתר לא מקבל מרכיב ה&quot;שפה החופשית&quot; תשובה.</li>
<li>באתר <a href="http://egged.co.il">אגד</a>, מנגנון ה&quot;שפה החופשית&quot; עדיין פועל,והשתנה יחסית מעט, ויכול בהחלט להיות אפשרי לגרום לאפליקציה לעבוד איתו שוב, אבל&hellip;</li>
</ul>
<h4 id="רגע-רגע-בעצם-האפליקציה-לא-עושה-שום-דבר-ומביאה-את-כל-הנתונים-מאתרים-קיימים-אז-למה-כתבת-אותה">רגע רגע, בעצם האפליקציה לא עושה שום דבר ומביאה את כל הנתונים מאתרים קיימים? אז למה כתבת אותה?</h4>
<p>נכון! הסיבה שכתבתי את האפליקציה הייתה שהאתרים האלה, בספטמבר 2010, לא היו מותאמים לטלפונים ניידים והשימוש בהם מהנייד היה כאב-ראש מוחלט. למעשה, <a href="http://bus.gov.il">אתר משרד התחבורה</a> עדיין לא מותאם, ונראה כיום דומה מאוד לאיך שאתר אגד נראה ב-2010. האפליקציה הייתה מיועדת אך ורק לתת ממשק משתמש נוח יותר לאותם האתרים.</p>
<p>למרבה השמחה, אתר <a href="http://egged.co.il">אגד</a> מותאם כיום בצורה פחות-או-יותר סבירה לטלפונים ניידים. לא מושלם, אבל בהחלט שמיש. אך, חשוב מכל&hellip;</p>
<h4 id="בתכלס-יש-אפליקציות-יותר-מוצלחות-כמו-google-maps-אז-למה-להשתמש-באתרים-האלה-בכלל">בתכל&rsquo;ס יש אפליקציות יותר מוצלחות, כמו Google Maps, אז למה להשתמש באתרים האלה בכלל?</h4>
<p>אין יותר סיבה! ב-2010 Google Maps אמנם לא סיפקה מידע תחבורה ציבורית בישראל, אבל כיום המידע קיים שם בצורה מלאה ומקיפה. המידע מגיע לגוגל ישירות מ<a href="https://data.gov.il/dataset/383">אתר מאגרי המידע הממשלתיים</a>, בפורמט GTFS המותאם לכך. זו האפליקציה בה אני משתמש כיום.</p>
<p>המידע המסופק הוא, כמו תמיד, מידע של לוחות זמנים ולא מידע זמן-אמת. כולי תקווה שחברות האוטובוסים יתחילו לפרסם מידע זמן-אמת בפורמט <a href="https://developers.google.com/transit/gtfs-realtime/?hl=en">GTFS-realtime</a>, אשר יגרום לכך ש-Google Maps ואפליקציות אחרות יוכלו להראות מידע מציאות יותר על זמן הגעת האוטובוסים.</p>
<h4 id="מי-פיתח-את-האפליקציה-ומה-הקשר-שלו-לעניין">מי פיתח את האפליקציה ומה הקשר שלו לעניין?</h4>
<p>אני המפתח המקורי של האפליקציה - שמי אוהד לוצקי. התחלתי לעבוד על תוכנות שמביאות מידע מאתר משרד התחבורה בזמן שהייתי סטודנט בטכניון שנוסע הרבה באוטובוסים, בערך ב-2007. ב-2010 המרתי את התוכנה לאפליקציית אנדרואיד כשהייתי בצבא ונסעתי הרבה באוטובוסים; כמה חברים התעניינו, והעליתי את התוכנה ל-Play Store. חבר טוב מהלימודים, חגי, שלח מספר שיפורים ואף <a href="https://github.com/lutzky/TransportDroidIL/pull/15">הוסיף מנגנון עדכוני-זמן-אמת</a>, אשר היה תלוי בחסדי האתרים של חברות אוטובוס ספציפיות שסיפקו, גם הן, את המידע בצורה לא-סטנדרטית.</p>
<p>בשלב כלשהו עלו אפליקציות חלופיות לרשת, דוגמת Moovit - אך אף אחד מהן לא מצאה חן בעיניי. בפרט, ל-Moovit לקח זמן רב לעלות, בעוד שהאפליקציה שלי הייתה מיועדת למבט מהיר תוך כדי שהאוטובוס מתקרב לתחנה.</p>
<p>בשלב כלשהו (2012 לכל המאוחר) משרד התחבורה התחיל לפרסם מידע GTFS שאפשר לגוגל להציג מידע תחבורה ציבורית בישראל, ואני הפסקתי להשתמש באפליקציה שכתבתי. Google Maps מראה את התחנות על מפה, רשימת תחנות-ביניים ועוד. עם זאת, מאחר ולאפליקציה עוד היה מספר לא-קטן של משתמשים (קצת יותר מ-55,000 בשיא), המשכתי לתקן בעיות  קטנות כשהן צצו וכשהיה לי זמן.</p>
<p>כיום אני עובד בגוגל בעצמי - לא בצוות של Google Maps, אלא בצוות Search. אני בהחלט חושב שגוגל מספקים מענה טוב יותר לתחבורה ציבורית מאשר TransportDroidIL :)</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>Seaplane - Github with a non-programmer</title><link>https://lutzky.net/2015/05/30/seaplane/</link><pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate><guid>https://lutzky.net/2015/05/30/seaplane/</guid><description>When I helped a non-programmer friend with some code for psychology research, and how we avoided using Matlab.</description><content:encoded><![CDATA[<h2 id="the-faculty-programmer">The Faculty Programmer</h2>
<p>Sharon, a close friend of mine, has been studying psychology for the past few years. At some point she needed to run an experiment in the field of perception. While the exact form of the experiment was pending professor vetting, she did know that the experiment will take place with a user sitting in front of a desktop computer, responding to various stimuli, often with the reaction time being recorded. Seeing as programming is not in her faculty&rsquo;s curriculum (a mistake, in my opinion), the students are provided with a faculty programmer. Dozens of students would contact this jaded craftsman, describe what they need, wait patiently, and then - as it happens in the world of software - receive something almost, but not quite, entirely unlike what they asked for.</p>
<p>I was all too happy to help (and owe Sharon an insurmountable number of favors to start with), but had nothing to start with at the time. The weeks and months passed, I was deep into my move and training at my new job[1], and happily suggesting (using my limited understanding of psychology) experiments. When the final proposal was authorized, the timing was inconvenient - I was going on a business trip to California the next day, putting a 10 hour time difference between Sharon and myself.</p>
<p>No matter. The experiment was fairly well-defined before I left - a word out of three word-sets, designated as &ldquo;up&rdquo;, &ldquo;down&rdquo; and &ldquo;neutral&rdquo;, was to flash in the middle of the screen, and then a circle would appear at the top or bottom. The user had to react to this circle as quickly as possible, and the idea was to test whether or not a word from the &ldquo;up&rdquo; category (such as &ldquo;sky&rdquo; or &ldquo;cloud&rdquo;) would correlate with better reaction time when the circle appeared at the top, and vice versa. There were some other details such as &ldquo;catch trials&rdquo; when no circle would show up at all, but it sounded fairly simple. (Keep reading for a demo!)</p>
<h2 id="getting-started">Getting started</h2>
<p>My experience had me worried, as no software project is ever as simple as it originally seems. Sharon and I agreed that, while this seems completely reasonable and quite thought-out, we would work in an iterative fashion, and have regular video-chats on what should be done next. Also, to simplify things, I asked to create the software as a web page intended for use on Chrome, rather than Matlab as suggested by her faculty programmer (who seemed convinced, for whatever reason, that Matlab could give better timing precision - this turned out to be false). She agreed, and within a few hours on a plane, I had a basic draft working.</p>
<p>I emailed Sharon a copy of the draft; it was split into a simple <code>index.html</code> file, a <code>style.css</code> file, a <code>seaplane.js</code> code file, and a <code>config.js</code> code file. That last split was deliberate: Sharon, who has no experience in coding (and even claims to be a technophobe), could modify clearly defined configuration (including the sets of words and tuned delays) with no anxiety of &ldquo;messing up&rdquo; the more complex code. Soon enough, timezones flipped by, and Sharon was happy enough with the result to respond with a modified <code>config.js</code> file, and a list of changes she wanted - mostly present in the original requirements, but some which could only be understood while trying out the first draft. Naturally, some of the changes would require the syntax of <code>config.js</code> itself to change, and Sharon had more data to add to it. To avoid <code>seaplane7-final-really.zip</code> email attachments flying back and forth, version control would be required. Using Github would facilitate this, and also allow us to use its <em>Issues</em> mechanism for tracking remaining work.</p>
<p>It took a few minutes over the phone to explain the basic concept of version control to Sharon, as well as how to create a Github account, modify files using the web-based interface, report and comment on issues. While I did mention Github for Windows as an option, I didn&rsquo;t pressure Sharon into using it, especially as I wasn&rsquo;t familiar enough with it myself.</p>
<p>Over 10 days and 48 commits (27 mine, 20 Sharon&rsquo;s) we got the code working well enough to run the experiment. There were a few reported bugs, but nothing substantial that skewed the results, as far as we can tell. You&rsquo;re welcome to see a <a href="https://lutzky.github.io/seaplane">Demo of Seaplane</a>, as well as browse the <a href="https://github.com/lutzky/seaplane">Seaplane source code</a>. If you can read Hebrew, you can also read <a href="/2015/05/30/seaplane/seaplane_paper.pdf">Sharon's paper</a>.</p>
<h2 id="what-worked">What worked</h2>
<ul>
<li>Issues worked quite well for tracking the work; Sharon and I found them more useful than emails for keeping state.</li>
<li>Being a fully client-side web application, seaplane was (and still is) trivially hosted by Github Pages. This made deployment of new versions as easy as hitting F5.</li>
<li>For changes that could be previewed in chrome using developer tools, Sharon got instant feedback on her changes without needing to commit anything.</li>
<li>Sharon made 4 commits to change <code>config.js</code>, modifying the word sets according to discussions with her supervisor. Sharon also made 11 commits to change <code>style.css</code>, 2 commits to change <code>index.html</code>, and even 3 to change <code>seaplane.js</code>.</li>
</ul>
<h2 id="what-didnt-work">What didn&rsquo;t work</h2>
<ul>
<li>Github&rsquo;s UI for submitting changes online has a default value for the commit message, and no recommendations against using it. As a result, there are 8 commits called &ldquo;Update <code>style.css</code>&rdquo;.</li>
<li>Sharon didn&rsquo;t have a working copy on her own machine, and not all changes could be easily previewed in chrome. As a result, there were some back-and-forth commits by Sharon and myself which weren&rsquo;t necessary. (I could&rsquo;ve avoided this by providing appropriate &ldquo;refresh&rdquo; functionality in the app)</li>
<li>The format I chose for the word list made right-to-left issues rear their ugly head in the editor.</li>
</ul>
<p>All in all, the project went swimmingly. Using progamming-oriented version control software to collaborate with non-programmers may be less crazy than you think. I highly recommend giving it a try.</p>
<!-- raw HTML omitted -->
<p>[1] Oh yeah, I&rsquo;m a Site Reliability Engineer at Google Ireland now, which is too awesome to detail in this footnote.</p>
]]></content:encoded></item><item><title>Git While You Sit 3 - "Rename" edge cases</title><link>https://lutzky.net/2014/08/17/git-rename-edge-cases/</link><pubDate>Sun, 17 Aug 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/08/17/git-rename-edge-cases/</guid><description>Sometimes, git does something unexpected while merging or rebasing. It might seem like git misunderstood a rename, but it&amp;rsquo;s far more likely that git did the &amp;ldquo;right&amp;rdquo; thing after all.</description><content:encoded><![CDATA[<p>This is part of the &ldquo;Git While You Sit&rdquo; series, a play on Google&rsquo;s <a href="http://googletesting.blogspot.co.il/2007/01/introducing-testing-on-toilet.html">Testing on the Toilet</a>. It&rsquo;s intended to fit on a printed page. Currently Chrome doesn&rsquo;t seem to correctly print columns, but Firefox does.
{: .no-print }</p>
<p>Sometimes, git does something unexpected while merging or rebasing. It might seem like git misunderstood a rename, but it&rsquo;s far more likely that git did the &ldquo;right&rdquo; thing after all. Here are a couple of examples I&rsquo;ve seen recently.</p>
<h2 id="first-case">First case</h2>
<p>When rebasing, conflicts might occur <em>before</em> renames:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">o---o---E---F---G (master)
     \
      A---B---RENAME---C (feature *)
</code></pre></div><p>When the current branch is <em>feature</em>, and running <code>git rebase master</code>, what happens is that the commits from <code>feature</code> will be <code>cherry-pick</code>ed onto <code>G</code> in order - <code>A</code>, <code>B</code>, <code>RENAME</code>, and <code>C</code>. If a conflict occurs in <code>B</code>, in a file that was later renamed (in <code>RENAME</code>), conflict resolution will have to happen <em>using the original name</em>. If there was a massive reworking, it might be simpler and more sensible to <em>merge</em> in this case.</p>
<h2 id="second-case">Second case</h2>
<p>It wasn&rsquo;t a rename, it was a copy.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">--o---E----F [MODIFY]----G (master)
   \                      \
    A---B [COPY]---C---D---M (feature *)
</code></pre></div><p>In this case, the user thought he renamed <code>dir1/file.xml</code> to <code>dir2/file.xml</code> in <code>B [COPY]</code>. Then, when he merged <code>master</code> into <code>feature</code>, he expected that the modifications in <code>file.xml</code> in <code>F [MODIFY]</code> would, as part of the merge in <code>M</code>, be applied to <code>dir2/file.xml</code>. This would indeed have happened if <code>B</code> had a move operation. However, it doesn&rsquo;t make sense for git to merge the changes from a <em>copy</em> of a file, so it didn&rsquo;t.</p>
<p>The fix here was to undo the merge:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ git reset --hard D
</code></pre><p>&hellip;and then edit the commit:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ git rebase -i A
</code></pre><p>&hellip;and set <code>B</code> to <code>edit</code> instead of <code>pick</code>. Amend the commit for <code>B</code> so that it doesn&rsquo;t just create <code>dir2/file.xml</code>, but also deletes <code>dir1/file.xml</code>. If it&rsquo;s indeed the same file (or has very similar contents), this will be automatically detected as a rename during <code>log</code> and <code>merge</code> operations.</p>
<p>It should be noted that git doesn&rsquo;t track renames (or copies) at all during commits. It only figures out that they happened retroactively when it&rsquo;s relevant (<code>log</code>, <code>merge</code>, <code>cherry-pick</code>, <code>diff</code>&hellip;), by comparing the contents. This is why those operations have options like <code>rename-threshold</code>, <code>find-renames</code>, <code>find-copies</code> and even <code>find-copies-harder</code>.</p>
]]></content:encoded></item><item><title>Git While You Sit 2 - .gitignore</title><link>https://lutzky.net/2014/08/15/git-ignore/</link><pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/08/15/git-ignore/</guid><description>Using &lt;!-- raw HTML omitted -->.gitignore&lt;!-- raw HTML omitted --> to exclude build artifacts from your repository.</description><content:encoded><![CDATA[<p>This is part of the &ldquo;Git While You Sit&rdquo; series, a play on Google&rsquo;s <a href="http://googletesting.blogspot.co.il/2007/01/introducing-testing-on-toilet.html">Testing on the Toilet</a>. It&rsquo;s intended to fit on a printed page. Currently Chrome doesn&rsquo;t seem to correctly print columns, but Firefox does.
{: .no-print }</p>
<p>Your repository has files which are generated as part of your build process or as part of running your software, which you don&rsquo;t want in source control. They keep showing up in <code>git status</code>. What to do?</p>
<p>You can create a file called <code>.gitignore</code> - note that the filename starts with a <code>.</code>, which is standard for configuration files in Unix and causes them to be hidden from normal listing. Each <code>.gitignore</code> file affects the current directory and its subdirectories - you can have multiple <code>.gitignore</code> files to create more specific rules for subdirectories.</p>
<p><em>Note:</em> <code>.gitignore</code> can only be used for files which shouldn&rsquo;t be in source code <em>at all</em> (those show up as &ldquo;Untracked files&rdquo;. <em>Modified</em> files can&rsquo;t be ignored in this way. If you really want to, you can force git to ignore modifications with this command:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ git update-index --assume-unchanged FILE
</code></pre><p>However, this is usually a bad idea and indicates you need to refactor your file handling - split files which get modified locally from files which contain information which should be source-controlled.</p>
<p>Here is an annotated excerpt from a <code>.gitignore</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># Extensions of compiled files
*.a
*.so
*.o
# ...

# Files generated by build system
build.ninja
.ninja_deps

# Ignore bin/ and obj/, as they contain
# compiled files. This is ignored
# recursively within the repository.
bin/
obj/

# ...except (&#34;!&#34;) for the scripts, which
# are in the &#34;scripts&#34; dir in the same
# one as this .gitignore file (hence the
# leading &#34;/&#34;)
!/scripts/bin
</code></pre></div><p>Addendum: A reader has mentioned <a href="http://gitignore.io">gitignore.io</a>, which auto-generates useful <code>.gitignore</code> files.</p>
]]></content:encoded></item><item><title>Git While You Sit 1 - Add --patch</title><link>https://lutzky.net/2014/08/13/git-add-patch/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/08/13/git-add-patch/</guid><description>Using &lt;!-- raw HTML omitted -->git add -p&lt;!-- raw HTML omitted --> to eliminate those pesky &lt;!-- raw HTML omitted -->printf&lt;!-- raw HTML omitted -->-debugging statements.</description><content:encoded><![CDATA[<p>This is part of the &ldquo;Git While You Sit&rdquo; series, a play on Google&rsquo;s <a href="http://googletesting.blogspot.co.il/2007/01/introducing-testing-on-toilet.html">Testing on the Toilet</a>. It&rsquo;s intended to fit on a printed page. Currently Chrome doesn&rsquo;t seem to correctly print columns, but Firefox does.
{: .no-print }</p>
<p>Ever find yourself <code>printf</code>-debugging? You found the bug, but now you have <code>printf</code> statements all over the place. Running <code>git diff</code>, you get:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/hello.c b/hello.c
</span><span class="gh">index 93ca08c..c7d354a 100644
</span><span class="gh"></span><span class="gd">--- a/hello.c
</span><span class="gd"></span><span class="gi">+++ b/hello.c
</span><span class="gi"></span><span class="gu">@@ -4,6 +4,7 @@
</span><span class="gu"></span> void b();
 
 void a() {
<span class="gi">+    printf(&#34;Bug is here?\n&#34;);
</span><span class="gi"></span>     return;
 }

<span class="gu">@@ -13,9 +14,10 @@ int main() {
</span><span class="gu"></span> 
     printf(&#34;Hello, world!\n&#34;);
 
<span class="gd">-    return 1;
</span><span class="gd"></span><span class="gi">+    return 0; // Found it!
</span><span class="gi"></span> }
 
 void b() {
<span class="gi">+    printf(&#34;Bug is here?\n&#34;);
</span><span class="gi"></span>     return;
 }
 
</code></pre></div><p>It&rsquo;s actually pretty easy to get rid of them. Run <code>git add -p</code> and you will be shown each patch &ldquo;hunk&rdquo; separately:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/hello.c b/hello.c
</span><span class="gh">index 93ca08c..c7d354a 100644
</span><span class="gh"></span><span class="gd">--- a/hello.c
</span><span class="gd"></span><span class="gi">+++ b/hello.c
</span><span class="gi"></span><span class="gu">@@ -4,6 +4,7 @@
</span><span class="gu"></span> void b();
 
 void a() {
<span class="gi">+    printf(&#34;Bug is here?\n&#34;);
</span><span class="gi"></span>     return;
 }
### Stage this hunk [...]? n (No) ###
<span class="gu">@@ -13,9 +14,10 @@ int main() {
</span><span class="gu"></span> 
     printf(&#34;Hello, world!\n&#34;);
 
<span class="gd">-    return 1;
</span><span class="gd"></span><span class="gi">+    return 0; // Found it!
</span><span class="gi"></span> }
 
 void b() {
<span class="gi">+    printf(&#34;Bug is here?\n&#34;);
</span><span class="gi"></span>     return;
 }
### Stage this hunk? [...] s (Split)  ###
<span class="gu">@@ -13,7 +14,7 @@ int main() {
</span><span class="gu"></span> 
     printf(&#34;Hello, world!\n&#34;);
 
<span class="gd">-    return 1;
</span><span class="gd"></span><span class="gi">+    return 0; // Found it!
</span><span class="gi"></span>
### Stage this hunk [...]? y (Yes) ###
 void b() {
<span class="gi">+    printf(&#34;Bug is here?\n&#34;);
</span><span class="gi"></span>     return;
 }
### Stage this hunk [...]? n (No) ###
</code></pre></div><p>Now, only the <code>return 0</code> line is stage for commit. To get rid of the rest of the changes, run <code>git checkout -- hello.c</code>. Now the <code>printf</code> statements have been removed!</p>
]]></content:encoded></item><item><title>Lessons learned</title><link>https://lutzky.net/2014/08/13/lessons-learned/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/08/13/lessons-learned/</guid><description>Some lessons learned from my role with the previous company as a DevOps engineer and team lead. We discuss tidiness and prioritizing using pre-existing code.</description><content:encoded><![CDATA[<p>After 6 years with my previous employer, as a DevOps engineer and DevOps team leader, I&rsquo;ve learned two important lessons. I wanted to get these in here before I start my new position (&hellip;as an SRE in Google Dublin, which I am very excited about!), as it&rsquo;s always fun to look back after a few years and see if what I wrote is still relevant.</p>
<h2 id="keep-it-tidy">Keep it tidy</h2>
<p>Working in a tidy manner is incredibly important. Tidy code is more important than fast code. It&rsquo;s even more important than correct code! Tidy code is obvious about what it does, and the incorrectness will be apparent to anyone who reads it. However, correct messy code will be misleading about what it does, and what subtleties had to be dealt with in order for it to be correct. This will cause long hours and hair loss when refactoring or when tending to changing requirements.</p>
<p><em>Requirements change.</em> A good team leader will be able to predict how they&rsquo;ll change, and direct his team around that. Incorrect predictions are inevitable and costly, but so is a complete lack of change prediction.</p>
<p>Operations need to be just as tidy as code, if not tidier. <em>Operations performed manually will inevitably be performed wrong, usually by the one person you&rsquo;re sure can&rsquo;t possibly get it wrong.</em> As such, operations need to be as idiot-resistant as possible (nothing is completely idiot-proof). &ldquo;Run this job in Jenkins, the rest is a script&rdquo; is a good place to be, but you should make sure it&rsquo;s really hard to run the wrong job, or get any parameters harmfully wrong.</p>
<p>Any knowledge contained within one brain reduces your <a href="http://en.wikipedia.org/wiki/Bus_factor">bus factor</a> to 1. Use pair programming (or pair-ops) to increase your bus factor. Whenever possible, let someone from your team tackle a task he has no idea how to perform, but make sure both you and someone knowledgeable are available (and willing) to answer questions. However, containing knowledge within brains is fleeting - even with a high bus-factor, some areas will be left untouched for years, and subsequently re-touched when nobody remembers anything about them. When this happens, you&rsquo;ll be much happier to find out your predecessor (or past-you) has left solid documentation and completely obvious code.</p>
<h2 id="dont-write-it-yourself">Don&rsquo;t write it yourself</h2>
<p>This is a special case of &ldquo;keep it tidy&rdquo;. Writing your own code should be your last resort: Someone else has already written, tested, fixed, debugged, documented, rewritten, and perfected a piece of code that does exactly what you need. They did this with the help of far better coders than you can afford and a QA team comprised of countless relentlessly nitpicking users. <em>Your problem is not as unique as you think.</em></p>
<p>You will ignore this advice. You&rsquo;ll write your own &ldquo;super efficient&rdquo; database/JSON parser combo, and guard it as a trade/military secret. And it&rsquo;ll even work for the first few years, and perform fantastically. But as requirements change (<em>requirements change!</em>), you&rsquo;ll suddenly find out that you can&rsquo;t push new features and bugfixes out as fast as your competition. This happens because your competition is using a widely-adopted database, and a (separate) widely-adopted JSON parser. These are both open-source, and you will see that some kid in a basement has stumbled onto your clever optimizations and suggested them - these have been merged in. And while you&rsquo;re stuck debugging your code, with its sparse unit tests and misleading function names, your competition is looking up known issues and workarounds on Stack Overflow.</p>
<p>Hiding within this advice is the one worse thing you can do than writing it yourself: Using unpopular closed-source software (especially if it&rsquo;s hard/impossible to search for in Google). This has all the detriments of writing code yourself, with the added hell of being unable to read or modify the code yourself when something goes wrong.</p>
<p>This advice is clearly quite extreme and is intended to be cautionary (and you will therefore, as mentioned, ignore it). You probably do have some business logic to implement. You probably do need to write glue code in order to connect your proprietary code with some external provider. You might be dealing with insane, Google-scale problems and have found (after checking!) that all existing solutions don&rsquo;t meet your performance/capacity criteria. But this is no reason to implement your own version of <code>ping</code>. Or <code>rsync</code>. Or <code>cron</code>.</p>
<h2 id="afterword">Afterword</h2>
<p>That&rsquo;s my 2 cents on how to do DevOps (for a rather narrow definition of DevOps). They&rsquo;re the instructions I left my team. I wonder if they&rsquo;ll stand the test of time.</p>
]]></content:encoded></item><item><title>FakeFile</title><link>https://lutzky.net/2014/07/02/fakefile/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/07/02/fakefile/</guid><description>A tiny python library for faking out filesystem operations for tests.</description><content:encoded><![CDATA[<p>I&rsquo;ve recently been rewriting a mess of bash, tcsh and Python code as a Python script, and this has proven interesting to test. I&rsquo;ve written a tiny Python library called <code>fakefile</code> to help out with it, so I can write code like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">fakefile</span>
<span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">import</span> <span class="nn">mock</span>

<span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;somefile&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&#34;correct output&#34;</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;existing_file&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">TestMyCode</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test_my_function</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">faker</span> <span class="o">=</span> <span class="n">fakefile</span><span class="o">.</span><span class="n">FakeFile</span><span class="p">()</span>

        <span class="n">faker</span><span class="o">.</span><span class="n">set_contents</span><span class="p">(</span><span class="s2">&#34;existing_file&#34;</span><span class="p">,</span> <span class="s2">&#34;correct input&#34;</span><span class="p">)</span>

        <span class="k">with</span> <span class="n">mock</span><span class="o">.</span><span class="n">patch</span><span class="p">(</span><span class="s1">&#39;__builtin__.open&#39;</span><span class="p">,</span> <span class="n">faker</span><span class="o">.</span><span class="n">open</span><span class="p">):</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">my_function</span><span class="p">()</span>  <span class="c1"># No file &#34;somefile&#34; will be created!</span>
                                    <span class="c1"># No file &#34;existing_file&#34; will be read!</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">faker</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="s2">&#34;somefile&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">file_contents</span><span class="p">,</span>
                          <span class="s2">&#34;correct output&#34;</span><span class="p">)</span>
</code></pre></div><p>The library is available on github as <a href="http://github.com/lutzky/fakefile">lutzky/fakefile</a>. Naturally, however, it turns out I&rsquo;ve been outdone by Google&rsquo;s <a href="https://pypi.python.org/pypi/pyfakefs">pyfakefs</a>. They have some clever bast^H^H^H^Hgooglers working there!</p>
]]></content:encoded></item><item><title>Fun with file descriptor leaks</title><link>https://lutzky.net/2014/06/22/fun-with-file-descriptor-leaks/</link><pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/06/22/fun-with-file-descriptor-leaks/</guid><description>How file descriptor leaks are causing your processes to stick around longer than they should.</description><content:encoded><![CDATA[<p>Here&rsquo;s a fun little bash script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="o">(</span>
  sleep <span class="m">20</span> <span class="p">&amp;</span>
<span class="o">)</span>
ps -f <span class="k">$(</span>pidof sleep<span class="k">)</span>
<span class="nb">echo</span> <span class="s2">&#34;Bye&#34;</span>
</code></pre></div><p>Run it, and you&rsquo;ll notice a few things:</p>
<ul>
<li>Because the subshell running <code>sleep</code> dies immediately, <code>sleep</code> gets reparented to <code>init</code>. (Interestingly enough, on newer Ubuntu releases this isn&rsquo;t PID 1&hellip;), so the script doesn&rsquo;t have any child processes by the time it prints &ldquo;Bye&rdquo;.</li>
<li>After &ldquo;Bye&rdquo; is shown, the script exits immediately, returning control to the shell.</li>
</ul>
<p>Now, call the script <code>pied_piper.sh</code>, and try the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">./pied_piper.sh <span class="p">|</span> cat
./pied_piper.sh <span class="p">|</span> ts  <span class="c1"># Awesome timestamping utility, same problem though</span>
ssh localhost ./pied_piper.sh
</code></pre></div><p>Annoying, isn&rsquo;t it? These commands won&rsquo;t finish for 20 seconds! The problem is that <code>sleep</code> is keeping its <code>stdout</code> open, which is the input pipe for <code>cat</code>, <code>ts</code>, <code>ssh</code>, or whatever else you&rsquo;re piping to (this is very annoying on Jenkins jobs as well).</p>
<p>If a third-party product is pissing you off this way - that is, it died, but somehow still keeps its pipe open, you can find the culprit like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">fuser -v /proc/<span class="nv">$PID_OF_PROCESS_WITH_OPEN_PIPE</span>/fd/0
</code></pre></div><p>This will usually yield a <code>sleep</code> process as the culprit, with the useless parent information of <code>init</code> (as per my example). The only information you have is the precise delay - in my experience, it helps to find all &ldquo;sleep&rdquo; commands lurking about, and tinker with the delay amounts: Found a <code>sleep 30</code>? Change it to <code>sleep 29</code>, see if that&rsquo;s what shows up.</p>
<p>Here&rsquo;s how to actually fix the problem:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="o">(</span>
  sleep <span class="m">20</span> &gt;<span class="p">&amp;</span>- 2&gt;<span class="p">&amp;</span>- &lt;<span class="p">&amp;</span>- <span class="p">&amp;</span>
<span class="o">)</span>
ps -f <span class="k">$(</span>pidof sleep<span class="k">)</span>
<span class="nb">echo</span> <span class="s2">&#34;Bye&#34;</span>
</code></pre></div><p>This will close <code>stdout</code>, <code>stderr</code> and <code>stdin</code>. As a friend pointed out, it&rsquo;s often safer to do <code>&gt; /dev/null</code> rather than <code>&gt;&amp;-</code>, as some processes will crap out if they don&rsquo;t have some semblence of an <code>stdout</code>. However, <code>&gt;&amp;-</code> is shorter, faster, and perfectly safe for <code>sleep</code>.</p>
<p>Of course, it&rsquo;s better to save the PID for this <code>sleep</code> and kill it when appropriate from within the script - otherwise, you might be accumulating many useless <code>sleep</code> processes.</p>
]]></content:encoded></item><item><title>Social network spoiler prevention</title><link>https://lutzky.net/2014/04/26/social-network-spoiler-prevention/</link><pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/04/26/social-network-spoiler-prevention/</guid><description>A feature proposal for avoiding spoilers on social networks.</description><content:encoded><![CDATA[<p>There is a well-known problem on today&rsquo;s social network platforms - spoilers. Anyone watching a show and failing to immediately catch up to the latest episode will see a lot of posts on their feed dancing around the spoiler, and finally revealing it completely. This makes sense - people like to talk about their favorite shows, and social networks are a great place to do it.</p>
<p>What I&rsquo;d like to suggest is a mechanism for mitigating the spoiler problem. This mechanism is optimized for Facebook, but could easily be applied to Google+, Twitter et cetera.</p>
<p>The short version:</p>
<ul>
<li>Mark potential spoilers, keeping track of what exactly they might be spoiling
<ul>
<li>Allow voluntary marking by the original poster</li>
<li>Allow reporting of spoilers, similarly to spam reports</li>
</ul>
</li>
<li>Collapse spoiler materials, showing what is being spoiled</li>
<li>Allow users to view spoilers
<ul>
<li>When they do this, optionally &ldquo;learn&rdquo; that these spoilers can now safely be shown.</li>
</ul>
</li>
</ul>
<p>For an example, consider the following scenario: I&rsquo;m watching the fantastic show Game of Scones, and in the latest episode - season 4, episode 3 - Lord Muffin has been surprisingly murdered. I might want to post the following status:</p>
<blockquote>
<p>OMG can&rsquo;t believe Lord Muffin was murdered no waayyyyyy</p>
</blockquote>
<p>Now, one of the following happens:</p>
<ul>
<li>Before posting, I check a box saying &ldquo;this status contains spoilers&rdquo;, clearly indicating Game of Scones S04E03.</li>
<li>I post without checking the box, ticking off my spoiler-sensitive friends. Several unfriend me, but a few of them hit the &ldquo;Spoiler alert&rdquo; button adjacent to the post.</li>
<li>Bonus points: The social network platform automatically recognizes the spoiler and asks me to mark it.</li>
</ul>
<p>Once the post was marked, it looks like this:</p>
<blockquote>
<p><em>Spoiler to Game of Scones S04E03 hidden.</em> <strong>Click to unhide</strong></p>
</blockquote>
<p>Clicking the &ldquo;click to unhide&rdquo; link should, naturally, show the status as it was originally posted. However, the social network can be smarter about this, and remember that as of now - spoilers to S04E03 are OK, and shouldn&rsquo;t be hidden from the user. A few notes about this:</p>
<ul>
<li>This shouldn&rsquo;t be done automatically, and a confirmation should be shown - at least at first (&ldquo;Should spoilers for this episode still be hidden? <em>Show Spoilers</em>/<em>Keep hiding spoilers</em>&quot;)</li>
<li>Posts containing spoilers should have a small visual indicator of them being as such. This is a good hint for what other people are seeing, and assists helpful users in marking spoilers.</li>
<li>It would be useful to allow <em>searching</em> for spoilers - for example, if I just saw the episode and want to see what people are saying about it.</li>
</ul>
<p>Finally, this is a neat signal that can be used by whatever social network implements it - imagine, a percentage graph of &ldquo;how many people have already watched the latest episode&rdquo;. Seeing as many people Tivo or torrent episodes, that kind of data has got to be worth some money to someone.</p>
<p>Note that there are existing spoiler prevention mechanisms implemented as browser extensions, and what I&rsquo;m suggesting is more complex and requires integration into the social network itself. This is important anyway, as you want the social network to work the same on any device or browser. Unfortunately, this also means that I am currently powerless to implement it. So if you think this is a good idea and know someone relevant, pass it along!</p>
]]></content:encoded></item><item><title>Weird permission issues with tvnamer</title><link>https://lutzky.net/2014/01/05/investigate/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/01/05/investigate/</guid><description>Distinguishing &lt;!-- raw HTML omitted -->EPERM&lt;!-- raw HTML omitted --> vs &lt;!-- raw HTML omitted -->EACCESS&lt;!-- raw HTML omitted -->, and how that helps debug file manipulation scripts.</description><content:encoded><![CDATA[<p>My show downloading stack lives on. I&rsquo;m curious as to which will happen first: NetFlix hits Israel, or I switch over to Sick Beard.</p>
<p>At any rate, nowadays I use <code>flexget</code>, <code>transmission</code>, <code>tvnamer</code> and <code>xbmc</code>, held together with some bash scripts. On debian- and ubuntu-based systems, the <code>transmission</code> daemon runs as a separate user (<code>debian-transmission</code>), so this requires a bit of care with file and group ownership. After rebuilding my system, I couldn&rsquo;t get <code>tvnamer</code> to work right for some reason, no matter how careful I was. I&rsquo;d keep getting this error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Loading config: config.json
####################
# Starting tvnamer
# Found 1 episode
####################
# Processing file: Sherlock.S03E01.mkv
# Detected series: Sherlock (season: 3, episode: 1)
####################
Old filename: Sherlock.3x01.The.Empty.Hearse.720p.HDTV.x264-FoV.mkv
New filename: Sherlock - [03x01] - The Empty Hearse.mkv
New path: /home/debian-transmission/inbox/Sherlock - [03x01] - The Empty Hearse.mkv
Creating directory /home/debian-transmission/inbox
rename Sherlock.3x01.The.Empty.Hearse.720p.HDTV.x264-FoV.mkv to /home/debian-transmission/inbox/Sherlock - [03x01] - The Empty Hearse.mkv
OSError(1, &#39;Operation not permitted&#39;)
New path: /media/Store/shows/Sherlock/Season 3/Sherlock.3x01.The.Empty.Hearse.720p.HDTV.x264-FoV.mkv
Creating directory /media/Store/Shows/Sherlock/Season 3
OSError(2, &#39;No such file or directory&#39;)
</code></pre></div><p>For a few weeks I&rsquo;d double-check the permissions, fail to understand what was going on, groan and copy the files manually. The new Sherlock episode had me in a bit of a more investigative mood.</p>
<p>This turns out to be an exercise in confusing OS logic and logging. It <em>looks</em> like the rename operation failed, and somehow the directory creation failed as well. Neither is the case. A hint can be found in the precise error after the rename: &ldquo;1 - Operation not permitted&rdquo; (that&rsquo;s <code>EPERM</code>). If that seems a bit off, that&rsquo;s because it is: When renames fail because of inadequate permissions, they return <code>EACCES</code> &ldquo;13 - Permission denied&rdquo;. So what&rsquo;s going on?</p>
<p>It turns out that after renaming, <code>tvnamer</code> tries to preserve the access and modification times of renamed files. A noble cause, but it turns out that Linux won&rsquo;t allow this unless you are the <em>owner</em> of the file - even if you do have write permissions. Therefore, this fails, which causes <code>tvnamer</code> to believe the rename failed - although it hasn&rsquo;t. Afterwards, the directory is created (this succeeds), but since <code>tvnamer</code> tries to copy using the <em>old</em> filename (thinking the rename failed), we get an <code>ENOENT</code> &ldquo;2 - No such file or directory&rdquo; error about the <em>source</em> of the copy operation.</p>
<p>The fix can be found <a href="https://github.com/dbr/tvnamer/pull/89">in this pull request</a>. Happy bug hunting!</p>
]]></content:encoded></item><item><title>Startup times</title><link>https://lutzky.net/2013/12/11/startup-times/</link><pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/12/11/startup-times/</guid><description>Starting new java processes in your scripts considered harmful. Let&amp;rsquo;s compare &amp;ldquo;hello world&amp;rdquo; startup times for different languages.</description><content:encoded><![CDATA[<p>Lately, a facebook comment of mine on the subject of Java&rsquo;s slowness has proved quite popular, so here goes: Here&rsquo;s a listing of a few Hello World programs and running times for them (<strong>including startup, which is a big deal in Java</strong>) on my laptop:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ grep &#39;^model name&#39; /proc/cpuinfo | head -1
model name	: Intel(R) Core(TM) i5-3337U CPU @ 1.80GHz
$ uname -a
Linux orca 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
</code></pre></div><p>The following script will be timed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">n</span><span class="o">=</span><span class="nv">$1</span>

<span class="nb">shift</span>

<span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>0<span class="p">;</span> i &lt; <span class="nv">$n</span><span class="p">;</span> i++<span class="o">))</span><span class="p">;</span> <span class="k">do</span>
	<span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span> &gt; /dev/null
<span class="k">done</span>
</code></pre></div><p>Times are for <code>n=100</code>.</p>
<h2 id="c">C</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, world!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* Result: 0.17s
</span><span class="cm"> * ...unless you give it a .cc extension, and then it&#39;s 0.30s!
</span><span class="cm"> * It turns out that gcc/g++ guess the language from the file extension.
</span><span class="cm"> */</span>
</code></pre></div><h2 id="c-1">C++</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello, world!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Result: 0.30s
</span></code></pre></div><h2 id="python">Python</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>

<span class="nb">print</span> <span class="s2">&#34;Hello, world!&#34;</span>

<span class="c1"># Result: 1.33s</span>
</code></pre></div><h2 id="java">Java</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello, world!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Result: 8.60s. No, I am not kidding.
</span></code></pre></div><p>There you have it. Sun&rsquo;s Java takes 28x-51x as much time to run &ldquo;Hello World&rdquo; (startup included) than native applications, and (shockingly, in my opinion) over 6x as much as non-precompiled Python. That&rsquo;s meaningless for long-running applications, but is a very big deal for small, often-run ones.</p>
]]></content:encoded></item><item><title>Asserting string equality</title><link>https://lutzky.net/2013/12/02/asserting-string-equality/</link><pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/12/02/asserting-string-equality/</guid><description>When comparing long strings in unit tests, make sure your assertion failures give you useful output.</description><content:encoded><![CDATA[<p>I&rsquo;ve had several opportunities to write unit tests for code that outputs large
strings. It&rsquo;s important that your unit-testing framework handles this well.</p>
<p>Here&rsquo;s my example data:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">STRING_A</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui.
</span><span class="s2">Suspendisse ut augue placerat, venenatis ante a, aliquam nibh. Sed vitae massa
</span><span class="s2">a nibh dignissim porta id rhoncus neque. Etiam commodo dapibus magna sit amet
</span><span class="s2">pellentesque. Aenean venenatis vulputate eros, sit amet sagittis ligula laoreet
</span><span class="s2">vel. Pellentesque consectetur viverra nunc, vel interdum turpis tempor nec.
</span><span class="s2">Quisque vel purus in quam facilisis gravida posuere in mi. Aenean ligula sem,
</span><span class="s2">mattis ut feugiat sit amet, lobortis ut sapien. Vestibulum laoreet aliquam
</span><span class="s2">lorem pulvinar lobortis. Mauris quis orci lorem. Mauris ut ante id nulla
</span><span class="s2">ultrices gravida vel et orci. Suspendisse potenti.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">STRING_B</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui.
</span><span class="s2">Suspendisse ut augue placerat, venenatis ante a, aliquam nibh. Sed vitae massa
</span><span class="s2">a nibh dignissim porta id rhoncus neque. Etiam commodo dapibus magna sit amet
</span><span class="s2">pellentesque. Aenean venenatls vulputate eros, sit amet sagittis ligula laoreet
</span><span class="s2">vel. Pellentesque consectetur viverra nunc, vel interdum turpis tempor nec.
</span><span class="s2">Quisque vel purus in quam facilisis gravida posuere in mi. Aenean ligula sem,
</span><span class="s2">mattis ut feugiat sit amet, lobortis ut sapien. Vestibulum laoreet aliquam
</span><span class="s2">lorem pulvinar lobortis. Mauris quis orci lorem. Mauris ut ante id nulla
</span><span class="s2">ultrices gravida vel et orci. Suspendisse potenti.
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p><code>STRING_A</code> and <code>STRING_B</code> are different, by one character. Can you tell which
one?  If you&rsquo;d use your unit testing framework&rsquo;s equivalent of
<code>assertEqual(STRING_A, STRING_B)</code>, it would correctly report that they are
different. But would it help you identify the difference?</p>
<p>C#, for example, is quite horrible with this. It outputs both strings in their
entirety. In Visual Studio, it doesn&rsquo;t even seem to be possible to copy the
output into an external comparison tool. This has caused some developers
(myself included) to implement an ad-hoc &ldquo;character-by-character string
equality tester&rdquo;.</p>
<p>For C++, if testing with Google&rsquo;s gtest library, the result is the same - the
entire strings are shown, and an external tool needs to be used to get a
reasonable indication of what the difference is.</p>
<p>Python 2.7&rsquo;s <code>assertMultiLineEqual</code> gives a good solution to the problem (in
Python 3, this becomes the default behavior for standard <code>assertEqual</code>). There
are similar comparison methods for other large data types.</p>
<p>Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">F
======================================================================
FAIL: testLongStringEquality (__main__.TestLongStrings)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &#34;/home/ohad/test/test_equal.py&#34;, line 35, in testLongStringEquality
    self.assertMultiLineEqual(STRING_A, STRING_B)
AssertionError: &#39;\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui. [truncated]... != &#39;\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui. [truncated]...
  
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut tempus dui.
  Suspendisse ut augue placerat, venenatis ante a, aliquam nibh. Sed vitae massa
  a nibh dignissim porta id rhoncus neque. Etiam commodo dapibus magna sit amet
- pellentesque. Aenean venenatis vulputate eros, sit amet sagittis ligula laoreet
?                             ^
+ pellentesque. Aenean venenatls vulputate eros, sit amet sagittis ligula laoreet
?                             ^
  vel. Pellentesque consectetur viverra nunc, vel interdum turpis tempor nec.
  Quisque vel purus in quam facilisis gravida posuere in mi. Aenean ligula sem,
  mattis ut feugiat sit amet, lobortis ut sapien. Vestibulum laoreet aliquam
  lorem pulvinar lobortis. Mauris quis orci lorem. Mauris ut ante id nulla
  ultrices gravida vel et orci. Suspendisse potenti.


----------------------------------------------------------------------
Ran 1 test in 0.003s

FAILED (failures=1)
</code></pre></div><p>For Java and JUnit, the output is also short and sweet (for plain <code>assertEquals</code>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">testLongStringEquality(MyTest): expected:&lt;...sque. Aenean venenat[i]s vulputate eros, si...&gt; but was:&lt;...sque. Aenean venenat[l]s vulputate eros, si...&gt;
</code></pre></div><p>Does your unit testing framework provide helpful output for failed unit tests?
This is something you can and should demand of it.</p>
]]></content:encoded></item><item><title>Test-driven procrastination</title><link>https://lutzky.net/2013/12/01/test-driven-procrastination/</link><pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/12/01/test-driven-procrastination/</guid><description>How being lazy and procrastinating led me to adopt test-driven development before I realized it.</description><content:encoded><![CDATA[<p>A conversation with a friend reminded me that, in fact, I&rsquo;ve been doing
test-driven development long before I knew it was called that. Back in
Introduction to Systems Programming (a second-semester course revolving around
abstract data types in C, introduction to C++, and hands-on experience building
multi-module C programs), most homework exercises looked something along these
lines: Write a program managing a store inventory, with a command-line client
conforming to a given set of specifications. For an input file looking like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">addcategory Fruit
addproduct Fruit Banana 2.30
addproduct Fruit Tomato 1.20
addproduct Fruit Apple 1.50
addproduct Fruit Apple 1.60
list Fruit
</code></pre></div><p>The output file would be expected to look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">OK
OK
OK
OK
ERROR Duplicate fruit Apple
Fruit
-----
Apple  1.50
Banana 2.30
Tomato 1.20
</code></pre></div><p>Of course, error messages, sorting and spacing for the output would be part of
the spec. That provided an effective way of checking your program&rsquo;s
correctness: Run it on a given input, and compare its output - using <code>diff</code> - to
expected output. Some TAs even provided simple test files (input + expected output) for this exact method
(but not revealing the &ldquo;real&rdquo; test files which would they use while grading),
but the &ldquo;serious&rdquo; tests happened in the student-run &ldquo;homework help&rdquo; forum (ah,
phpbb&hellip;), where students would regularly place gargantuan test files to
compare your program against (these were very helpful in finding memory
handling errors).</p>
<p>For an advanced technique, I wrote a &ldquo;reference&rdquo; implementation in Python (this
is much shorter than the C version, and probably less bug-prone). I then
generated random input files, fed them into both programs, and whenever the
output would differ between the two - I&rsquo;d found in a bug (in one of the
versions).</p>
<p>I recall a certain student festival, a friend ran up to me, and exclaimed: &ldquo;I&rsquo;m
totally wasted. I&rsquo;ve had no sleep for the past two days, but I&rsquo;ve finally
finished the exercise. <code>diff</code> [outputs] 0 [lines of difference]!  Whoo!&rdquo; He
ran off at this point.</p>
<p>What does all of this have to do with test-driven development? It became
&ldquo;known&rdquo; that it&rsquo;s better to start the exercises later, so that early-bird
students will have test data up on the forum before you start. Then, just code
until the tests pass. Ah, the excuses we students come up with for
procrastination&hellip;</p>
<p>I&rsquo;ve been striving to do test-driven development ever since, with the help of
proper unit testing frameworks, and it&rsquo;s hard for me to think of having ever
coded without it. There are plenty of resources online explaining why
unit-testing is such a helpful idea&hellip; all I&rsquo;m saying is that you might already
be testing your code, not realizing that a nice framework can help. But more on
that later&hellip;</p>
]]></content:encoded></item><item><title>Multiple library versions</title><link>https://lutzky.net/2013/05/15/multiple-library-versions/</link><pubDate>Wed, 15 May 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/05/15/multiple-library-versions/</guid><description>Working with vendor code in C can get very tricky, especially when you except breaking changes to occur. Especially when you have multiple binaries depending on that vendor code, updating at different times, necessitating different live versions. Let&amp;rsquo;s explore.
Introduction Assume you&amp;rsquo;re working with an external vendor, who is providing you with code for a wonderful function getFoo:
// foo.h version 1.2.3 int getFoo(); // foo.c version 1.2.3 int getFoo() { sleep(1000); // TODO improve performance return 42 } You use this function in many of your products - for example, in your best-selling barApp application:</description><content:encoded><![CDATA[<p>Working with vendor code in C can get very tricky, especially when you except breaking changes to occur. Especially when you have multiple binaries depending on that vendor code, updating at different times, necessitating different live versions. Let&rsquo;s explore.</p>
<h2 id="introduction">Introduction</h2>
<p>Assume you&rsquo;re working with an external vendor, who is providing you with code
for a wonderful function <code>getFoo</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">// foo.h version 1.2.3
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">getFoo</span><span class="p">();</span>

<span class="c1">// foo.c version 1.2.3
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">getFoo</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// TODO improve performance
</span><span class="c1"></span>	<span class="k">return</span> <span class="mi">42</span>
<span class="p">}</span>
</code></pre></div><p>You use this function in many of your products - for example, in your
best-selling <code>barApp</code> application:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">// barApp.c
</span><span class="c1"></span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">getFoo</span><span class="p">());</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>So <code>barApp</code>, and other applications, would want to use a <code>foo</code> library.  It
makes sense to provide this function in a shared library (<code>libfoo.so</code>).
However, this library will change in the future, in several ways:</p>
<ol>
<li>Binary-compatible changes</li>
</ol>
<ul>
<li>Performance improvements (<code>sleep</code> will be removed)</li>
<li>Additional functionality will become available (new functions)</li>
</ul>
<ol start="2">
<li>Binary-incompatibile changes - at the very least, recompilation will be necessary</li>
</ol>
<ul>
<li>For C, this is usually caused by changes to macros</li>
<li>For C++, a plethora of reasons: Virtual function reimplementation, function
inlining, new private data members&hellip;</li>
</ul>
<ol start="3">
<li>Source-incompatible changes - these will require you to change your source
code (in <code>barApp</code>):</li>
</ol>
<ul>
<li>Functions (which you use) being removed or renamed</li>
<li>Semantic changes - <code>getFoo</code> could return 43</li>
</ul>
<p>This gets even more complicated due to the fact that <code>barApp</code> is an operational,
mission-critical application for your organization. Developers may need to
hotfix older versions of <code>barApp</code>, which use older versions of <code>libfoo</code>. The build
servers and developer boxes will need to be able to have multiple versions of
<code>libfoo</code> installed simultaneously.</p>
<h2 id="compiling-installing-and-using-a-shared-library-properly">Compiling, installing, and using a shared library properly</h2>
<p>First, the upstream vendor should compile <code>libfoo.so</code> with an <code>SONAME</code>, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">gcc -shared -Wl,-soname,libfoo.so.1 -o libfoo.so.1.2.3 foo.c
objdump -x libfoo.so.1.2.3 <span class="p">|</span> grep SONAME
<span class="c1"># SONAME               libfoo.so.1</span>
</code></pre></div><p>The guarantee the upstream vendor should give is this: As long as <code>SONAME</code>
doesn&rsquo;t change, binary compatibility will be retained.</p>
<p>Now, you (or, preferably, your package manager) should install the package on your machine like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">mkdir -p /usr/include/foo1
cp foo.h /usr/include/foo1
cp libfoo.so.1.2.3 /usr/lib
ldconfig -v <span class="p">|</span> grep libfoo
<span class="c1"># libfoo.so.1 -&gt; libfoo.so.1.2.3</span>
</code></pre></div><p>Now, traditionally <em>another</em> symlink <code>libfoo.so</code> -&gt; <code>libfoo.so.1.2.3</code> would be
created, so you could compile <code>barApp</code> with <code>-lfoo</code>. However, here&rsquo;s an
alternative:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">gcc -I/usr/include/foo1 -l:libfoo.so.1 barApp.c -o barApp
ldd barApp
<span class="c1"># linux-vdso.so.1 =&gt;  (0x00007fff8edfe000)</span>
<span class="c1"># libfoo.so.1 =&gt; /usr/lib/libfoo.so.1 (0x00007fb367cce000)</span>
<span class="c1"># libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb367906000)</span>
<span class="c1"># /lib64/ld-linux-x86-64.so.2 (0x00007fb367ef2000)</span>
</code></pre></div><p>Now <code>barApp</code> is compiled, and looks for <code>libfoo.so.1</code> - it will find it thanks
to the symlink created by <code>ldconfig</code>, and use <code>libfoo.so.1.2.3</code>.</p>
<h2 id="aftermath">Aftermath</h2>
<h3 id="binary-compatible-updates">Binary-compatible updates</h3>
<p>Suppose a new, compatible, faster version of <code>libfoo</code> is released - say version
\1.3.0, which has removed that pesky <code>sleep</code>. Well, just place it in <code>/usr/lib</code>
and rerun <code>ldconfig</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">cp libfoo.so.1.3.0 /usr/lib
ldconfig -v <span class="p">|</span> grep libfoo
<span class="c1"># -&gt; libfoo.so.1 -&gt; libfoo.so.1.3.0</span>
</code></pre></div><p>The symlink has been updated, and now all applications (<code>barApp</code>, for example)
which were linked against <code>libfoo.so.1</code> will have improved performance.</p>
<h3 id="incompatible-updates">Incompatible updates</h3>
<p>Suppose a new, incompatible version 2.0.0 of <code>libfoo</code> is released, which would
force the newer <code>barApp2.0</code> to be recompiled against the new, different
headers. No problem:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">mkdir -p /usr/include/foo2
cp foo.h /usr/include/foo2
cp libfoo.so.2.0.0 /usr/lib
ldconfig -v <span class="p">|</span> grep libfoo
<span class="c1"># -&gt; libfoo.so.2 -&gt; libfoo.so.2.0.0</span>
<span class="c1"># -&gt; libfoo.so.1 -&gt; libfoo.so.1.3.0</span>
gcc -I/usr/include/foo2 -l:libfoo.so.2 barApp2.0.c -o barApp2.0
</code></pre></div><p>Both versions of <code>libfoo</code> are installed simultaneously, and do not conflict.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>The <a href="http://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-sharedlibs-runtime">Debian policy guide</a> states that <code>-dev</code> packages should include
the <code>libfoo.so</code> symlink. However, this would cause a conflict between the
<code>-dev</code> packages for two different generations of <code>libfoo</code>. I am curious as to
how this problem is solved &ldquo;in the wild&rdquo;, as I&rsquo;m sure Debian have good reasons
for suggesting this.</p>
]]></content:encoded></item><item><title>Reading, writing and vacations</title><link>https://lutzky.net/2013/03/27/reading-writing-and-vacation/</link><pubDate>Wed, 27 Mar 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/03/27/reading-writing-and-vacation/</guid><description>Vacations are a great time for doing that problematic category of things every management course teaches you about: important, but not urgent. For some people, it&amp;rsquo;s housework or schoolwork which gets drowned out by day-to-day life. For others it&amp;rsquo;s keeping up with friends and family. Myself, I also like to read and write.
Writing, for me, is usually about practical stuff. Sometimes it&amp;rsquo;s simply code (most of those projects were written on vacations).</description><content:encoded><![CDATA[<p>Vacations are a great time for doing that problematic category of things every
management course teaches you about: important, but not urgent. For some
people, it&rsquo;s housework or schoolwork which gets drowned out by day-to-day life.
For others it&rsquo;s keeping up with friends and family. Myself, I also like to
<em>read</em> and <em>write</em>.</p>
<p>Writing, for me, is usually about practical stuff. Sometimes it&rsquo;s simply
<a href="https://github.com/lutzky">code</a> (most of those projects were written on
vacations). Other times, it&rsquo;s writing to this blog (in one of its
incarnations) - which usually has to do with technical tinkering of some sort
or other. It&rsquo;s not that I don&rsquo;t do enough writing in my day job; but there does
tend to be an accumulation of things to write: &ldquo;I should blog about that&rdquo;, &ldquo;I
should write that code&rdquo;, &ldquo;I should try and get my router to do that&rdquo;, and so
forth. When a few days off come by, and I feel that I have enough time to get
more urgent stuff done - it&rsquo;s quite satisfying to be able to dig into that
write-queue.</p>
<p>Reading is the same, but the other way around. I&rsquo;m not talking about standard
RSS feeds (Google Reader R.I.P.), which I usually only have time to skim
through. I mean something pertaining to that: Once in a while, I come across an
article (be it from an RSS feed, a social network, or a news site), which is
too long to read immediately, but I&rsquo;d really like to get into later on, when I
have time. Usually it&rsquo;s text, but sometimes it&rsquo;s a long form video (usually
from a technical conferences such as the recent C++ and Beyond or Google I/O).
Either way, these past few days I&rsquo;ve had the opportunity to take a nice bite
out of my reading queue, with some entries being over a year old. To manage
this queue I use <a href="http://getpocket.com">Pocket</a> (integrates well with Chrome,
Android, Feedly and others), and I highly recommend it.</p>
<p>If you have some time off, enjoy it. Read something. Write something as well.</p>
]]></content:encoded></item><item><title>Translationese</title><link>https://lutzky.net/2013/03/24/translationese/</link><pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/03/24/translationese/</guid><description>As part of my M.Sc. studies, I&amp;rsquo;ve recently completed a small laboratory project in natural language processing. I&amp;rsquo;ve learned quite a bit from it, and had a chance to use a few of my favorite technologies.
The project was coded in Python, which is not my favorite programming language - Ruby is. However, since Python is more popular at my workplace, and seems to have a richer ecosystem around it (sometimes, at any rate), I&amp;rsquo;ve grown to love it almost as much over the years.</description><content:encoded><![CDATA[<p>As part of my M.Sc. studies, I&rsquo;ve recently completed a small laboratory project
in natural language processing. I&rsquo;ve learned quite a bit from it, and had a
chance to use a few of my favorite technologies.</p>
<p>The project was coded in Python, which is <em>not</em> my favorite programming
language - Ruby is. However, since Python is more popular at my workplace, and
seems to have a richer ecosystem around it (sometimes, at any rate), I&rsquo;ve grown
to love it almost as much over the years. It&rsquo;s quick, easy, and has fantastic
libraries; specifically, for this project, we made heavy use of the <a href="http://nltk.org">Natural
Language Toolkit</a>. We used Git for source control and Github
for hosting, Travis for continuous integration, and ReadTheDocs for
documentation. All of these culminate in the project being handed in as a
single link: <a href="http://github.com/lutzky/translationese">http://github.com/lutzky/translationese</a>.</p>
<p>The translationese project is a re-implementation of the concepts presented in
&ldquo;On The Features Of Translationese&rdquo;, an article describing an attempt to
automatically distinguish between texts written in English originally, and
texts translated to English from a different language. Since this turned to be
an easy problem, the focus was to determine what specific <em>features</em> of a given
text are better at distinguishing between the two categories.</p>
<p>Why reproduce results from an existing article? Well, beyond academic points,
we wanted to provide well-documented, easily-extensible, <em>tested</em> code. The
article was not always clear on specific definitions of various features;
Python code makes these completely explicit, in a relatively readable way (for
code, at any rate).</p>
<p>To keep code quality high, we used test-driven development: each feature was
coded only after a (failing) unit test for it was written. This helped keep the
code modular, and made refactoring (which happened quite a bit) easy and safe.
The resulting design proved to be quite flexible, as I will shortly explain.</p>
<p><a href="http://en.wikipedia.org/wiki/Support_vector_machine">SVM</a> is a form of
<em>machine learning</em>. Simply put, it&rsquo;s a method of teaching a machine to
distinguish between two categories of &ldquo;points&rdquo; (in our case, &ldquo;translated&rdquo; and
&ldquo;original&rdquo;). The SVM is given two such sets, and tries to draw a &ldquo;line&rdquo; (or,
generally, a hyperplane) separating them. Afterwards, it should be able to
classify new points (without being told which set they belong to) by which side
of the line they are. The following image (Wikipedia) shows a simple,
two-dimensional case (the red line properly distinguishing the two sets):</p>
<p><img loading="lazy" src="http://upload.wikimedia.org/wikipedia/commons/b/b5/Svm_separating_hyperplanes_%28SVG%29.svg" alt=""  />
{: style=&ldquo;max-width:350px&rdquo;}</p>
<p>For our case, each <em>&ldquo;property&rdquo;</em> took a block of text, and translated it to an
<em>n</em>-dimensional point. For some properties, the dimension was quite extreme.
For example, the property of character trigrams gives each coordinate the value
of &ldquo;how many times does each permutation of three consecutive letters appear in
the text&rdquo;. There are 17,576 such permutations, so each text became a point in a
17,576-dimensional space. These points were fed into an SVM algorithm
implemented in <a href="http://www.cs.waikato.ac.nz/ml/weka">Weka</a>.</p>
<p>During the final presentation of the project, we explained that the
particularly high-dimensionality properties proved to be too much for Weka (it
would use up all available RAM), so smaller sample sizes were used for those.
However, we were told that using sparse vector representation as Weka&rsquo;s input
could allow it to be more efficient. Fortunately, our design proved to be
robust enough that I could implement (and test) the change during the
presentation (<a href="https://github.com/lutzky/translationese/commit/12786459ef41d64963fd19433ba86dd71acc0e92">1278645</a>).  Indeed, we now had no problems with the
high-dimensionality properties, and repeated our runs, updating the
documentation (after we were given our grade&hellip;)</p>
<p>There&rsquo;s a somewhat eerie aspect to this project. Having used SVM, I have no
idea how it works. While I know exactly how my Python code works, and exactly
what the SVM algorithm does, I still don&rsquo;t know how to tell a translated text
from one written in English originally. Even looking at the SVM output, which
details exactly what the resulting classifier does, the data is the result of
analyzing thousands of texts, and something of an &ldquo;intuition&rdquo; the classifier
has generated from its &ldquo;experience&rdquo;; certainly not a formal algorithm that I
can read and understand. While I could read it and painstakingly apply it
manually to text, I&rsquo;d be blindly following a program which I do not understand,
much like a Rubik&rsquo;s Cube novice following an algorithm, not (yet) understanding
why it solves the cube, and being quite surprised when it does. With the high
complexity of the resulting classifier (for example - for every three letters,
look up its index in a 17,576-entry list and increment it by a factor), I&rsquo;d
have no chance of ever understanding how it works. In essence, I&rsquo;ve written
code to have my computer learn how to do something, but it cannot practically
teach me what it has learned.</p>
]]></content:encoded></item><item><title>Linux stuff</title><link>https://lutzky.net/linux-stuff/</link><pubDate>Sat, 23 Mar 2013 21:52:36 +0000</pubDate><guid>https://lutzky.net/linux-stuff/</guid><description>Here is an assortment of Linux-related tips and tricks.
If you&amp;rsquo;re tired of hitting your SSH password over and over again, you might want to take a look at this guide: SSH Public Key Authentication.
If you&amp;rsquo;re a Technion student taking the Matam course, you should definitely check out the Matam Guide.
Here is a list of lectures I&amp;rsquo;ve given in Haifux:
Lightning Talks 2005 (w/Many others) LIRC - Infrared Remote Control (w/Alon Altman) WiFi in Linux The VIM Editor for beginners (Rerun of Shlomi&amp;rsquo;s lecture) FatNS - How to develop a DNS forensics tool (w/Boaz Goldstein) Linux for CS Students - a Primer Linux for CS Students - Debugging If you&amp;rsquo;re with a russian keyboard and need a stress sign, try /russian-stress.</description><content:encoded><![CDATA[<p>Here is an assortment of Linux-related tips and tricks.</p>
<p>If you&rsquo;re tired of hitting your SSH password over and over again, you might
want to take a look at this guide: <a href="/linux-stuff/ssh-public-key-authentication">SSH Public Key
Authentication</a>.</p>
<p>If you&rsquo;re a Technion student taking the Matam course, you should definitely
check out the <a href="http://www.underwar.co.il/document-details.asp?id=293">Matam
Guide</a>.</p>
<p>Here is a list of lectures I&rsquo;ve given in <a href="http://haifux.org">Haifux</a>:</p>
<ul>
<li><a href="http://haifux.org/lectures/127">Lightning Talks 2005 (w/Many others)</a></li>
<li><a href="http://haifux.org/lectures/129">LIRC - Infrared Remote Control (w/Alon Altman)</a></li>
<li><a href="http://haifux.org/lectures/138">WiFi in Linux</a></li>
<li><a href="http://www.shlomifish.org/lecture/Vim/beginners/slides/">The VIM Editor for beginners</a> (Rerun of Shlomi&rsquo;s lecture)</li>
<li><a href="http://haifux.org/lectures/147">FatNS - How to develop a DNS forensics tool</a> (w/Boaz Goldstein)</li>
<li><a href="http://haifux.org/lectures/152-sil">Linux for CS Students - a Primer</a></li>
<li><a href="http://haifux.org/lectures/153-sil1">Linux for CS Students - Debugging</a></li>
</ul>
<p>If you&rsquo;re with a russian keyboard and need a stress sign, try <a href="/russian-stress">/russian-stress</a>.</p>
]]></content:encoded></item><item><title>SSH public key authentication</title><link>https://lutzky.net/linux-stuff/ssh-public-key-authentication/</link><pubDate>Sat, 23 Mar 2013 21:51:06 +0000</pubDate><guid>https://lutzky.net/linux-stuff/ssh-public-key-authentication/</guid><description>If you find yourself logging into SSH servers a lot, you might find this tip useful - you&amp;rsquo;ll only need to type your password once per session. But first, let&amp;rsquo;s set the default username (so you don&amp;rsquo;t have to tell SSH what user you are every time):
$ cd ~ $ mkdir .ssh $ chmod 700 .ssh $ cat &amp;gt;&amp;gt; .ssh/config Host t2.technion.ac.il User slutzky Ctrl-D $ Now, create a public/private key pair for SSH, like so:</description><content:encoded><![CDATA[<p>If you find yourself logging into SSH servers a lot, you might find this tip
useful - you&rsquo;ll only need to type your password once per session. But first,
let&rsquo;s set the default username (so you don&rsquo;t have to tell SSH what user you are
every time):</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ cd ~
$ mkdir .ssh
$ chmod 700 .ssh
$ cat &gt;&gt; .ssh/config
Host t2.technion.ac.il
	User slutzky
Ctrl-D
$
</code></pre><p>Now, create a public/private key pair for SSH, like so:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/tactless/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): use_a_password
Enter same passphrase again: use_a_password
Your identification has been saved in /home/tactless/.ssh/id_rsa.
Your public key has been saved in /home/tactless/.ssh/id_rsa.pub.
The key fingerprint is:
5a:3a:e3:f4:6e:91:fe:3f:27:4e:f4:46:0d:5e:50:4f tactless@dolphin
</code></pre><p>Now you have a public and private key: <code>~/.ssh/id_rsa</code> is the private key
(don&rsquo;t give this to anyone!), and <code>~/.ssh/id_rsa.pub</code> is the public key - give
this to everyone. Specifically, put it on the SSH server you want to log into,
making sure the permissions are correct. There&rsquo;s a script which does this:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ ssh-copy-id t2.technion.ac.il
</code></pre><p>It basically does the following for you:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ scp ~/.ssh/id_rsa.pub t2.technion.ac.il:
password:
$ ssh t2.technion.ac.il
&gt; mkdir .ssh
&gt; cat id_rsa.pub &gt;&gt; .ssh/authorized_keys
&gt; chmod 700 .ssh .ssh/authorized_keys
&gt; chmod 755 .
&gt; logout
</code></pre><p>Now, when you log in to your local account, before using SSH for the first time, type the following command:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ ssh-add
Enter passphrase for /home/tactless/.ssh/id_rsa: your-password-here
$ ssh t2.technion.ac.il
&gt; # notice, didn't type a password
&gt; logout
$ ssh t2.technion.ac.il
&gt; # no password this time either
</code></pre>]]></content:encoded></item><item><title>The show downloading stack - part n+1</title><link>https://lutzky.net/2011/12/15/the-show-downloading-stack-part-n1/</link><pubDate>Thu, 15 Dec 2011 00:00:00 +0000</pubDate><guid>https://lutzky.net/2011/12/15/the-show-downloading-stack-part-n1/</guid><description>I&amp;rsquo;ve already mentioned my show downloading stack on this blog. It&amp;rsquo;s changed a bit since - I now use Transmission rather than rtorrent, as it has the excellent transmission-daemon package which has it acting exactly the way I like (without using screen). Also, it now E-mails me when a torrent is done downloading. So while this may be how TV works for you:
Notice that a new episode is out Torrent it Wait for the download to finish Watch it &amp;hellip;this is how TV works for me now:</description><content:encoded><![CDATA[<p>I&rsquo;ve <a href="/2009/09/05/my-show-downloading-stack">already mentioned</a> my show downloading stack on this blog. It&rsquo;s
changed a bit since - I now use <a href="http://transmission-bt.org/">Transmission</a>
rather than rtorrent, as it has the excellent <code>transmission-daemon</code> package
which has it acting exactly the way I like (without using <code>screen</code>). Also, it
now E-mails me when a torrent is done downloading. So while this may be how TV
works for you:</p>
<ol>
<li>Notice that a new episode is out</li>
<li>Torrent it</li>
<li>Wait for the download to finish</li>
<li>Watch it</li>
</ol>
<p>&hellip;this is how TV works for me now:</p>
<ol>
<li>Receive E-mail notification of a new downloaded episode</li>
<li>Watch it</li>
</ol>
<p>Here&rsquo;s how it&rsquo;s done: First, write <code>/usr/local/bin/notify_torrent_done</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>cat_the_message<span class="o">()</span> <span class="o">{</span>
cat <span class="s">&lt;&lt;EOF
</span><span class="s">Subject: Torrent done: $TR_TORRENT_NAME
</span><span class="s">
</span><span class="s">Hello from transmission $TR_APP_VERSION at $(hostname). The following torrent
</span><span class="s">has completed:
</span><span class="s">
</span><span class="s">Name: $TR_TORRENT_NAME
</span><span class="s">Finished at: $TR_TIME_LOCALTIME
</span><span class="s">Downloaded to: $TR_TORRENT_DIR
</span><span class="s">Hash: $TR_TORRENT_HASH
</span><span class="s">
</span><span class="s">Enjoy!
</span><span class="s">EOF</span>
<span class="o">}</span>

<span class="nv">RETVAL</span><span class="o">=</span><span class="m">1</span>

<span class="k">while</span> <span class="o">[[</span> <span class="nv">$RETVAL</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span>
    cat_the_message <span class="p">|</span> msmtp -C /etc/msmtprc.transmission --from default -t your@email.address
    <span class="nv">RETVAL</span><span class="o">=</span><span class="nv">$?</span>
<span class="k">done</span>
</code></pre></div><p>The various environment variables will be set by transmission when it calls
this script. We rerun <code>msmtp</code> until it succeeds because you will often get a
&ldquo;connection timed out&rdquo; response from gmail (&hellip;at least on my ISP&hellip;). Here&rsquo;s
<code>/etc/msmtprc.transmission</code> which is relevant to gmail (this is a bit tricky
and took a lot of fiddling around with):</p>
<pre tabindex="0"><code>defaults
tls on
tls_starttls on
tls_trust_file /etc/ssl/certs/ca-certificates.crt
timeout 60

account default
host smtp.gmail.com
port 587
auth on
user yourusername@gmail.com
password yourpasswordhere
from yourusername@gmail.com
syslog LOG_MAIL
</code></pre><p>As usual, caution is required when saving your password in plaintext. I highly
recommend using Google&rsquo;s two-step authentication, which will have you creating
a one-time password for each application - use one of those one-time passwords
here.</p>
<p>Finally, in <code>/etc/transmission-daemon/settings.json</code>, add the following code:</p>
<pre tabindex="0"><code>&quot;script-torrent-done-enabled&quot;: true,
&quot;script-torrent-done-filename&quot;: &quot;/usr/local/bin/notify_torrent_done&quot;,
</code></pre><p><strong>Important:</strong> You need to run <code>/etc/init.d/transmission-daemon reload</code> at
this point, not <code>restart</code> - that would cause <code>settings.json</code> to be
rewritten from runtime configuration.</p>
<p>That&rsquo;s it. Enjoy!</p>
]]></content:encoded></item><item><title>Developing TransportDroidIL for Android</title><link>https://lutzky.net/2011/10/08/developing-transportdroidil-for-android/</link><pubDate>Sat, 08 Oct 2011 00:00:00 +0000</pubDate><guid>https://lutzky.net/2011/10/08/developing-transportdroidil-for-android/</guid><description>Here are a few words on developing TransportDroidIL, a small utility to query Israeli public transportation sites more easily using an Android phone.
Source control is super important. Mistakes will be made, other coders will want to join in, and experimental features will want to be in their own branches. Git is awesome; it does source control right, gives me powerful tools, and isn&amp;rsquo;t a hassle to set up - even for a small project like this.</description><content:encoded><![CDATA[<p>Here are a few words on developing <a href="https://market.android.com/details?id=net.lutzky.transportdroidil">TransportDroidIL</a>, a small
utility to query Israeli public transportation sites more easily using an
Android phone.</p>
<p>Source control is super important. Mistakes will be made, other coders will
want to join in, and experimental features will want to be in their own
branches. <a href="http://git-scm.com/">Git</a> is awesome; it does source control
<em>right</em>, gives me powerful tools, and isn&rsquo;t a hassle to set up - even for a
small project like this. <a href="http://github.com/">Github</a> is also awesome; it makes
collaboration with other coders - even just one, in my case - easy, organized,
and fun.</p>
<p>One of my favorite git features is <em>revert</em>. It allows you to automatically
inverse a previous change. Here&rsquo;s an example from TransportDroidIL:
<a href="https://github.com/lutzky/TransportDroidIL/commit/0e194de5b8f24f85a3b4931963a06743525dacf8">0e194de</a>.
This commit reverts a previous &ldquo;cleanup&rdquo; commit in the autocompletion code -
allegedly, I was keeping two copies of the autocompletion option list for no
reason: One as a <code>LinkedList&lt;string&gt;</code>, and one internal to the
AutoCompleteTextView which I can access via an <code>ArrayAdapter&lt;string&gt;</code>. Turns out
that my <code>LinkedList&lt;string&gt;</code> copy is necessary, because the <code>ArrayAdapter&lt;string&gt;</code>
always behaves as though it&rsquo;s empty, so it cannot truly be read from. Despite
having performed a few commits since that bad &ldquo;fix&rdquo;, git was very helpful in
letting me revert that particular change, showing me the conflicts this
operation causes, and allowing me to fix them. The lesson is an important one:
Make small, manageable commits. Git is optimized for this, as commits are local
(no need to contact the server until a <em>push</em>).</p>
<p>Developing for Android makes a lot of sense when using Eclipse. I&rsquo;m a VIM
junkie, and generally dislike IDEs. Eclipse is slow and heavy - but it gets the
job done, and it does it very well. It&rsquo;s a bit weird that a plugin is required
to manage color schemes - but it exists. It&rsquo;s <strong>very</strong> weird (and quite
annoying) that it doesn&rsquo;t remove end-of-line white-space, and doesn&rsquo;t have an
option to do this. This makes git complain. There <em>is</em> an option to add
&ldquo;clean-up&rdquo; settings which are activated on every save, but this is far too
cumbersome and might change code I didn&rsquo;t intend to change (which becomes
confusing in the revision log). Still, the excellent debugging, JUnit and
logcat support are worth it.</p>
<p>Logcat is another awesome feature of Android. Every logged line has both a
&ldquo;Tag&rdquo; (usually defined per-class) and a severity. Logs can be filtered with a
different severity for each tag, and still - one can use the same logcat to
show messages from anything running on the Android device at the moment. It&rsquo;s
basically Syslog done better.</p>
<p>One last point is about Hebrew. This has been a problem with Android for quite
a while; for example, in a stock Android 2.3.3, numbers embedded in Hebrew
string appear backwards. Fixes exist, and are implemented in most Israeli ROMs,
especially the ones distributed by phone carriers - but they&rsquo;re different, and
sometimes don&rsquo;t work for all applications. This causes numbers to appear
backwards in TransportDroidIL, which in turn caused me to implement an
<a href="https://github.com/lutzky/TransportDroidIL/commit/713a9bd89547763776bb8a1c991ceb23bd6426c5">ugly</a> <a href="https://github.com/lutzky/TransportDroidIL/commit/6ba21053a8e981882bd0b1f808f257979a2bf488">hack</a>. I hope the upcoming Ice Cream Sandwich
release fixes this.</p>
]]></content:encoded></item><item><title>Home network wiring</title><link>https://lutzky.net/2011/09/04/home-network-wiring/</link><pubDate>Sun, 04 Sep 2011 00:00:00 +0000</pubDate><guid>https://lutzky.net/2011/09/04/home-network-wiring/</guid><description>&lt;p>I don&amp;rsquo;t like wireless connections; they&amp;rsquo;re always second-best, be it in terms
of security, speed, or reliability. Here&amp;rsquo;s how my apartment looks (very
approximately):&lt;/p></description><content:encoded><![CDATA[<p>I don&rsquo;t like wireless connections; they&rsquo;re always second-best, be it in terms
of security, speed, or reliability. Here&rsquo;s how my apartment looks (very
approximately):</p>
<pre tabindex="0"><code>.-P1----.  .-------------------P4-,---------,
|  PC   |  |       COMFY SOFA     .         |
|       |  |                      . Closed  |
|  .-,  |  |      Living room     . Porch   |
|  |B| P2  |                      .         |
|  |E|     |                      .         |
|  |D|  |      HUGE CUPBOARD   TV .  R PC   |
`-------'  `-P3-------------------'--P5-----'
 My room
</code></pre><p>The room on the left is mine, with my (constantly torrenting) PC in bed-viewing
position. The router (<code>R</code>) is in the closed porch, connected to my roommate&rsquo;s
PC. Wifi doesn&rsquo;t stand a chance through two walls and the porch&rsquo;s glass screen.
<code>P1</code> through <code>P5</code> are power outlets.</p>
<h2 id="first-solution">First solution</h2>
<p>Put a <a href="/2010/11/20/dd-wrt-awesomeness">reverse DD-WRT router</a> at P2 (with a cable going across the room from
the PC). Slow connection, not very reliable.  This worked well enough for
several months.</p>
<h2 id="second-solution">Second solution</h2>
<p>Get a pair of <a href="http://www.aztech.com/sg/homeplug_hl110e.html">homeplugs</a>. Stick
one at P1 (connected through a power strip shared by the PC, speakers, screen
and guitar amp). Stick another at P5 (connected through a power strip shared by
the other PC, router, modem, TV, fan, printer, speakers and a lamp). It
<em>shouldn&rsquo;t</em> work - but it does. It blinks red, is nowhere near the promised
200Mbps, but it&rsquo;s still faster (and more reliable) than my internet connection.
These homeplug devices are fantastic - they require literally no configuration
(unless you want to reconfigure the encryption keys) and work very well, I
highly recommend them.  The problem was when I got an Xtreamer - a cute device
to watch my shows on my living room TV (see: comfy sofa). Once I plug it in,
the homeplug connection dies on me, proverbially the last straw.</p>
<h2 id="third-solution">Third solution</h2>
<p>Thankfully, I have my Big Box of Electronic Junk, which contained a Super Long
(read: haven&rsquo;t measured it) network cable. Moved the homeplug to P3, hid the
cable behind the Huge Cupboard. Problem solved.  On a side note, I would have
preferred a <a href="http://boxee.tv">Boxee Box</a>, but sadly it doesn&rsquo;t support lame old
RCA connections.</p>]]></content:encoded></item><item><title>Upcoming features in TransportDroidIL</title><link>https://lutzky.net/2011/09/02/upcoming-features-in-transportdroidil/</link><pubDate>Fri, 02 Sep 2011 00:00:00 +0000</pubDate><guid>https://lutzky.net/2011/09/02/upcoming-features-in-transportdroidil/</guid><description>Hello everyone, TransportDroidIL 1.0 will be released this month. It has quite a few new features:
Separate &amp;ldquo;Source&amp;rdquo;, &amp;ldquo;Destination&amp;rdquo; and &amp;ldquo;Time&amp;rdquo; fields. This is much better for auto-completion as well. Automatic location-based detection of &amp;ldquo;Source&amp;rdquo;. Hopefully you&amp;rsquo;ll find the interface for this unobtrusive. Quick reversal of &amp;ldquo;Source&amp;rdquo; and &amp;ldquo;Destination&amp;rdquo;, for your return trip. A new settings screen, with: Provider selection (currently Egged or MOT) A small attempt at right-to-left fixes for non-supporting devices.</description><content:encoded><![CDATA[<p>Hello everyone, TransportDroidIL 1.0 will be released this month. It has quite a few new features:</p>
<ol>
<li>Separate &ldquo;Source&rdquo;, &ldquo;Destination&rdquo; and &ldquo;Time&rdquo; fields. This is much better for
auto-completion as well.</li>
<li>Automatic location-based detection of &ldquo;Source&rdquo;. Hopefully you&rsquo;ll find the
interface for this unobtrusive.</li>
<li>Quick reversal of &ldquo;Source&rdquo; and &ldquo;Destination&rdquo;, for your return trip.</li>
<li>A new settings screen, with:
<ul>
<li>Provider selection (currently Egged or MOT)</li>
<li>A small attempt at right-to-left fixes for non-supporting devices.</li>
<li>A &ldquo;clear history&rdquo; button</li>
</ul>
</li>
</ol>
<p>Everyone loves screenshots:</p>
<figure>
  <a href="/2011/09/02/upcoming-features-in-transportdroidil/device2.png">
    <img loading="lazy" src="/2011/09/02/upcoming-features-in-transportdroidil/device2.png" />
  </a><figcaption>Separate source and destination fields</figcaption></figure>
<figure>
  <a href="/2011/09/02/upcoming-features-in-transportdroidil/prefs.png">
    <img loading="lazy" src="/2011/09/02/upcoming-features-in-transportdroidil/prefs.png" />
  </a><figcaption>Select data provider</figcaption></figure>
<figure>
  <a href="/2011/09/02/upcoming-features-in-transportdroidil/device.png">
    <img loading="lazy" src="/2011/09/02/upcoming-features-in-transportdroidil/device.png" />
  </a><figcaption>Automatic location detection, Egged provider</figcaption></figure>
<p>For a sneak peek, go to <a href="http://github.com/lutzky/TransportDroidIL">http://github.com/lutzky/TransportDroidIL</a> for the
latest sources. You can also report issues there.</p>
]]></content:encoded></item><item><title>SMS and why it annoys me</title><link>https://lutzky.net/2011/04/25/sms-and-why-it-annoys-me/</link><pubDate>Mon, 25 Apr 2011 00:00:00 +0000</pubDate><guid>https://lutzky.net/2011/04/25/sms-and-why-it-annoys-me/</guid><description>Don&amp;rsquo;t get me wrong. I love being able to communicate textually with friends, coworkers and family. It&amp;rsquo;s ideal for a noisy pub; a somewhat-private conversation on a crowded bus; telling something to someone who may be asleep, so they see it first thing when they wake up; making quick responses while in a meeting without being rude (well, at least at my workplace it&amp;rsquo;s considered perfectly acceptable). It&amp;rsquo;s also very handy when you want to tell someone something they ought to write down, such as a phone number or something they should remember to buy.</description><content:encoded><![CDATA[<p>Don&rsquo;t get me wrong. I love being able to communicate textually with friends,
coworkers and family. It&rsquo;s ideal for a noisy pub; a somewhat-private
conversation on a crowded bus; telling something to someone who may be asleep,
so they see it first thing when they wake up; making quick responses while in a
meeting without being rude (well, at least at my workplace it&rsquo;s considered
perfectly acceptable). It&rsquo;s also very handy when you want to tell someone
something they ought to write down, such as a phone number or something they
should remember to buy. My problem isn&rsquo;t with the concept of mobile textual
messaging - it&rsquo;s with SMS, the &ldquo;Short Message Service&rdquo;, as provided by Israeli
carriers (and possibly worldwide).</p>
<p>The first problem I&rsquo;d like to discuss is length. SMS messages are limited to
160 characters, or rather - 160 bytes. If your message includes any foreign
characters, such as Hebrew letters, then UTF-16 mode takes effect, and your
message is limited to 70 characters, which is ridiculously short. While the
name of the service, SMS, implies that the messages should indeed be short,
this is not the only common usage: If you want to have an actual conversation
with someone (and this is a perfectly reasonable situation), messages will be
longer than 160 characters, and certainly longer than 70. The problem becomes
worse if u dont want to use shorthands n skip punctuations like many smsers do.
(Ever found yourself about to send a 75-character message, going over it to
find 5 characters to trim without looking like an idiot?)</p>
<p>There have been several attempts to overcome the short-message problem, all of
them implemented as workarounds in cellphone software. The initial, primitive
approach was to simply split a message up into appropriately-sized chunks, and
send out those chunks as separate messages: A 150-character Hebrew message
would be sent out as 3 separate messages (70, 70, 10 characters respectively).
Later on, a mechanism was invented for the phones to detect the split messages,
stitch them back up on the recipient&rsquo;s phone, and notify the recipient if the
message is incomplete. Poor man&rsquo;s TCP.</p>
<p>The split-message solution is very problematic, especially when taking into
account two other problems with SMS: Reliability and price. The reliability
problem is subtle: SMS message <em>usually</em> make it across, but when they don&rsquo;t
(and sometimes, in fact, they don&rsquo;t), no notification is given. Where E-mail
servers notify you about delivery failure, where instant messaging services
tell you that the other party has disconnected, SMS has&hellip; nothing. There&rsquo;s no
way to know that your message hasn&rsquo;t been received, unless a little-known,
not-supported-everywhere and highly annoying &ldquo;read receipt&rdquo; feature is enabled.</p>
<p>The price problem is completely absurd: I have a small 1GB plan at Orange,
which costs 70₪/month. That&rsquo;s 70 NIS / 1GB, 1GB being 109 bytes. That comes to
7 &amp;times 10-6 Agorot per byte. Suppose that an SMS-style service would need a
bloated 100-byte header, so an SMS message is 260 bytes. Therefore, an SMS
message should cost 0.00182 Agorot. In reality, it costs 44 Agorot
(inter-carrier average) without a plan, or 14 Agorot (at best, requiring a
1000-SMS plan) with a plan. That&rsquo;s between 7692× and 24176× as much.</p>
<p>One additional problem with SMS is the fact that they&rsquo;re locked into your
device. Got a new phone? You have to go through a very complicated process to
transfer your SMS messages over, and this isn&rsquo;t possible for every phone. Lost
your old phone? Unless you were backing up manually, your messages are gone.
Have a separate work-phone? You&rsquo;ll need to use each phone to see messages sent
specifically to it. None of these problems occur with an online E-mail
provider, why should they happen with mobile texting?</p>
<p>With modern phones, sending and receiving E-mail is just as easy as sending and
receiving SMS messages. The main problem is that not everyone has a modern
phone, and E-mail on older phones is quite cumbersome. Worse yet, older phones
don&rsquo;t immediately notify you of E-mails. There could be some good money in
creating an E-mail-to-SMS gateway - and it would be quite convenient to use if
done properly. Imagine having your SMS messages united with your E-mails,
organized and searchable by your favorite E-mail client. If you have a modern
phone with proper E-mail notification and sending abilities, this could be very
handy. Just sayin'.</p>
<p><strong>Addendum:</strong> It seems that <a href="http://www.youtube.com/watch?v=zpgMJ7Hv6tk">Google Voice</a> already does exactly
what I want, but is not available in Israel. Thanks, Shachar.</p>
]]></content:encoded></item><item><title>DD-WRT awesomeness</title><link>https://lutzky.net/2010/11/20/dd-wrt-awesomeness/</link><pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate><guid>https://lutzky.net/2010/11/20/dd-wrt-awesomeness/</guid><description>Since I&amp;rsquo;ve last posted, I&amp;rsquo;ve moved to a new apartment. First order of business - get a working internet connection. This is extra-challenging when your primary machine doesn&amp;rsquo;t even have a wireless network card.
My first hack used my trusty laptop - it has a properly working wireless card, and could connect to my roommate&amp;rsquo;s router quite easily. It runs Ubuntu, and as it turns out, that means sharing the connection was dead-simple: Right-click on the network manager icon, add a new wired connection called &amp;ldquo;Shared&amp;rdquo;, and under IPv4 settings, choose &amp;ldquo;Shared to other computers&amp;rdquo;.</description><content:encoded><![CDATA[<p>Since I&rsquo;ve last posted, I&rsquo;ve moved to a new apartment. First order of business -
get a working internet connection. This is extra-challenging when your
primary machine doesn&rsquo;t even have a wireless network card.</p>
<p>My first hack used my trusty laptop - it has a properly working wireless card,
and could connect to my roommate&rsquo;s router quite easily. It runs Ubuntu, and as
it turns out, that means sharing the connection was dead-simple: Right-click on
the network manager icon, add a new wired connection called &ldquo;Shared&rdquo;, and under
IPv4 settings, choose &ldquo;Shared to other computers&rdquo;. That&rsquo;s it. Once I connected
my desktop to my laptop, it automatically got all of its settings, and I was
good to go.</p>
<p>However, this was kind of annoying - I had to leave my laptop on, the reception
in my room isn&rsquo;t perfect so it would sometimes disconnect (requiring manual
intervention), and my laptop wasn&rsquo;t free for ordinary use (if I wanted my
torrents to keep going).</p>
<p>The solution: I grabbed my (horrible) old D-Link DIR-300 router, and installed
DD-WRT on it. This gave it an awesome &ldquo;client mode&rdquo; feature, which allowed it
to use it the same way I used my laptop to bridge my wireless connection.
Flashing it worked quite well by following the guide (the updated version in
the wiki, that is - it has proper instructions for connecting to RedBoot, the
D-Link flashing interface, from Linux), and another guide helped me set up
Client mode. All seems well, except for two issues:</p>
<p>First, port forwarding doesn&rsquo;t seem to work properly - it works well on the
internal network (that is, I can SSH into my desktop using my laptop), but not
on the internet (SSH port shows up as open, but I can&rsquo;t connect). I&rsquo;m also
guessing that UPnP/NAT-PMP won&rsquo;t work properly. Second, and this is an old
problem - the router has a high-pitched whine. This may have something to do
with the fact that the AC/DC adapter it came with is rated for 12V @ 1A,
whereas the router is rated 5V @ 1.2A. Let&rsquo;s hope it doesn&rsquo;t fry (hasn&rsquo;t for
the 3 years I used it).</p>
]]></content:encoded></item><item><title>Android</title><link>https://lutzky.net/2010/09/04/android/</link><pubDate>Sat, 04 Sep 2010 00:00:00 +0000</pubDate><guid>https://lutzky.net/2010/09/04/android/</guid><description>I&amp;rsquo;ve finally gotten the chance to get one of those newfangled Android phones.
I&amp;rsquo;ve recently &amp;ldquo;bought&amp;rdquo; a Samsung Galaxy Android phone (the older i7500, not the newer i9000 &amp;ldquo;S&amp;rdquo;) model. It&amp;rsquo;s a seriously serious upgrade from my old Nokia 6120 Classic, and as I broke the 6120&amp;rsquo;s screen and reverted back to my trusty old Nokia 6070 (which I couldn&amp;rsquo;t even get to run the GMail app), I was quite a happy camper switching to a modern phone.</description><content:encoded><![CDATA[<p>I&rsquo;ve finally gotten the chance to get one of those newfangled Android phones.</p>
<p>I&rsquo;ve recently &ldquo;bought&rdquo; a <a href="http://en.wikipedia.org/wiki/Samsung_Galaxy">Samsung Galaxy
Android</a> phone (the older i7500,
not the newer i9000 &ldquo;S&rdquo;) model. It&rsquo;s a seriously serious upgrade from my old
<a href="http://en.wikipedia.org/wiki/Nokia_6120_classic">Nokia 6120 Classic</a>, and as I
broke the 6120&rsquo;s screen and reverted back to my trusty old <a href="http://en.wikipedia.org/wiki/Nokia_6070">Nokia
6070</a> (which I couldn&rsquo;t even get to
run the GMail app), I was quite a happy camper switching to a modern phone.</p>
<p>The whole idea of Android has always been very appealing to me - Nokia&rsquo;s
software has been declining in quality, and while Motorola and Samsung have
always made excellent hardware, they could never get the knack of good
software. Google has. Problem solved, right?</p>
<p>The Android software is miles ahead of anything I&rsquo;ve ever seen, including
iPhone. I now have connectivity everywhere, and apps to sync all of my favorite
things - GMail and Google Calendar are included, GTasks is great for tasks,
Paperdroid is great for Read It Later, NewsRob is great for Google Reader. The
Facebook and Twidroyd applications are also quite nice, and the convenience has
me using those networks more. I even have nifty stuff like Transdroid, a
Transmission web client which is actually very good at <strong>adding</strong> torrents
while I&rsquo;m away, so they&rsquo;re done by the time I get home. I get my reading done
with Aldiko and ACV (for comics). Even Israeli sites have some good
applications up, such as YNet and <a href="http://d.co.il/">Dapei Zahav</a> have a nice
Android app, though not as nice as their iPhone ones. And of course, there&rsquo;s
the wonderful <a href="http://waze.co.il/">Waze</a>, which is the most Israeli solution to
the road congestion problem I&rsquo;ve ever seen. I&rsquo;ve even had the chance to do some
on-foot navigation with Google Maps, which is also handy.</p>
<p>The phone itself has a beautiful AMOLED screen, great audio quality (comes with
quite a good set of headphones as well), and looks sleek. The touchscreen is
responsive enough (though not anywhere near new Android devices nor the
iPhone/iPod touch), and it even comes with a free extra 8GB SD card, for a
total of 16GB.</p>
<p>And now, to rant.</p>
<p>Battery life isn&rsquo;t what is should be - the phone is awesome, I want to use it,
and it can barely get through the day - especially if I&rsquo;m doing heavy stuff
like Waze (GPS + Data + screen is always on + voice), but even if I&rsquo;m just
surfing casually. The unlock button is located inconveniently on the bottom
part of the right side, just above the camera button. The home button is
located between the Back and Send buttons, meaning it&rsquo;s very easy to hit by
accident; it&rsquo;s not even labeled. The CPU isn&rsquo;t always fast enough to keep
everything completely smooth, and while this is generally acceptable, it gets
rather irksome in odd places: If you turn on screen auto-rotation (which uses
more battery power), rotation takes a while and might be accidental. However,
there is no <em>manual</em> screen rotation option as far as I can tell.</p>
<p>As a music player (relating to my previous post), the device works well enough -
but I couldn&rsquo;t, for the life of me, get Hebrew support in ID3 tags (no matter
what the encoding is), and only a limited subset of ID3 tag versions is
supported, and everything works much better with Ogg files.</p>
<p>The flaws I&rsquo;ve mentioned are relatively minor and nitpicky - for Waze, you can
use the car charger (which comes with the phone, thankfully). The buttons are
OK after some getting used to (and installing the excellent AnySoftKeyboard),
and operation is generally smooth. However, there is a major issue I can&rsquo;t wrap
my head around - the shipped firmware is 1.5 cupcake, and there are absolutely
zero updates available from Samsung. There is a semi-official leaked 1.6 update
which, as I&rsquo;ve heard, is quite buggy. An awesome guy called
<a href="http://www.drakaz.com/">drakaz</a> has been working on a Froyo (2.2) port for the
Galaxy, which I really should check out, but Samsung&rsquo;s behavior on this topic
is inexcusable in my opinion.</p>
<p>All-in-all, however, I&rsquo;m happy with my phone. It&rsquo;s a joy to use, and the price
is hard to beat - free with my phone plan, provided I can rake up a bill of
150₪ (which I can, with some help from the 70₪ 1GB data plan, which comes in
quite handy). My next phone will, however, probably not be a Samsung.</p>
]]></content:encoded></item><item><title>Setting up Hebrew Android fonts on your AVD emulator</title><link>https://lutzky.net/2010/09/04/setting-up-hebrew-android-fonts-on-your-avd-emulator/</link><pubDate>Sat, 04 Sep 2010 00:00:00 +0000</pubDate><guid>https://lutzky.net/2010/09/04/setting-up-hebrew-android-fonts-on-your-avd-emulator/</guid><description>There are several good guides for installing Gilad Ben-Yossef&amp;rsquo;s excellent Hebdroid fonts on physical Android devices, but those don&amp;rsquo;t really work with the Android SDK&amp;rsquo;s emulator - changes to the system directory aren&amp;rsquo;t persistent. Here&amp;rsquo;s how to get around that:
First, a few downloads. You&amp;rsquo;ll need:
The android emulator (presumably you already have this, if not, you can get it at developer.android.com) The hebdroid fonts unyaffs, which will extract the system.</description><content:encoded><![CDATA[<p>There are several good guides for installing <a href="http://benyossef.com/">Gilad
Ben-Yossef</a>&rsquo;s excellent Hebdroid fonts on physical
Android devices, but those don&rsquo;t really work with the Android SDK&rsquo;s emulator -
changes to the <code>system</code> directory aren&rsquo;t persistent. Here&rsquo;s how to get around
that:</p>
<p>First, a few downloads. You&rsquo;ll need:</p>
<ol>
<li>The android emulator (presumably you already have this, if not, you can get
it at <a href="http://developer.android.com/">developer.android.com</a>)</li>
<li>The <a href="http://firstpost.org/wp-content/uploads/2009/02/hebdroid.zip">hebdroid fonts</a></li>
<li><a href="http://code.google.com/p/unyaffs/">unyaffs</a>, which will extract the <code>system.img</code> file</li>
<li><a href="http://www.aleph1.co.uk/gitweb?p=yaffs2/.git;a=snapshot;h=69808485ec796bfa2b4806f91828281eccd0827b;sf=tgz">A snapshot of
yaffs2</a>,
which will create our new <code>system.img</code> file. This is actually today&rsquo;s
snapshot from the git repository, which worked for me. For later versions,
take a look at <a href="http://www.yaffs.net/node/346">the git repository</a>.</li>
</ol>
<p>Building <code>unyaffs</code> is simple enough, or you can use the prebuilt version from
the site. Building <code>mkyaffs2image</code> is also quite easy - just untar the
snapshot, and run <code>make</code> in the <code>utils</code> directory. Put both of these utilities
somewhere in your <code>$PATH</code> for convenience.</p>
<p>Now we can get to work. First, locate your <code>system.img</code> file. It should be
within your Android SDK directory, under <code>platforms/android-3/images</code> (or
whatever version you&rsquo;re emulating). We&rsquo;ll extract that - create a temporary
directory, say <code>/tmp/system.img.hebdroid</code>, and <code>cd</code> to it. Then run:</p>
<pre tabindex="0"><code>unyaffs /path/to/system.img
</code></pre><p>The whole <code>/system</code> filesystem should be extracted. Now extract the <code>ttf</code> files
from <code>hebdroid.zip</code> into the fonts directory, replacing the original font
files. To pack everything back up, run:</p>
<pre tabindex="0"><code>mkyaffs2image /tmp/system.img.hebdroid system.img.hebdroid
</code></pre><p>Now, I recommend putting renaming your original <code>system.img</code> to
<code>system.img.orig</code>, and using symlinking <code>system.img.hebdroid</code> as your new
<code>system.img</code> (the emulator does indeed follow symlinks), but you can basically
do whatever you like. You may have to recreate your AVD, but everything should
work. Happy hacking!</p>
]]></content:encoded></item><item><title>Transport Droid IL</title><link>https://lutzky.net/2010/09/04/transport-droid-il/</link><pubDate>Sat, 04 Sep 2010 00:00:00 +0000</pubDate><guid>https://lutzky.net/2010/09/04/transport-droid-il/</guid><description>After a couple of days' messing with it, I&amp;rsquo;m releasing it: Transport Droid IL! It&amp;rsquo;s a handy little app for querying Egged&amp;rsquo;s site, as well as the new Ministry of Transportation site, on transportation information. This is pretty beta, but seems to work well enough.
More info, source code: http://lutzky.github.com/TransportDroidIL
APK File: TransportDroidIL.APK</description><content:encoded><![CDATA[<p>After a couple of days' messing with it, I&rsquo;m releasing it: <em>Transport Droid
IL</em>! It&rsquo;s a handy little app for querying <a href="http://egged.co.il/">Egged&rsquo;s site</a>,
as well as the new <a href="http://bus.gov.il/">Ministry of Transportation site</a>, on
transportation information. This is pretty beta, but seems to work well enough.</p>
<p>More info, source code:
<a href="http://lutzky.github.com/TransportDroidIL">http://lutzky.github.com/TransportDroidIL</a></p>
<p><strong>APK File:</strong>
<a href="http://lutzky.github.com/TransportDroidIL/TransportDroidIL.apk">TransportDroidIL.APK</a></p>
]]></content:encoded></item><item><title>My music player has sunk</title><link>https://lutzky.net/2010/03/13/my-music-player-has-sunk/</link><pubDate>Sat, 13 Mar 2010 00:00:00 +0000</pubDate><guid>https://lutzky.net/2010/03/13/my-music-player-has-sunk/</guid><description>My Meizu Mini M6 has died a tragic death as a result of being left in my shirt pocket, which in turn was - with the rest of my shirt - in the laundry. I&amp;rsquo;ve had it for three years, so this would be a good time to review.
My favorite thing about the Mini was the cost. When I bought it, it was far cheaper than comparable players, at ~400₪ for 8GB.</description><content:encoded><![CDATA[<p>My <a href="http://en.wikipedia.org/wiki/Meizu_M6_miniPlayer">Meizu Mini M6</a> has died a
tragic death as a result of being left in my shirt pocket, which in turn was -
with the rest of my shirt - in the laundry. I&rsquo;ve had it for three years, so
this would be a good time to review.</p>
<p>My favorite thing about the Mini was the cost. When I bought it, it was far
cheaper than comparable players, at ~400₪ for 8GB. For a player with good video
support, it was a steal. Other pros it had include:</p>
<ul>
<li>Great screen. I used to watch TV shows on it quite a bit</li>
<li>Great audio quality, especially in the lower range - very important for a
bass guitarist</li>
<li>Perfect OS compatibility - shows up as a Mass Storage device, just drag your
files over. This is also how firmware upgrades are performed</li>
<li>EBook reader, of sorts</li>
<li>Quite small and very thin</li>
</ul>
<p>However, the player is full of quirks:</p>
<ul>
<li>
<p>Slow startup time. This is compounded by the fact that to turn it on, you
have to press the &ldquo;Play&rdquo; button for about 3 seconds - too much less or too
much more, and it won&rsquo;t start up.</p>
<p>This is even worse when unplugging it from USB - it would rebuild the library
every time, even if you were just charging it.</p>
</li>
<li>
<p>You can&rsquo;t turn the player on when it&rsquo;s connected to USB. When it&rsquo;s off,
connecting it to USB is for charging only - to access the filesystem, you
have to disconnect it, turn it on, and connect it again. (&hellip;not that the
player is functional when in it&rsquo;s plugged in&hellip;)</p>
</li>
<li>
<p>A few podcast niceties would be very easy to implement and extremely helpful.
There&rsquo;s no way to separate podcasts from the rest of the music, so you don&rsquo;t
get &ldquo;This Week In Tech&rdquo; when you put it on &ldquo;All Music at random&rdquo; mode.  Also,
the player doesn&rsquo;t keep track of positions within audio streams, other than
the last played one.</p>
</li>
<li>
<p>There&rsquo;s no way to delete a song from within the player.</p>
</li>
<li>
<p>The interface is very inconsistent, with the video and audio sections having
completely different key bindings. Long presses and short presses have very
different meanings (but the length isn&rsquo;t all that different), so you have to
be very careful.</p>
</li>
<li>
<p>Pressing various key during startup had interesting, non-obvious effects,
such as rebuilding the music library or <strong>formatting the player without
asking for confirmation</strong>. This isn&rsquo;t in the official documentation, and even
if it were - that&rsquo;s a <strong>very</strong> bad misfeature.</p>
</li>
<li>
<p>The newer version of the player, which I have, did away with the bottom
&ldquo;play&rdquo; button, and moved it to the bottom of the 4-way D-pad, instead of the
&ldquo;Enter&rdquo; key. The &ldquo;Enter&rdquo; key was replaced with a tap on the d-pad.
Unfortunately, such a tap is very similar to a volume change drag, and even
if it weren&rsquo;t - is very easy to perform by accident.</p>
</li>
</ul>
<p>One more feature that I would have liked is one I&rsquo;ve only seen in the iPod
(which I despise for a variety of reasons) - the iPod keeps track of which
songs you&rsquo;ve played all the way through, and remembers that you &ldquo;like&rdquo; them -
this information is later used when building playlists, and is integrated into
iTunes playlists as well.</p>
<p>Now, I might be going to a long course soon, one which will specifically mean
plenty of bus time. So go ahead, guys - recommend a player. :)</p>
]]></content:encoded></item><item><title>Broken phone screen - data rescue</title><link>https://lutzky.net/2009/10/31/broken-phone-screen-data-rescue/</link><pubDate>Sat, 31 Oct 2009 00:00:00 +0000</pubDate><guid>https://lutzky.net/2009/10/31/broken-phone-screen-data-rescue/</guid><description>Last weekend I broke my Nokia 6120&amp;rsquo;s screen. I have a military phone, which is far cheaper, so I&amp;rsquo;ve decided to keep it offline. However, being the sentimental guy that I am, I did want to save all of my contacts and SMS messages (in addition to the photos, which presented less of a problem). This proved to be a bit of a challenge without the screen working.
Usually, when you connect the phone via USB, it asks if you want &amp;ldquo;PC Suite mode&amp;rdquo; or &amp;ldquo;Data Transfer mode&amp;rdquo;.</description><content:encoded><![CDATA[<p>Last weekend I broke my Nokia 6120&rsquo;s screen. I have a military phone, which is
far cheaper, so I&rsquo;ve decided to keep it offline. However, being the sentimental
guy that I am, I did want to save all of my contacts and SMS messages (in
addition to the photos, which presented less of a problem). This proved to be a
bit of a challenge without the screen working.</p>
<p>Usually, when you connect the phone via USB, it asks if you want &ldquo;PC Suite
mode&rdquo; or &ldquo;Data Transfer mode&rdquo;. The &ldquo;Data Transfer&rdquo; mode has the phone show up
as a standard USB storage device, which allows for easy transfer of MP3 files,
photos and videos to and from the phone, without any nokia-specific software.
However, it only works for the external SD card, so you can&rsquo;t use that to
access SMS messages or contacts.</p>
<p>I usually only need &ldquo;Data Transfer&rdquo; mode, so I changed the default to that.
Today I regret that decision, as it cost me a couple of hours' work. I called
the Orange hotline, and they did their best to help me, including trying to
blind-guide me through the menus, which failed because the menus are actually
dynamic and I didn&rsquo;t have the default setup. They actually got me 90% of the
way there - here&rsquo;s the solution I found: Hit the red (disconnect) button, and
type the Soft Reset GSM code: <code>*#7780#</code>. Now press the &ldquo;left menu&rdquo; key (not the
left key, nor the menu key - the left of the two &ldquo;dynamic&rdquo; keys) - this part
was what the Orange hotline missed, because it seemed so obvious. Then hit
12345 (this is the default &ldquo;secret code&rdquo;), and the left menu key again. I found
this by watching a demo of the soft reset on YouTube.</p>
<p>At this point I used VirtualBox and the Nokia PC suite (both are
free-as-in-beer) to do the heavy lifting. I now have a text file with all of my
contacts, a CSV file with all of my SMS messages, and all of my images saved
both to my computer and a DR site. Now I just need to upgrade my military phone
(Mirs)&hellip;</p>
]]></content:encoded></item><item><title>Loving the new Totem</title><link>https://lutzky.net/2009/10/10/loving-the-new-totem/</link><pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate><guid>https://lutzky.net/2009/10/10/loving-the-new-totem/</guid><description>Totem is Gnome&amp;rsquo;s built-in media player, and it really annoyed me in previous versions, and had me switching to VLC. However, the version included in the Ubuntu 9.10 release candidate has two features which are very important, in my opinion. The first feature is smooth graphical integration with compositing managers (such as compiz). In previous versions, as well as VLC, once you fullscreen the window, moving the mouse (which causes the cursor and the partial interface to appear) causes a very annoying flicker.</description><content:encoded><![CDATA[<p>Totem is Gnome&rsquo;s built-in media player, and it really annoyed me in previous
versions, and had me switching to VLC. However, the version included in the
Ubuntu 9.10 release candidate has two features which are very important, in my
opinion. The first feature is smooth graphical integration with compositing
managers (such as compiz). In previous versions, as well as VLC, once you
fullscreen the window, moving the mouse (which causes the cursor and the
partial interface to appear) causes a very annoying flicker. This has been
fixed (at least on my box, using an NVidia card).</p>
<p>The second, more important feature, is the exact one I&rsquo;ve been missing and
talked about in <a href="/2009/09/05/my-show-downloading-stack">the previous post</a> - hit Edit -&gt; Preferences -&gt; Start
playing files from last position, and Totem will keep track of your last
playback position when you close the video. Reading <a href="http://article.gmane.org/gmane.comp.gnome.svn/223873">the implementation
patch</a> shows that there
is a certain threshold for this - the position won&rsquo;t be saved if you&rsquo;re too
close to the beginning or end of the video. So there, my show downloading stack
now has every feature I&rsquo;d want from Miro, without the downsides I&rsquo;ve mentioned.</p>
]]></content:encoded></item><item><title>My show downloading stack</title><link>https://lutzky.net/2009/09/05/my-show-downloading-stack/</link><pubDate>Sat, 05 Sep 2009 00:00:00 +0000</pubDate><guid>https://lutzky.net/2009/09/05/my-show-downloading-stack/</guid><description>I love watching TV, and hate it. Regular show schedules are horrible, commercial breaks are annoying, and the ability to rewind is very important. I love Hot&amp;rsquo;s VOD service (and happily pay to watch the shows I enjoy), but my true favorite for getting my entertainment is everyone&amp;rsquo;s favorite not-a-dumptruck, the internet. In this post, I will describe how I do it.
Everything I describe in this post can be done using miro.</description><content:encoded><![CDATA[<p>I love watching TV, and hate it. Regular show schedules are horrible,
commercial breaks are annoying, and the ability to rewind is very important. I
love Hot&rsquo;s VOD service (and happily pay to watch the shows I enjoy), but my
true favorite for getting my entertainment is everyone&rsquo;s favorite
not-a-dumptruck, the internet. In this post, I will describe how I do it.</p>
<p>Everything I describe in this post can be done using
<a href="http://getmiro.com/">miro</a>. It&rsquo;s a neat piece of software, which lacked polish
in version 2.4 (2.5 is out now though), but there are a few things I don&rsquo;t like
about it:</p>
<ul>
<li>You have to be graphically logged in for it to run. Among other things, this
means that if someone reboots your computer, there&rsquo;s no way to get it to
start automatically. (I&rsquo;ll be very happy to know if I&rsquo;m wrong about this)</li>
<li>It doesn&rsquo;t give you as much control as I&rsquo;d like over torrents.</li>
<li>Its BitTorrent client doesn&rsquo;t perform as well as rtorrent.</li>
</ul>
<p>However, Miro does one thing which I haven&rsquo;t figured out how to do myself yet:
It keeps track of your position within watched shows. That is, stop watching a
show -and next time playback will resume from the same place.</p>
<p>The first thing you want to do is get a good RSS feed for your show.
Unfortunately, <a href="http://revision3.com/">Revision3</a>&rsquo;s shows (many of which are
quite good), are direct HTTP download links, as per the advertiser&rsquo;s request.
For other shows, you can find torrent RSS feeds, which make much better use of
everyone&rsquo;s bandwidth. Also, downloading will be handled by our trusty rtorrent,
which we can configure for bandwidth limiting.</p>
<p>To download RSS feeds, I use <a href="http://flexget.com/">flexget</a>. It does its job
well, but doesn&rsquo;t support bandwidth limiting. It accepts a simple YAML
configuration file, and has good logging. I run it as a cron job - its locking
mechanism prevents multiple instances from running simultaneously. For
non-torrents, I set the output directory to <code>~/torrents/inbox</code>. For torrents, I
set the output directory to <code>~/torrents/from_rss</code>.</p>
<p>For downloading torrents, I use <a href="http://libtorrent.rakshasa.no/">rtorrent</a>.
It&rsquo;s a curses-based client which performs very well. My <code>.rtorrent.rc</code> file looks
like this:</p>
<pre tabindex="0"><code>download_rate = 30
upload_rate = 2
directory = /home/ohad/torrents/in_progress
on_finished = move_complete,&quot;execute=mv,-u,$d.get_base_path=,~/torrents/inbox/ ;d.set_directory=~/torrents/inbox/&quot;
session = /home/ohad/torrents/.session
schedule = watch_directory,5,5,load_start=/home/ohad/torrents/from_rss/*.torrent
schedule = untied_directory,5,5,remove_untied=
schedule = throttle_1,23:00:00,24:00:00,download_rate=0
schedule = throttle_2,05:00:00,24:00:00,download_rate=30
port_range = 6881-6889
encryption = allow_incoming,enable_retry,prefer_plaintext
dht = auto
peer_exchange = yes
scgi_local = /tmp/rtorrent-scgi.socket
</code></pre><p>Interesting things to note here are:</p>
<ul>
<li>Downloads live in one directory, but get moved to the inbox directory when
they&rsquo;re done.</li>
<li>The session directory is important - this allows rtorrent to resume downloads
if it&rsquo;s shut down.</li>
<li>The <code>from_rss</code> directory is watched for new torrent files. When the relevant
downloads are stopped, <code>remove_untied</code> occurs and the torrent files are
deleted.</li>
<li>Throttling is fully customizable.</li>
<li>The SCGI socket is useful for <code>rtgui</code> - we&rsquo;ll get to that.</li>
</ul>
<p>I have a &ldquo;watchdog&rdquo;-style cron job which makes sure it&rsquo;s running if the
computer is up. This is not as elegant as starting it from an RC-script, but
keeps the whole setup confined to the limits of my own user. Again, rtorrent
has a lock-file which prevents multiple instances from running.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="c1"># A simple script to make sure I am running rtorrent in a screen</span>

<span class="nb">set</span> -e

<span class="nv">SCGI_SOCKET</span><span class="o">=</span>/tmp/rtorrent-scgi.socket
<span class="nv">SESSION_DIR</span><span class="o">=</span>~/torrents/.session

screen -d -m -fn -S rtorrent -s /bin/bash -t rtorrent -m nice rtorrent

<span class="k">while</span> <span class="o">[[</span> ! -S <span class="nv">$SCGI_SOCKET</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span> sleep 1<span class="p">;</span> <span class="k">done</span>

<span class="k">if</span> <span class="o">[[</span> -S <span class="nv">$SCGI_SOCKET</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    chgrp www-data <span class="nv">$SCGI_SOCKET</span>
    chmod g+rwx <span class="nv">$SCGI_SOCKET</span>
<span class="k">fi</span>
</code></pre></div><p><a href="http://code.google.com/p/rtgui/">RTGUI</a> provides a nice web-based interface.
It&rsquo;s a bit tricky to configure, and you&rsquo;ll need to use an HTTP server -
preferably lighttpd, as it has support for SCGI UNIX sockets (as opposed to
SCGI TCP sockets). This lets you keep the number of open network ports to a
minimum. This is all well-documented on the RTGUI site.</p>
<p>Finally, I&rsquo;ve written a little python script called
<a href="http://github.com/lutzky/check_shows">check_shows</a> which uses <code>libnotify</code> to
show a pretty pop-up whenever downloads complete. It&rsquo;s a tiny little hack which
uses inotify, which is lots of fun.</p>
<p>That&rsquo;s it. Any neat tricks are welcome :)</p>
]]></content:encoded></item><item><title>Timezones are fickle</title><link>https://lutzky.net/2009/04/18/timezones-are-fickle/</link><pubDate>Sat, 18 Apr 2009 00:00:00 +0000</pubDate><guid>https://lutzky.net/2009/04/18/timezones-are-fickle/</guid><description>Creating a manual &amp;ldquo;always-daylight-savings&amp;rdquo; timezone is hard. Let&amp;rsquo;s peek at just how messy timezone logic gets.</description><content:encoded><![CDATA[<p>I&rsquo;ve been trying to work out a system to be able to cleanly switch between IST
(Israel Standard Time, GMT+2:00) and IDT (Israel Daylight savings Time,
GMT+3:00) on command. The logical way to do this, in my opinion, is to have two
separate files in <code>/usr/share/zoneinfo</code>, say <code>IsraelIST</code> and
<code>IsraelIDT</code>, and copy (or link) the relevant one as
<code>/etc/localtime</code>. The trick is creating the <code>IsraelIDT</code> file.</p>
<p>My first guess was the following zic source-file:</p>
<pre tabindex="0"><code># Zone    NAME                GMTOFF  RULES/SAVE  FORMAT [UNTIL]
Zone      IsraelIDT           2:00    01:00       IDT
</code></pre><p>Now, this almost works. The problem is that both <code>is_dst</code> is set and
<code>timezone = -10800</code> (3 hours - should be 2, as it should represent local
standard time), so some software double-compensates here for a grand total of
GMT+4:00. After some research (walking through <code>__tzfile_read</code> gave the
biggest hint), it turns out that <code>timezone</code> is set according to the
minimal local time type which is <em>transitioned into</em>. So I came up with
this file:</p>
<pre tabindex="0"><code># Rule  NAME    FROM  TO    TYPE  IN   ON       AT    SAVE  LETTER/S
Rule    ZionIDT min   1939  -     Jan  1        00:00 1:00  D
Rule    ZionIDT 1939  only  -     Jan  1        00:00 0:00  S
Rule    ZionIDT 1940  max   -     Jan  1        00:00 1:00  D

# Zone    NAME                GMTOFF  RULES/SAVE  FORMAT  [UNTIL]
Zone      IsraelIDT           2:00    ZionIDT     I%sT
</code></pre><p>Sounds about right, nay? Even my handy little
<a href="http://github.com/lutzky/pyzdump">pyzdump</a> confirms that it looks about how I
want it to:</p>
<pre tabindex="0"><code class="language-console" data-lang="console">$ ./pyzdump.py /usr/share/zoneinfo/IsraelIDT
Transitions: ['At Sat Dec 31 23:00:00 1938, switch to IST',
'At Sun Dec 31 22:00:00 1939, switch to IDT']
Types: [&lt;tztype dst=&quot;True&quot; idt:=&quot;&quot; utc+10800=&quot;&quot;&gt;,
&lt;tztype dst=&quot;False&quot; ist:=&quot;&quot; utc+7200=&quot;&quot;&gt;]
</code></pre><p>However, it still doesn&rsquo;t work. A test program:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">tzset</span><span class="p">();</span>
    <span class="n">time_t</span> <span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Timezone name is %s, timezone=%ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
            <span class="n">__tzname</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">timezone</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;The time is %s&#34;</span><span class="p">,</span> <span class="n">ctime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t</span><span class="p">));</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Timezone name is %s, timezone=%ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
            <span class="n">__tzname</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">timezone</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>And its results, as run at 14:42:17 UTC, which is 19:42:17 IDT:</p>
<pre tabindex="0"><code>Timezone name is IDT, timezone=-7200
The time is Sat Apr 18 14:42:17 2009
Timezone name is UTC, timezone=0
</code></pre><p>Or, as I described it to a friend:</p>
<blockquote>
<p>Me: Hi computer, do you know what timezone are we in?</p>
<p>Computer: Yeah, it&rsquo;s Israel Daylight Savings time, GMT+2:00 for standard time.</p>
<p>Me: OK, and what time is it?</p>
<p>Computer: 14:42</p>
<p>Me: No, that&rsquo;s 3 hours late. What timezone are we in?</p>
<p>Computer: Umm&hellip; UTC?</p>
<p>Me: You just said IDT.</p>
<p>Computer: Nuh-uh.</p>
</blockquote>
<p>I&rsquo;ll get to the bottom of this eventually :/</p>
<p><strong>Addendum:</strong> It seems that the problem is even more complicated. For the
following timezone file, C programs seem to work fine:</p>
<pre tabindex="0"><code># Rule  NAME    FROM  TO    TYPE  IN   ON       AT    SAVE  LETTER/S
Rule    ZionIDT min   1939  -     Jan  1        00:00 1:00  D
Rule    ZionIDT 1939  only  -     Jan  1        00:00 0:00  S
Rule    ZionIDT 1940  2030  -     Jan  1        00:00 1:00  D
Rule    ZionIDT 2030  max   -     Jan  1        00:00 0:00  S
# Zone    NAME                GMTOFF  RULES/SAVE  FORMAT  [UNTIL]
Zone      IsraelIDT           2:00    ZionIDT     I%sT
</code></pre><p>However, Python programs still show <code>timezone = -10800</code>. Examining
Python&rsquo;s code, I found this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">if</span><span class="p">(</span> <span class="n">janzone</span> <span class="o">&lt;</span> <span class="n">julyzone</span> <span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* DST is reversed in the southern hemisphere */</span>
    <span class="n">PyModule_AddIntConstant</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;timezone&#34;</span><span class="p">,</span> <span class="n">julyzone</span><span class="p">);</span>
    <span class="n">PyModule_AddIntConstant</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;altzone&#34;</span><span class="p">,</span> <span class="n">janzone</span><span class="p">);</span>
    <span class="n">PyModule_AddIntConstant</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;daylight&#34;</span><span class="p">,</span>
        <span class="n">janzone</span> <span class="o">!=</span> <span class="n">julyzone</span><span class="p">);</span>
    <span class="n">PyModule_AddObject</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;tzname&#34;</span><span class="p">,</span>
        <span class="n">Py_BuildValue</span><span class="p">(</span><span class="s">&#34;(zz)&#34;</span><span class="p">,</span>
        <span class="n">julyname</span><span class="p">,</span> <span class="n">janname</span><span class="p">));</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">PyModule_AddIntConstant</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;timezone&#34;</span><span class="p">,</span> <span class="n">janzone</span><span class="p">);</span>
        <span class="n">PyModule_AddIntConstant</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;altzone&#34;</span><span class="p">,</span> <span class="n">julyzone</span><span class="p">);</span>
        <span class="n">PyModule_AddIntConstant</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;daylight&#34;</span><span class="p">,</span>
            <span class="n">janzone</span> <span class="o">!=</span> <span class="n">julyzone</span><span class="p">);</span>
        <span class="n">PyModule_AddObject</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#34;tzname&#34;</span><span class="p">,</span>
            <span class="n">Py_BuildValue</span><span class="p">(</span><span class="s">&#34;(zz)&#34;</span><span class="p">,</span>
            <span class="n">janname</span><span class="p">,</span> <span class="n">julyname</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div><p>And since June and July have the same timezone in our case, there&rsquo;s a good
chance that this is what&rsquo;s going wrong. The moral of the story seems to be
this - I should go with the first, simplest &ldquo;always-DST&rdquo; solution. Programs
should ignore the <code>timezone</code> variable, as in our context it isn&rsquo;t reliable. In
general, all internal time handling should be done in UTC; when reading times
from the outside world, if they are in local time - use <code>mktime</code>. If
they are in a specified timezone, use <code>timegm</code> and compensate manually.
I&rsquo;d love to hear better ideas in the comments.</p>
]]></content:encoded></item><item><title>Using git for code review</title><link>https://lutzky.net/2009/04/04/using-git-for-code-review/</link><pubDate>Sat, 04 Apr 2009 00:00:00 +0000</pubDate><guid>https://lutzky.net/2009/04/04/using-git-for-code-review/</guid><description>At my workplace, I&amp;rsquo;ve recently been using git for code review purposes. I work on code in my own git clone, and ask a peer to review it. It works somewhat like this:
master branch is same code as currently in upstream. Working to resolve issue #1234 pertaining to &amp;ldquo;Performance for gizmo&amp;rdquo;, I work on a branch 1234-gizmo-performance. I mail a peer, John, with this information, as well as my repository location.</description><content:encoded><![CDATA[<p>At my workplace, I&rsquo;ve recently been using git for code review purposes. I work
on code in my own git clone, and ask a peer to review it. It works somewhat
like this:</p>
<ol>
<li><code>master</code> branch is same code as currently in upstream.</li>
<li>Working to resolve issue #1234 pertaining to &ldquo;Performance for gizmo&rdquo;, I work
on a branch <code>1234-gizmo-performance</code>.</li>
<li>I mail a peer, John, with this information, as well as my repository
location.</li>
<li>John adds my repository as a remote, lutzky. Then he branches <code>review1</code> (or
<code>review2</code> if that is taken, and so on) at <code>lutzky/1234-gizmo-performance.</code></li>
<li>John adds comments with nice big <code>FIXME</code> tags, which are highlighted in
any decent editor. He commits this, the commit-message stating that it was
code review.</li>
<li>John tags his final review commit (or, if he had no comments -
<code>lutzky/1234-gizmo-performance</code>) with a <code>reviewed1</code> (or <code>reviewed2</code>, etc.)
annotated tag. Since the annotated tag includes all the necessary
information (who tagged, when, and what), the number doesn&rsquo;t really matter.</li>
<li>I merge <code>john/review1</code>, incorporate the changes (or reject them) and remove
the comments. If no further review is necessary, I submit this - and once
submitted, I merge this back into master.</li>
</ol>
<p>It&rsquo;s a nice system. I wonder what other methods there are of doing this.</p>
]]></content:encoded></item><item><title>Hardware doesn't like me</title><link>https://lutzky.net/2009/02/26/hardware-doesnt-like-me/</link><pubDate>Thu, 26 Feb 2009 00:00:00 +0000</pubDate><guid>https://lutzky.net/2009/02/26/hardware-doesnt-like-me/</guid><description>Whenever I try messing with hardware at home, inexplicable failures ensue. Especially when trying to help others; no good deed goes unpunished.</description><content:encoded><![CDATA[<p>I&rsquo;m a software kind of guy. Here&rsquo;s proof.</p>
<p>Today I went to visit my grandparents, and it turned out their computer
wouldn&rsquo;t boot. BIOS would load up fine, and I could browse the menus fine - but
once it tried to go on from there, it would simply blink what looked like half
a cursor (that is, half of a <code>_</code>-style cursor). I figured it might be the HDD -
so I took it home, and decided to connect it to my own box. Upon disconnecting
my DVD drive, I destroyed the SATA cord - it had an annoying little metal tab
which had to be pushed in before it would release, and it just wouldn&rsquo;t give,
and the connector just broke, exposing and bending the wires.</p>
<p>Checking if the computer still boots, the BIOS took much longer to display hard
drive status, and while Ubuntu would start booting, it would fail in the
process and tell me that my root hard drive (by UUID) isn&rsquo;t available. Looking
at dmesg, the ata2 module was indeed reporting that the hard drive was too
slow - but a few seconds later it would finally access the drive, and mount
properly. This problem, however, disappeared once I connected my grandparents'
drive! (Mounting it would fail, telling me that I either have a hardware error
or need to connect it to a Windows machine, which I don&rsquo;t have, and run some
diagnostic commands). Sure enough, when the HDD is connected by itself, it gets
quite flaky, but once I connect a second drive (back to the DVD, eventually),
everything works properly. This probably has to do with the fact that both
drives are connected on continuations of the same power cord - but I&rsquo;ve never
experienced such a problem, where you <em>must</em> connect devices to <em>both</em>
connectors on the power cord. A hardware guy I know says he&rsquo;s never heard of
such a problem either.</p>
<p>Naturally, these things never happen when I mess with hardware at work, where
there are plenty of spare parts&hellip;</p>
]]></content:encoded></item><item><title>Whatever happened to black &amp;amp; white LCDs?</title><link>https://lutzky.net/2008/11/22/whatever-happened-to-black-white-lcds/</link><pubDate>Sat, 22 Nov 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/11/22/whatever-happened-to-black-white-lcds/</guid><description>I had a Game Boy once. I could play it just about anywhere, and battery life - for the time - was great. I lost it at one point, and replaced it with a Game Gear, which sucked the life out of 6 AA batteries rather quickly. The Game Boy Color was actually decent on battery life, but since it didn&amp;rsquo;t have a backlight, you had to play it at very specific angles.</description><content:encoded><![CDATA[<p>I had a <a href="http://en.wikipedia.org/wiki/Game_boy">Game Boy</a> once. I could play it
just about anywhere, and battery life - for the time - was great. I lost it at
one point, and replaced it with a <a href="http://en.wikipedia.org/wiki/Game_gear">Game
Gear</a>, which sucked the life out of 6
AA batteries rather quickly. The <a href="http://en.wikipedia.org/wiki/Game_Boy_Color">Game Boy
Color</a> was actually decent on
battery life, but since it didn&rsquo;t have a backlight, you had to play it at very
specific angles.</p>
<p>For gaming, I can appreciate the need for a color screen. My point has to do
with cellphones. True, most cellphones today come with cameras, are able to
play video, and are rather capable mobile gaming platforms (when compared to
the Game Boy, that is). All this does, in fact, require a color screen.
However, I believe that there is a market for cellphones which do not support
these features, but do support neat things like 3G internet connectivity (GMail
and RSS on the phone is a major Win, in my opinion), and have a comfortable SMS
interface. These features actually suffer from having a color screen: Battery
life (for the powerful backlight), viewing angle, and screen resolution take a
hit. While it&rsquo;s true that color LCDs have come a long way since the Game Gear,
so have black &amp; white display technologies (E-Paper, anyone?).</p>
<p>Of course, my wish for a modern B&amp;W-screen cellphone will likely never come
true. The simple reason is that they would be totally unmarketable. Even
business-types like color screens nowadays. So I&rsquo;ll just keep holding out for a
folding E-Paper mobile browser.</p>
]]></content:encoded></item><item><title>Another SSH trick</title><link>https://lutzky.net/2008/11/10/another-ssh-trick/</link><pubDate>Mon, 10 Nov 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/11/10/another-ssh-trick/</guid><description>Ever have a machine you can only ssh into through another machine? It&amp;rsquo;s a very common situation in the Technion. Here&amp;rsquo;s one way to get around it: Assume you can directly ssh into alpha, and from alpha you can ssh into beta. Have the following code in your ~/.ssh/config:
Host beta Hostname 1.2.3.4 # IP Address of beta ProxyCommand ssh alpha nc -w 1 %h %p This requires you to have nc (netcat) installed on alpha.</description><content:encoded><![CDATA[<p>Ever have a machine you can only ssh into through another machine? It&rsquo;s a very
common situation in the Technion. Here&rsquo;s one way to get around it: Assume you
can directly ssh into <code>alpha</code>, and from <code>alpha</code> you can ssh into <code>beta</code>. Have
the following code in your <code>~/.ssh/config</code>:</p>
<pre tabindex="0"><code>Host beta
        Hostname 1.2.3.4  # IP Address of beta
        ProxyCommand ssh alpha nc -w 1 %h %p
</code></pre><p>This requires you to have <code>nc</code> (netcat) installed on <code>alpha</code>. Once you do that,
you can run <code>ssh beta</code> directly from your own box.</p>
]]></content:encoded></item><item><title>Automatically starting rtorrent within screen</title><link>https://lutzky.net/2008/11/04/automatically-starting-rtorrent-within-screen/</link><pubDate>Tue, 04 Nov 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/11/04/automatically-starting-rtorrent-within-screen/</guid><description>These days I don&amp;rsquo;t stay at home often, but I do have an RSS/BitTorrent combo fetching me all kinds of neat stuff for me, so I can have it ready for me on the weekend. I love rtorrent, especially due to the fact that I can run it in screen, ssh home and see how things are doing (or add more torrent to the download). However, sometimes my net connection breaks down, computers gets shut off, or things like that.</description><content:encoded><![CDATA[<p>These days I don&rsquo;t stay at home often, but I do have an RSS/BitTorrent combo
fetching me all kinds of neat stuff for me, so I can have it ready for me on
the weekend. I love <a href="http://libtorrent.rakshasa.no/">rtorrent</a>, especially due
to the fact that I can run it in <code>screen</code>, ssh home and see how things are
doing (or add more torrent to the download). However, sometimes my net
connection breaks down, computers gets shut off, or things like that. This week
my router broke down, so I can&rsquo;t even ssh home to manually start up rtorrent.
My solution: A small script, which checks whether rtorrent is already running,
and if not - runs it in a detached screen session. Run this with your favorite
<code>cron</code> software.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="c1"># A simple script to make sure I am running rtorrent in a screen</span>

<span class="k">if</span> ! ps -o uname -C rtorrent <span class="p">|</span> grep -q <span class="sb">`</span>whoami<span class="sb">`</span><span class="p">;</span> <span class="k">then</span>
	screen -d -m rtorrent
<span class="k">fi</span>
</code></pre></div>]]></content:encoded></item><item><title>Quick time tracking hack</title><link>https://lutzky.net/2008/10/26/quick-time-tracking-hack/</link><pubDate>Sun, 26 Oct 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/10/26/quick-time-tracking-hack/</guid><description>Gnome 2.24 adds a new Time Tracking feature, which I would have found useful. I don&amp;rsquo;t have Gnome 2.24 at work, but I do have a Unix-based operating system&amp;hellip; Here&amp;rsquo;s my new ~/bin/track:
#!/bin/bash date &amp;gt;&amp;gt; ~/time_tracking vim ~/time_tracking + Now, if I could only get vim to automatically hit &amp;ldquo;A&amp;rdquo; and space for me afterwards&amp;hellip; (I&amp;rsquo;m betting there&amp;rsquo;s a way to do it, but AFAIK vim can only receive ex-mode commands as parameters).</description><content:encoded><![CDATA[<p>Gnome 2.24 adds a new Time Tracking feature, which I would have found useful. I
don&rsquo;t have Gnome 2.24 at work, but I do have a Unix-based operating system&hellip;
Here&rsquo;s my new <code>~/bin/track</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>date &gt;&gt; ~/time_tracking
vim ~/time_tracking +
</code></pre></div><p>Now, if I could only get vim to automatically hit &ldquo;A&rdquo; and space for me
afterwards&hellip; (I&rsquo;m betting there&rsquo;s a way to do it, but AFAIK vim can only
receive ex-mode commands as parameters).</p>
<p><strong>Edit:</strong> &hellip;and, of course it&rsquo;s possible. Here&rsquo;s the new version:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="nb">echo</span> <span class="s2">&#34;`date` &#34;</span> &gt;&gt; ~/time_tracking
vim ~/time_tracking + -c <span class="s1">&#39;startinsert!&#39;</span>
</code></pre></div>]]></content:encoded></item><item><title>Delegating methods in Ruby</title><link>https://lutzky.net/2008/10/18/delegating-methods-in-ruby/</link><pubDate>Sat, 18 Oct 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/10/18/delegating-methods-in-ruby/</guid><description>Sometimes, when constructing a compound object, we are interested in exporting functionality while retaining encapsulation. For example, suppose we have a Secretary class:
class Secretary def send_fax(destination, fax_contents) puts &amp;#39;Sending fax &amp;#34;%s&amp;#34; to %s&amp;#39; % [fax_contents, destination] end def answer_call(call) # ... end # ... end Our Secretary provides a lot of useful functionality, that our Boss class would like to have. Boss would like to be able to say that he can send a fax, without having the user explicitly request his Secretary beforehand.</description><content:encoded><![CDATA[<p>Sometimes, when constructing a compound object, we are interested in exporting
functionality while retaining encapsulation. For example, suppose we have a
<code>Secretary</code> class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Secretary</span>
  <span class="k">def</span> <span class="nf">send_fax</span><span class="p">(</span><span class="n">destination</span><span class="p">,</span> <span class="n">fax_contents</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s1">&#39;Sending fax &#34;%s&#34; to %s&#39;</span> <span class="o">%</span> <span class="o">[</span><span class="n">fax_contents</span><span class="p">,</span> <span class="n">destination</span><span class="o">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">answer_call</span><span class="p">(</span><span class="n">call</span><span class="p">)</span>
    <span class="c1"># ...</span>
  <span class="k">end</span>

  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div><p>Our <code>Secretary</code> provides a lot of useful functionality, that our <code>Boss</code> class
would like to have. <code>Boss</code> would like to be able to say that he can send a fax,
without having the user explicitly request his <code>Secretary</code> beforehand. The same
goes for a lot of other methods <code>Secretary</code> provides. Instead of writing a stub
function for each of these methods, it would be nice to do the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Boss</span>
  <span class="n">delegate_method</span> <span class="ss">:my_secretary</span><span class="p">,</span> <span class="ss">:send_fax</span><span class="p">,</span> <span class="ss">:answer_call</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@my_secretary</span> <span class="o">=</span> <span class="no">Secretary</span><span class="o">.</span><span class="n">new</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">john</span> <span class="o">=</span> <span class="no">Boss</span><span class="o">.</span><span class="n">new</span>
<span class="n">john</span><span class="o">.</span><span class="n">send_fax</span><span class="p">(</span><span class="s2">&#34;Donald Trump&#34;</span><span class="p">,</span> <span class="s2">&#34;YOU&#39;RE fired&#34;</span><span class="p">)</span>
</code></pre></div><p>Here&rsquo;s how we can get this to happen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Class</span>
  <span class="k">def</span> <span class="nf">delegate_method</span><span class="p">(</span><span class="n">instance_var_name</span><span class="p">,</span> <span class="o">*</span><span class="n">method_names</span><span class="p">)</span>
    <span class="n">method_names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_name</span><span class="o">|</span>
      <span class="n">define_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
        <span class="n">instance_var</span> <span class="o">=</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&#34;@%s&#34;</span> <span class="o">%</span> <span class="n">instance_var_name</span><span class="p">)</span>
        <span class="n">instance_var</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><p>This solution does have its drawbacks - it will not work for methods which are
meant to accept blocks. I&rsquo;m not sure how to get that to happen, short of using
a string-based <code>class_eval</code>, which I&rsquo;m not very fond of. (I find <code>eval</code> to be,
well, evil&hellip;)</p>
]]></content:encoded></item><item><title>Tracking TTime</title><link>https://lutzky.net/2008/07/30/tracking-ttime/</link><pubDate>Wed, 30 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/30/tracking-ttime/</guid><description>Ditz was lost in the mists of time, and I guess if ttime were maintained, issues would be tracked using Github.
I&amp;rsquo;ve added issue tracking for ttime using the fantastic ditz. I&amp;rsquo;ve also added ttime&amp;rsquo;s rdoc documentation. (Note: Version 0.8.5 is out)</description><content:encoded><![CDATA[<blockquote>
<p>Ditz was lost in the mists of time, and I guess if ttime were maintained,
issues would be tracked using Github.</p>
</blockquote>
<p>I&rsquo;ve added <a href="http://lutzky.net/ttime/ditz">issue tracking for ttime</a> using the
fantastic <a href="http://ditz.rubyforge.org">ditz</a>. I&rsquo;ve also added <a href="http://lutzky.net/ttime/doc">ttime&rsquo;s rdoc
documentation</a>. (Note: Version 0.8.5 is out)</p>
]]></content:encoded></item><item><title>Three things I didn't know Ruby does</title><link>https://lutzky.net/2008/07/25/three-things-i-didnt-know-ruby-does/</link><pubDate>Fri, 25 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/25/three-things-i-didnt-know-ruby-does/</guid><description>Edit: I was misled!
Illustrated here. Hints below.
&amp;gt;&amp;gt; def inspect_x_and_y(x,y); puts &amp;quot;x: %p, y: %p&amp;quot; % [x, y]; end =&amp;gt; nil &amp;gt;&amp;gt; inspect_x_and_y(y={&amp;quot;hello&amp;quot; =&amp;gt; &amp;quot;world&amp;quot;},x=[1,2,3]) x: {&amp;quot;hello&amp;quot;=&amp;gt;&amp;quot;world&amp;quot;}, y: [1, 2, 3] The bits I didn&amp;rsquo;t know about:
&amp;quot;Format strings using a %% sign, %s, %s!&amp;quot; % [ &amp;quot;just like in python&amp;quot;, &amp;quot;but with arrays&amp;quot; ] The %p formatting character is the same as inspect. You can call methods with method_name(param2=val2, param1=val1), also like in python.</description><content:encoded><![CDATA[<p><strong>Edit: I was misled!</strong></p>
<p>Illustrated here. Hints below.</p>
<pre tabindex="0"><code class="language-irb" data-lang="irb">&gt;&gt; def inspect_x_and_y(x,y); puts &quot;x: %p, y: %p&quot; % [x, y]; end
=&gt; nil
&gt;&gt; inspect_x_and_y(y={&quot;hello&quot; =&gt; &quot;world&quot;},x=[1,2,3])
x: {&quot;hello&quot;=&gt;&quot;world&quot;}, y: [1, 2, 3]
</code></pre><p>The bits I didn&rsquo;t know about:</p>
<ol>
<li><code>&quot;Format strings using a %% sign, %s, %s!&quot; % [ &quot;just like in python&quot;, &quot;but with arrays&quot; ]</code></li>
<li>The <code>%p</code> formatting character is the same as <code>inspect</code>.</li>
<li>You can call methods with <code>method_name(param2=val2, param1=val1)</code>, also like
in python. <strong>No you can&rsquo;t! This code sets external variables called y and
x.</strong></li>
</ol>
<p>How embarassing&hellip; :(</p>
]]></content:encoded></item><item><title>Security project</title><link>https://lutzky.net/2008/07/23/security-project/</link><pubDate>Wed, 23 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/23/security-project/</guid><description>This site gets indexed by the almighty google. This link is part of a security project I&amp;rsquo;m doing for my CS degree.
The was part of project BadSense. See the BadSense report</description><content:encoded><![CDATA[<p>This site gets indexed by the almighty google. <a href="http://lebmtg.hyperphp.com">This
link</a> is part of a security project I&rsquo;m doing for
my CS degree.</p>
<blockquote>
<p>The was part of project BadSense. See the <a href="http://webcourse.cs.technion.ac.il/236349/Winter2012-2013/ho/WCFiles/2007-2-google_hacking_report.pdf">BadSense report</a></p>
</blockquote>
]]></content:encoded></item><item><title>Gettext oddities with Ruby</title><link>https://lutzky.net/2008/07/20/gettext-oddities-with-ruby/</link><pubDate>Sun, 20 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/20/gettext-oddities-with-ruby/</guid><description>I was having a lot of trouble with gettext in Ruby, mostly due to lacking documentation. Here are some useful things I figured out while writing TTime. I ended up having a single gettext_settings.rb, included from every file which uses gettext. Here it is (with some extra notes)
#!/usr/bin/ruby begin require &amp;#39;gettext&amp;#39; require &amp;#39;pathname&amp;#39; include GetText # This fixes a swarm of problems on Windows GetText.locale.charset = &amp;#34;UTF-8&amp;#34; # Ruby&amp;#39;s gettext acts in a sane # method - add a path to the set of paths # scanned.</description><content:encoded><![CDATA[<p>I was having a lot of trouble with
<a href="http://en.wikipedia.org/wiki/Gettext">gettext</a> in Ruby, mostly due to lacking
documentation. Here are some useful things I figured out while writing TTime. I
ended up having a single <code>gettext_settings.rb</code>, included from every file which
uses gettext. Here it is (with some extra notes)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="ch">#!/usr/bin/ruby</span>
<span class="k">begin</span>
  <span class="nb">require</span> <span class="s1">&#39;gettext&#39;</span>
  <span class="nb">require</span> <span class="s1">&#39;pathname&#39;</span>

  <span class="kp">include</span> <span class="no">GetText</span>

  <span class="c1"># This fixes a swarm of problems on Windows</span>
  <span class="no">GetText</span><span class="o">.</span><span class="n">locale</span><span class="o">.</span><span class="n">charset</span> <span class="o">=</span> <span class="s2">&#34;UTF-8&#34;</span>

  <span class="c1"># Ruby&#39;s gettext acts in a sane</span>
  <span class="c1"># method - add a path to the set of paths</span>
  <span class="c1"># scanned.</span>
  <span class="n">locale_in_data_path</span> <span class="o">=</span> <span class="no">Pathname</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vg">$0</span><span class="p">)</span><span class="o">.</span><span class="n">dirname</span> <span class="o">+</span> <span class="p">\</span>
    <span class="s2">&#34;../data/locale/%{locale}/LC_MESSAGES/%{name}.mo&#34;</span>
  <span class="n">add_default_locale_path</span><span class="p">(</span><span class="n">locale_in_data_path</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
  <span class="n">bound_text_domain</span> <span class="o">=</span> <span class="n">bindtextdomain</span><span class="p">(</span><span class="s2">&#34;ttime&#34;</span><span class="p">)</span>

  <span class="c1"># For Glade, however, it only seems to</span>
  <span class="c1"># be possible to specify one path at a</span>
  <span class="c1"># time. Fortunately, gettext already</span>
  <span class="c1"># found it for us.</span>
  <span class="n">my_current_mo</span> <span class="o">=</span> <span class="n">bound_text_domain</span><span class="o">.</span><span class="n">entries</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">current_mo</span>
  <span class="k">if</span> <span class="n">my_current_mo</span>
    <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;GETTEXT_PATH&#34;</span><span class="o">]</span> <span class="o">=</span> <span class="n">my_current_mo</span><span class="o">.</span><span class="n">filename</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span>
      <span class="sr">/locale\/[^\/]+\/LC_MESSAGES.*/</span><span class="p">,</span>
      <span class="s2">&#34;locale/&#34;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">rescue</span> <span class="no">LoadError</span>
  <span class="k">def</span> <span class="nf">_</span> <span class="n">s</span> <span class="c1">#:nodoc:</span>
    <span class="c1"># No gettext? No problem.</span>
    <span class="n">s</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><p>One note for context: I use
<a href="http://i.loveruby.net/en/projects/setup/">setup.rb</a> (and <code>ruby-pkg-tools</code>) to
package TTime. So my localizations go in <code>data/locale</code>.</p>
]]></content:encoded></item><item><title>Been working on TTime</title><link>https://lutzky.net/2008/07/11/been-working-on-ttime/</link><pubDate>Fri, 11 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/11/been-working-on-ttime/</guid><description>I&amp;rsquo;ve found myself working on TTime, the Technion Timetable Scheduler, quite a bit lately. Lots of cool stuff went in:
Boaz Goldstein&amp;rsquo;s TCal, a Cairo-based schedule renderer (could you believe the old version used MozEmbed?) Sports courses are now correctly parsed Ability to select specific lectures and groups for the automated scheduler A manual scheduler - given an existing schedule, you can ask to show all alternatives at once, and hand-pick them.</description><content:encoded><![CDATA[<p>I&rsquo;ve found myself working on TTime, the Technion Timetable Scheduler, quite a
bit lately. Lots of cool stuff went in:</p>
<ul>
<li>Boaz Goldstein&rsquo;s TCal, a Cairo-based schedule renderer (could you believe the
old version used MozEmbed?)</li>
<li>Sports courses are now correctly parsed</li>
<li>Ability to select specific lectures and groups for the automated scheduler</li>
<li>A manual scheduler - given an existing schedule, you can ask to show all
alternatives at once, and hand-pick them. Some people
(<a href="http://iiafw.com">Tom</a>, for example) prefer this.</li>
<li>Just for kicks - interoperability with <a href="http://udonkey.com">Grandpa</a>&rsquo;s XML
format</li>
</ul>
<p>I&rsquo;ve also cleaned up the packaging quite a bit - it can now be installed using
<code>setup.rb</code>, or the updated Debian package. I think it may soon be time to tag a
release :)</p>
<p><a href="http://github.com/lutzky/ttime">Sources at Github</a></p>
]]></content:encoded></item><item><title>That "Life" category there</title><link>https://lutzky.net/2008/07/11/that-life-category-there/</link><pubDate>Fri, 11 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/11/that-life-category-there/</guid><description>I has it. Sorta.
A few weeks ago, the lovely NaNuchKa visited Israel for two and a half shows (the half-show was warming for Berry Sacharof). &amp;ldquo;Three shows in two weeks?&amp;rdquo;, people ask - well, yeah. They only come once a year. Their set is already too long to play all the songs I like, and that&amp;rsquo;s actually quite excellent - new EP and all. Great stuff :) Deep Purple should be coming to Israel this summer (holy crap!</description><content:encoded><![CDATA[<p>I has it. Sorta.</p>
<p>A few weeks ago, the lovely <a href="http://nanuchka.com">NaNuchKa</a> visited Israel for
two and a half shows (the half-show was warming for Berry Sacharof). &ldquo;Three
shows in two weeks?&rdquo;, people ask - well, yeah. They only come once a year.
Their set is already too long to play <a href="http://youtube.com/watch?v=tn4RITTXkjw">all the songs I
like</a>, and that&rsquo;s actually quite
excellent - new EP and all. Great stuff :) Deep Purple should be coming to
Israel this summer (holy crap!), and I need to see what I can do about getting
tickets for that.</p>
<p>This is my last semester at the Technion - then it&rsquo;s off to the military for
me. Courses for this semester are Electronic Switching Circuits (bleh&hellip;),
Signals and Systems (which is actually turning out to be quite awesome!), and
the neat Compilation Theory. After having thoroughly enjoyed <a href="http://www.cs.technion.ac.il/~biham/">Eli
Biham</a>&rsquo;s excellent Modern Cryptology last
semester, I&rsquo;m visiting (but not taking) his advanced topics course this
semester. I also have two projects: One in computer security, where we mess
with Google, and another in EE, where we try using transactional memory in
order to optimize Apache.</p>
<p>And finally - next week on Thursday, Shlomi Shaban is doing a piano show in
Haifa, just like the good old days. He was supposed to join NaNuchKa for one of
their shows, but had to cancel, so my lovely lady (who introduced me to his
work in the first place) and I haven&rsquo;t been to his shows in quite a while. It
seems that will be able to use the new <a href="http://www.egged.co.il/main.asp?lngCategoryID=6109">200
line</a> - part of a long
overdue project to have cheap public transportation available all night long.</p>
]]></content:encoded></item><item><title>Tunelling even more stuff over SSH</title><link>https://lutzky.net/2008/06/17/tunelling-even-more-stuff-over-ssh/</link><pubDate>Tue, 17 Jun 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/06/17/tunelling-even-more-stuff-over-ssh/</guid><description>Today at the CS department of the Technion is a particularily Bad Network Day (TM) for laptop users; none of the wired connections at the farm work, and wireless doesn&amp;rsquo;t seem to working for HTTP at all.
It does, however, work for SSH. Ka-ching! :)
Tunneling your browser over SSH is a pretty simple affair - SSH into somewhere which has a decent connection, and use the -D9999 flag (9999 works, but it can be any 16-bit number over 1024).</description><content:encoded><![CDATA[<p>Today at the CS department of the Technion is a particularily Bad Network Day
(TM) for laptop users; none of the wired connections at the farm work, and
wireless doesn&rsquo;t seem to working for HTTP at all.</p>
<p>It does, however, work for SSH. Ka-ching! :)</p>
<p>Tunneling your browser over SSH is a pretty simple affair - SSH into somewhere
which has a decent connection, and use the -D9999 flag (9999 works, but it can
be any 16-bit number over 1024). Then, configure your browser to work over a
SOCKS proxy at 127.0.0.1:9999.</p>
<p>How do you, however, get other things to work over that tunnel? There&rsquo;s an
excellent program called dante-client (that&rsquo;s an apt package, folks. if you
can&rsquo;t apt-get due to your network situation, get it at packages.ubuntu.com or
packages.debian.org). Install it, and make sure <code>/etc/dante.conf</code> has the
following lines:</p>
<pre tabindex="0"><code>route {
    from: 0.0.0.0/0   to: 0.0.0.0/0   via: 127.0.0.1 port = 9999
    protocol: tcp
    proxyprotocol: socks_v4 socks_v5
}
</code></pre><p>Then, run <code>socksify whatever-you-want-to-do</code>. For example, <code>sudo socksify apt-get install something</code>. Or perhaps <code>socksify ssh somewhere</code>. Or <code>sudo wget something</code>. Or <code>socksify git do-something-awesome</code>. (All of the above work for
me)</p>
]]></content:encoded></item><item><title>Valgrind Fail</title><link>https://lutzky.net/2008/06/11/valgrind-fail/</link><pubDate>Wed, 11 Jun 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/06/11/valgrind-fail/</guid><description>I neglected to post this here somehow, it&amp;rsquo;s about a month old by now&amp;hellip;
Screenshot lost in the mist of time&amp;hellip; shows a program segfaulting, and then working properly when run within valgrind.
The problem turned out to be an imprecise (false-positve) comparison operator implemented for a class used as a hash key. God, I hate C++.</description><content:encoded><![CDATA[<p>I neglected to post this here somehow, it&rsquo;s about a month old by now&hellip;</p>
<blockquote>
<p>Screenshot lost in the mist of time&hellip; shows a program segfaulting, and then working properly when run within valgrind.</p>
</blockquote>
<p>The problem turned out to be an imprecise (false-positve) comparison operator
implemented for a class used as a hash key. God, I hate C++.</p>
]]></content:encoded></item><item><title>Scheduling</title><link>https://lutzky.net/2008/06/02/scheduling/</link><pubDate>Mon, 02 Jun 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/06/02/scheduling/</guid><description>So, I see I forgot to post my schedule for this semester&amp;hellip;
&amp;hellip;ttime screenshot lost in the mists of time&amp;hellip;
As you can see, it&amp;rsquo;s TTime! With a shiny new Cairo interface. We&amp;rsquo;re back to the Ruby version, too - as we have another coder on board, which is using his compilation skills in order to write a new REPY parser.
You can also see it&amp;rsquo;s only found one schedule.</description><content:encoded><![CDATA[<p>So, I see I forgot to post my schedule for this semester&hellip;</p>
<blockquote>
<p><em>&hellip;ttime screenshot lost in the mists of time&hellip;</em></p>
</blockquote>
<p>As you can see, it&rsquo;s TTime! With a shiny new Cairo interface. We&rsquo;re back to the
Ruby version, too - as we have another coder on board, which is using his
compilation skills in order to write a new REPY parser.</p>
<p>You can also see it&rsquo;s only found one schedule. This is thanks to the <a href="https://github.com/lutzky/ttime/blob/master/lib/ttime/constraints/group_constraints.rb">group
selection constraint</a> which was finally coded. Yes, that&rsquo;s a link to
the <a href="http://github.com/lutzky/ttime">Github repository for TTime</a>. You&rsquo;re
welcome to help write some constraints :)</p>
]]></content:encoded></item><item><title>Deskbar and Firefox 3</title><link>https://lutzky.net/2008/04/28/deskbar-and-firefox-3/</link><pubDate>Mon, 28 Apr 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/04/28/deskbar-and-firefox-3/</guid><description>Deskbar has a really neat plugin which allows you to search your browsing history and bookmarks. Firefox 3 has switched the storage format to an sqlite-based one. I&amp;rsquo;ve been working on a new plugin to make use of that - so far it&amp;rsquo;s very enjoyable to use :)
» Deskbar_FF3</description><content:encoded><![CDATA[<p><a href="raphael.slinckx.net/deskbar/">Deskbar</a> has a really neat plugin which allows
you to search your browsing history and bookmarks. Firefox 3 has switched the
storage format to an sqlite-based one. I&rsquo;ve been working on a new plugin to
make use of that - so far it&rsquo;s very enjoyable to use :)</p>
<p>» <a href="http://github.com/lutzky/deskbar_ff3">Deskbar_FF3</a></p>
]]></content:encoded></item><item><title>Things I learned today</title><link>https://lutzky.net/2008/04/28/things-i-learned-today/</link><pubDate>Mon, 28 Apr 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/04/28/things-i-learned-today/</guid><description>You can use git on a VFAT disk (for example, a USB key) without all of the annoying mode issues, by using the following setting in .git/config:
[core] filemode = false What I haven&amp;rsquo;t figured out is how to do force a chmod in this situation; for example, if I create a new script, I was hoping to be able to git chmod +x it.
Cream is a very good editor if you&amp;rsquo;re used to Windows applications.</description><content:encoded><![CDATA[<ol>
<li>
<p>You can use git on a VFAT disk (for example, a USB key) without all of the
annoying mode issues, by using the following setting in <code>.git/config</code>:</p>
<pre tabindex="0"><code>[core]
filemode = false
</code></pre><p>What I haven&rsquo;t figured out is how to do force a chmod in this situation; for
example, if I create a new script, I was hoping to be able to <code>git chmod +x</code>
it.</p>
</li>
<li>
<p><a href="http://cream.sourceforge.net">Cream</a> is a very good editor if you&rsquo;re used
to Windows applications. It&rsquo;s a set of plugins for VIM which make it
modeless and (very) familiar to Windows users. However, Ctrl-O still has its
usual job for us ordinary junkies :)</p>
</li>
<li>
<p>Vertically, two cans of Pepsi fit very snugly into a Pringles can.</p>
</li>
</ol>
]]></content:encoded></item><item><title>Hebrew spell-checking in Pidgin</title><link>https://lutzky.net/2008/04/22/hebrew-spell-checking-in-pidgin/</link><pubDate>Tue, 22 Apr 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/04/22/hebrew-spell-checking-in-pidgin/</guid><description>This one took me a while to figure out, which is reason enough to post it here.
First of all, you&amp;rsquo;ll need aspell-he, as pidgin uses gtkspell (which, in turn, uses aspell) rather than enchant (which supports hspell). There is a patch for gtkspell which gets it to use enchant, but I don&amp;rsquo;t know of a simple way to get it to work in my distribution of choice, Ubuntu.
Now you need a neat little plugin from the Guifications plugin pack, called SwitchSpell.</description><content:encoded><![CDATA[<p>This one took me a while to figure out, which is reason enough to post it here.</p>
<p>First of all, you&rsquo;ll need <code>aspell-he</code>, as pidgin uses <code>gtkspell</code> (which, in
turn, uses <code>aspell</code>) rather than <code>enchant</code> (which supports <code>hspell</code>). There is
a patch for <code>gtkspell</code> which gets it to use <code>enchant</code>, but I don&rsquo;t know of a
simple way to get it to work in my distribution of choice, Ubuntu.</p>
<p>Now you need a neat little plugin from the
<a href="http://plugins.guifications.org/">Guifications</a> plugin pack, called
SwitchSpell. Unfortunately, it&rsquo;s in version 2.3.0 of the pack, whereas the
current Ubuntu version is 2.0.0. It&rsquo;s not complicated to install this from
source though: I&rsquo;ve detailed the precise installation procedure below; the
confusing thing is that if you forget to install <code>libgtkspell-dev</code> or
<code>libaspell-dev</code>, SwitchSpell will not be built, but the <code>configure</code> script
tells you that it <em>will</em>.</p>
<pre tabindex="0"><code>sudo apt-get install build-essential gettext libgtkspell-dev libaspell-dev pidgin-dev
wget http://downloads.guifications.org/plugins//Plugin%20Pack/purple-plugin_pack-2.3.0.tar.bz2
tar jxvf purple-plugin_pack-2.3.0.tar.bz2
cd purple-plugin_pack-2.3.0
./configure --with-plugins=switchspell
make
sudo make install
</code></pre><p>At this point, the Switch Spell plugin should show up in your Pidgin
preferences. When you activate it, you should get a menu at the top of each
conversation for choosing the dictionary in use. Enjoy!</p>
]]></content:encoded></item><item><title>Faster Languages</title><link>https://lutzky.net/2008/04/16/faster-languages/</link><pubDate>Wed, 16 Apr 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/04/16/faster-languages/</guid><description>Due to an exercise in an AI course, I&amp;rsquo;m forced to confront an old nemesis - C++. Part of the reason is that the exercise contains a time-limited tournament, and the code needs to run very quickly. Another reason is, I guess, the fact that C++ serves as a sort of lowest common denominator in the course (which used, by the way, to be taught in LISP, along with the language).</description><content:encoded><![CDATA[<p>Due to an exercise in an AI course, I&rsquo;m forced to confront an old nemesis -
C++. Part of the reason is that the exercise contains a time-limited
tournament, and the code needs to run very quickly. Another reason is, I guess,
the fact that C++ serves as a sort of lowest common denominator in the course
(which used, by the way, to be taught in LISP, along with the language).</p>
<p>I never liked C++ language much. As a matter of fact, I prefer C. I&rsquo;ve been
going over some old code for a project, which needed to use DBus to talk to
NetworkManager. <a href="/2007/09/16/exception-handling-decorators-and-python/">Back then</a> I wrote it using Python, embedded in C - it
seemed easier at the time, due to lack of documentation. After hunting around,
I figured out how to do most of the stuff I wanted in C, using DBus&rsquo;s GLib API.</p>
<p>In this process, the most helpful bit of documentation turned out to be GLib&rsquo;s.
GLib looks like a wonderful library to get big-program stuff done relatively
nicely in C, without mucking about in C++. Exception handling (of sorts),
object-oriented programming (of sorts) as well as garbage collection (of sorts)
are implemented in a usable way, and extremely well-documented.</p>
<p>At the end of the day, I was able to turn this Python gem:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">dbus</span>

<span class="k">def</span> <span class="nf">_nm_device_interface</span><span class="p">(</span><span class="n">dev_object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Returns an interface to the device object dev_object&#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="n">dbus</span><span class="o">.</span><span class="n">Interface</span><span class="p">(</span><span class="n">dev_object</span><span class="p">,</span> <span class="n">NM_DEVICE_IFACE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_nm_get_object</span><span class="p">(</span><span class="n">object_path</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Returns an object with the given object path using the NM service&#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="n">dbus</span><span class="o">.</span><span class="n">SystemBus</span><span class="p">()</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">NM_SERVICE</span><span class="p">,</span> <span class="n">object_path</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_nm</span><span class="p">():</span> <span class="k">return</span> <span class="n">_nm_get_object</span><span class="p">(</span><span class="n">NM_OBJECT_PATH</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_nm_dbus_exception</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">guessed_exception</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Checks if the DBus exception e is (exactly) of type guessed_exception&#34;&#34;&#34;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">get_dbus_name</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="n">guessed_exception</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="c1"># If it doesn&#39;t have a get_dbus_name, it probably isn&#39;t the DBus</span>
        <span class="c1"># exception we&#39;re looking for.</span>
        <span class="k">return</span> <span class="kc">False</span>

<span class="k">def</span> <span class="nf">_nm_all_device_interfaces</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;Return a list of interfaces to all devices NM sees&#34;&#34;&#34;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span> <span class="n">_nm_device_interface</span><span class="p">(</span><span class="n">_nm_get_object</span><span class="p">(</span><span class="n">devicename</span><span class="p">))</span>
                    <span class="k">for</span> <span class="n">devicename</span> <span class="ow">in</span> <span class="n">_nm</span><span class="p">()</span><span class="o">.</span><span class="n">getDevices</span><span class="p">()</span> <span class="p">]</span>
    <span class="k">except</span> <span class="n">dbus</span><span class="o">.</span><span class="n">DBusException</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">_nm_dbus_exception</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="s2">&#34;NoDevices&#34;</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">[]</span> <span class="c1"># No devices means list of devices is empty</span>
        <span class="k">else</span><span class="p">:</span> <span class="k">raise</span>
</code></pre></div><p>&hellip;into this C gem:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#define DBUS_SERVICE_NM &#34;org.freedesktop.NetworkManager&#34;
</span><span class="cp">#define DBUS_PATH_NM &#34;/org/freedesktop/NetworkManager&#34;
</span><span class="cp">#define DBUS_INTERFACE_NM &#34;org.freedesktop.NetworkManager&#34;
</span><span class="cp">#define NM_ERR_NODEVICES &#34;org.freedesktop.NetworkManager.NoDevices&#34;
</span><span class="cp"></span>
<span class="n">gboolean</span> <span class="nf">is_remote_dbus_exception</span><span class="p">(</span><span class="n">GError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">exception_name</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">g_assert</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="o">-&gt;</span><span class="n">domain</span> <span class="o">!=</span> <span class="n">DBUS_GERROR</span> <span class="o">||</span>
                        <span class="n">error</span><span class="o">-&gt;</span><span class="n">code</span> <span class="o">!=</span> <span class="n">DBUS_GERROR_REMOTE_EXCEPTION</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">exception_name</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">dbus_g_error_get_name</span><span class="p">(</span><span class="n">error</span><span class="p">),</span> <span class="n">exception_name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">GPtrArray</span> <span class="o">*</span> <span class="nf">get_nm_devices</span><span class="p">(</span><span class="n">DBusGConnection</span> <span class="o">*</span><span class="n">connection</span><span class="p">,</span> <span class="n">GError</span> <span class="o">**</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">GError</span> <span class="o">*</span><span class="n">tmp_error</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">DBusGProxy</span> <span class="o">*</span><span class="n">proxy</span><span class="p">;</span>
        <span class="n">GPtrArray</span> <span class="o">*</span><span class="n">ptr_array</span><span class="p">;</span>

        <span class="n">g_return_val_if_fail</span><span class="p">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

        <span class="n">proxy</span> <span class="o">=</span> <span class="n">dbus_g_proxy_new_for_name</span><span class="p">(</span>
                        <span class="n">connection</span><span class="p">,</span>
                        <span class="n">DBUS_SERVICE_NM</span><span class="p">,</span>
                        <span class="n">DBUS_PATH_NM</span><span class="p">,</span>
                        <span class="n">DBUS_INTERFACE_NM</span><span class="p">);</span>

        <span class="n">dbus_g_proxy_call</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s">&#34;getDevices&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp_error</span><span class="p">,</span> <span class="n">G_TYPE_INVALID</span><span class="p">,</span>
                        <span class="n">dbus_g_type_get_collection</span><span class="p">(</span><span class="s">&#34;GPtrArray&#34;</span><span class="p">,</span>
                                <span class="n">DBUS_TYPE_G_PROXY</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">ptr_array</span><span class="p">,</span> <span class="n">G_TYPE_INVALID</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">tmp_error</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">is_remote_dbus_exception</span><span class="p">(</span><span class="n">tmp_error</span><span class="p">,</span> <span class="n">NM_ERR_NODEVICES</span><span class="p">))</span> <span class="p">{</span>
                        <span class="n">g_error_free</span><span class="p">(</span><span class="n">tmp_error</span><span class="p">);</span>
                        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span>
                        <span class="n">g_propagate_error</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">tmp_error</span><span class="p">);</span>
                        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
                <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">g_object_unref</span><span class="p">(</span><span class="n">proxy</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">ptr_array</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The C code runs much faster, and I suspect is more maintainable then its
original counterpart (which uses embedded python in C).</p>
]]></content:encoded></item><item><title>My alarm clock</title><link>https://lutzky.net/2008/02/12/my-alarm-clock/</link><pubDate>Tue, 12 Feb 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/02/12/my-alarm-clock/</guid><description>YNet was running a story on how to use your computer as an alarm clock. Here&amp;rsquo;s what I do, for our commandline junkies :)
Here&amp;rsquo;s ~/bin/run_alarm.sh:
#!/bin/bash find ~/music/ -name &amp;#39;*.mp3&amp;#39; -print0 | xargs -0 mplayer -shuffle &amp;amp; MAXVOL=31 TIME=900 for (( i = 0; i &amp;lt;= $MAXVOL; i++ )); do amixer set Master $i &amp;gt; /dev/null; sleep `echo $TIME / $MAXVOL | bc -l` done This basically plays all of my MP3 files, in random order.</description><content:encoded><![CDATA[<p>YNet was running a story on how to use your computer as an alarm clock. Here&rsquo;s
what I do, for our commandline junkies :)</p>
<p>Here&rsquo;s <code>~/bin/run_alarm.sh</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
find ~/music/ -name <span class="s1">&#39;*.mp3&#39;</span> -print0 <span class="p">|</span> xargs -0 mplayer -shuffle <span class="p">&amp;</span>

<span class="nv">MAXVOL</span><span class="o">=</span><span class="m">31</span>
<span class="nv">TIME</span><span class="o">=</span><span class="m">900</span>

<span class="k">for</span> <span class="o">((</span> <span class="nv">i</span> <span class="o">=</span> 0<span class="p">;</span> i &lt;<span class="o">=</span> <span class="nv">$MAXVOL</span><span class="p">;</span> i++ <span class="o">))</span><span class="p">;</span> <span class="k">do</span>
        amixer <span class="nb">set</span> Master <span class="nv">$i</span> &gt; /dev/null<span class="p">;</span>
        sleep <span class="sb">`</span><span class="nb">echo</span> <span class="nv">$TIME</span> / <span class="nv">$MAXVOL</span> <span class="p">|</span> bc -l<span class="sb">`</span>
<span class="k">done</span>
</code></pre></div><p>This basically plays all of my MP3 files, in random order. The <code>-print0</code> and <code>-0</code>
arguments make it a null-terminated list, as some (most) files have spaces in
their names. This process is backgrounded, and the script proceeds to gradually
sweep the volume from 0 to the maximum, for a more gentle wakeup :)</p>
<p>This script is basically intended for use with <code>at</code>. I made a little wrapper
around it for my comfort:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">&#34;Usage: </span><span class="nv">$0</span><span class="s2"> [time]&#34;</span><span class="p">;</span>
        <span class="nb">exit</span> 1<span class="p">;</span>
<span class="k">fi</span>

<span class="nb">echo</span> /home/ohad/bin/run_alarm.sh <span class="p">|</span> at <span class="nv">$1</span>
</code></pre></div>]]></content:encoded></item><item><title>Nokia 6120 Classic</title><link>https://lutzky.net/2008/02/11/nokia-6120-classic/</link><pubDate>Mon, 11 Feb 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/02/11/nokia-6120-classic/</guid><description>I&amp;rsquo;ve switched to a Nokia 6120 Classic, and I&amp;rsquo;ve switched my carrier over to Orange. I&amp;rsquo;m very happy with it: The price is right, at 0 NIS a month (if your monthly bill adds up to over 100 NIS without it, which it does). It&amp;rsquo;s very small, but has a nice screen and a respectable 2 megapixel camera. It&amp;rsquo;s &amp;ldquo;3.5G&amp;rdquo;, which means it has a very fast internet connection (I&amp;rsquo;ve clocked over 50kbyte/sec), and the Symbian S60 operating system lets me use it well - it comes with a very, very nice webkit-based browser and RSS reader, and a fast GMail client is a few clicks away.</description><content:encoded><![CDATA[<p>I&rsquo;ve switched to a <a href="http://europe.nokia.com/A4399010">Nokia 6120 Classic</a>, and
I&rsquo;ve switched my carrier over to Orange. I&rsquo;m very happy with it: The price is
right, at 0 NIS a month (if your monthly bill adds up to over 100 NIS without
it, which it does). It&rsquo;s very small, but has a nice screen and a respectable 2
megapixel camera. It&rsquo;s &ldquo;3.5G&rdquo;, which means it has a very fast internet
connection (I&rsquo;ve clocked over 50kbyte/sec), and the Symbian S60 operating
system lets me use it well - it comes with a very, very nice webkit-based
browser and RSS reader, and a fast GMail client is a few clicks away.</p>
<p>Another nice feature is the built-in MP3 player - which is actually made
relevant due to the micro-SD support and included 1GB SD card. The device has a
standard USB connection (cable included, but it&rsquo;s an ordinary Mini-to-A cable),
and has a Mass Storage Device mode, so it works well with any OS. It can also
automatically text-to-speech the name of the caller (or dial by voice
recognition, which works remarkably well), which is handy when listening to
MP3s.</p>
<p>I&rsquo;ve only had two problems with it so far - first, when viewing a long web page
(on wikipedia, specifically), it gave an &ldquo;out of RAM&rdquo; message and rebooted. I&rsquo;m
curious as to whether there&rsquo;s a simpler, non-CSS version of Wikipedia, or a way
to get the phone to ignore the CSS - this will probably save on RAM. Another
problem I had was that the vibration feature didn&rsquo;t work until I rebooted it -
but this no longer seems to occur.</p>
<p>I wonder how well puTTy would work on this&hellip;</p>
]]></content:encoded></item><item><title>Egged Getter 0.1</title><link>https://lutzky.net/2008/02/01/egged-getter-0-1/</link><pubDate>Fri, 01 Feb 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/02/01/egged-getter-0-1/</guid><description>The Egged Getter has been lost in the mists of time. However, it&amp;rsquo;s code has largely been integrated into TransportDroidIL. An old version of the Python code has been pasted at the end of this post.
Here&amp;rsquo;s a little something I&amp;rsquo;ve been messing with: A simple fetcher script for the Egged (Israeli bus company) site. I&amp;rsquo;ve made a deskbar applet which uses it, which was fun to do :) (I&amp;rsquo;m looking for other cool ideas to implement as deskbar applets)</description><content:encoded><![CDATA[<blockquote>
<p>The Egged Getter has been lost in the mists of time. However, it&rsquo;s code has
largely been integrated into <a href="https://github.com/lutzky/TransportDroidIL">TransportDroidIL</a>. An old version of the Python
code has been pasted at the end of this post.</p>
</blockquote>
<p>Here&rsquo;s a little something I&rsquo;ve been messing with: A simple fetcher script for
the <a href="http://www.egged.co.il">Egged</a> (Israeli bus company) site. I&rsquo;ve made a
deskbar applet which uses it, which was fun to do :) (I&rsquo;m looking for other
cool ideas to implement as deskbar applets)</p>
<p>You can get it at
<a href="http://lutzky.net/files/egged_getter">http://lutzky.net/files/egged_getter</a>.
The readme file includes installation instructions (&hellip;which involve placing
the two included scripts in
<code>~/.gnome2/deskbar-plugin/modules-2.20-compatible/</code>.</p>
<p>There&rsquo;s also a <a href="http://git.or.cz">git</a> repository here:
<a href="http://git.lutzky.net/?p=ohad/egged_getter.git">http://git.lutzky.net/?p=ohad/egged_getter.git</a>.
I don&rsquo;t think I&rsquo;ve mentioned git on the blog before&hellip; It&rsquo;s freaking awesome.
It made me really despise subversion :). Besides the abundance of information
on <a href="http://git.or.cz">the main site</a>, there&rsquo;s <a href="http://www.youtube.com/watch?v=4XpnKHJAok8">an excellent (and very amusing)
talk by Linus about it</a>. Also, I&rsquo;m
giving a talk about it in Haifux - this coming Monday (February 4th), the Taub
building of the Technion, room 6, at 18:30.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>
<span class="c1"># coding: utf-8</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">pyfribidi</span> <span class="kn">import</span> <span class="n">log2vis</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">log2vis</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">return</span> <span class="n">s</span>

<span class="c1"># Original values which worked:</span>
<span class="c1"># User agent (a sane browser agent):</span>
<span class="c1"># USERAGENT=&#34;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b2) Gecko/2007121016 Firefox/3.0b2&#34;</span>
<span class="c1"># Session ID: Can be retrieved from the site, but seems to have a very long</span>
<span class="c1"># keepalive, and isn&#39;t checked anyway.</span>
<span class="c1"># SESSION_ID=&#34;thjbzmnrhrks3a55w1dymvnx&#34;</span>

<span class="n">BUF_LEN</span><span class="o">=</span><span class="mi">2048</span>
<span class="n">HOST</span><span class="o">=</span><span class="s1">&#39;mslworld.egged.co.il&#39;</span>
<span class="n">PORT</span><span class="o">=</span><span class="mi">80</span>

<span class="n">DOUBLE_NEWLINE</span><span class="o">=</span><span class="s2">&#34;</span><span class="se">\r\n\r\n</span><span class="s2">&#34;</span>

<span class="n">USER_AGENT</span><span class="o">=</span><span class="s2">&#34;EggedGetter&#34;</span>
<span class="n">SESSION_ID</span><span class="o">=</span><span class="s2">&#34;0&#34;</span>

<span class="n">JSON_DATA</span><span class="o">=</span><span class="s2">&#34;&#34;&#34;{&#34;str1&#34;:&#34;</span><span class="si">%(query)s</span><span class="s2">&#34;,&#34;strSession&#34;:&#34;</span><span class="si">%(session_id)s</span><span class="s2">&#34;}&#34;&#34;&#34;</span>

<span class="n">_payload</span><span class="o">=</span><span class="s2">&#34;&#34;&#34;POST /eggedtimetable/WebForms/wsUnicell.asmx/getAnswer HTTP/1.1
</span><span class="s2">Host: mslworld.egged.co.il
</span><span class="s2">User-Agent: </span><span class="si">%(user_agent)s</span><span class="s2">
</span><span class="s2">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class="s2">Accept-Language: en-us,en;q=0.5
</span><span class="s2">Accept-Charset: utf-8
</span><span class="s2">Keep-Alive: 300
</span><span class="s2">Connection: keep-alive
</span><span class="s2">Content-Type: application/json; charset=utf-8
</span><span class="s2">Referer: http://mslworld.egged.co.il/eggedtimetable/WebForms/wfrmMain.aspx?width=1280&amp;state=3&amp;taavura=0&amp;language=he&amp;freelang=
</span><span class="s2">Content-Length: </span><span class="si">%(content_length)d</span><span class="s2">
</span><span class="s2">Cookie: ASP.NET_SessionId=</span><span class="si">%(session_id)s</span><span class="s2">
</span><span class="s2">Pragma: no-cache
</span><span class="s2">Cache-Control: no-cache
</span><span class="s2">
</span><span class="s2"></span><span class="si">%(json_data)s</span><span class="s2">&#34;&#34;&#34;</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span><span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">build_json_data</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span> <span class="o">=</span> <span class="n">SESSION_ID</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Build a JSON-formatted query for the egged site.&#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="n">JSON_DATA</span> <span class="o">%</span> <span class="p">{</span>
            <span class="s1">&#39;query&#39;</span><span class="p">:</span><span class="n">query</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;&#34;&#39;</span><span class="p">,</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">&#34;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">),</span>
            <span class="s1">&#39;session_id&#39;</span><span class="p">:</span><span class="n">session_id</span><span class="p">,</span>
            <span class="p">}</span>

<span class="k">def</span> <span class="nf">build_request</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span> <span class="o">=</span> <span class="n">SESSION_ID</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Build an HTTP request for the egged site.&#34;&#34;&#34;</span>

    <span class="n">json_data</span> <span class="o">=</span> <span class="n">build_json_data</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">_payload</span> <span class="o">%</span> <span class="p">{</span>
            <span class="s1">&#39;user_agent&#39;</span><span class="p">:</span><span class="n">USER_AGENT</span><span class="p">,</span>
            <span class="s1">&#39;content_length&#39;</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">json_data</span><span class="p">),</span>
            <span class="s1">&#39;session_id&#39;</span><span class="p">:</span><span class="n">session_id</span><span class="p">,</span>
            <span class="s1">&#39;json_data&#39;</span><span class="p">:</span><span class="n">json_data</span><span class="p">,</span>
            <span class="p">}</span>

<span class="k">def</span> <span class="nf">send_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span> <span class="o">=</span> <span class="n">SESSION_ID</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Prepare and send query to site. Returned data is raw.&#34;&#34;&#34;</span>

    <span class="n">http_data</span> <span class="o">=</span> <span class="n">build_request</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>

    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span><span class="n">PORT</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">http_data</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_LEN</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">clean_response_html</span><span class="p">(</span><span class="n">response</span><span class="p">,</span><span class="n">linebreak</span><span class="o">=</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span><span class="n">item</span><span class="o">=</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2"> * &#34;</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">response</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">response</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;&#34;&#39;</span><span class="p">:</span> <span class="n">response</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">BR</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\u003c</span><span class="s2">br</span><span class="se">\u003e</span><span class="s2">&#34;</span>
    <span class="n">LI</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\u003c</span><span class="s2">li</span><span class="se">\u003e</span><span class="s2">&#34;</span>
    <span class="n">NBSP</span> <span class="o">=</span> <span class="s2">&#34;&amp;nbsp&#34;</span>
    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">BR</span><span class="p">,</span><span class="n">linebreak</span><span class="p">)</span> \
                   <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">LI</span><span class="p">,</span><span class="n">item</span><span class="p">)</span> \
                   <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">NBSP</span><span class="p">,</span><span class="s2">&#34; &#34;</span><span class="p">)</span> \
                   <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\\</span><span class="s2">&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">query_site</span><span class="p">(</span><span class="n">query</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Query the egged site with query&#34;&#34;&#34;</span>
    <span class="n">site_response</span> <span class="o">=</span> <span class="n">send_query</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
    <span class="n">returned_data</span> <span class="o">=</span> <span class="n">site_response</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">DOUBLE_NEWLINE</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">cleaned_data</span> <span class="o">=</span> <span class="n">clean_response_html</span><span class="p">(</span><span class="n">returned_data</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span> <span class="s2">&#34;Error occured when trying to clean up the following response:&#34;</span>
        <span class="nb">print</span> <span class="s2">&#34;site_response:&#34;</span>
        <span class="nb">print</span> <span class="n">site_response</span>
        <span class="nb">print</span> <span class="s2">&#34;returned_data:&#34;</span>
        <span class="nb">print</span> <span class="n">returned_data</span>
        <span class="k">raise</span>

    <span class="k">return</span> <span class="n">unicode</span><span class="p">(</span><span class="n">cleaned_data</span><span class="p">,</span> <span class="s2">&#34;utf-8&#34;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">unicode</span><span class="p">(</span><span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Enter query for Egged site: &#34;</span><span class="p">),</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">query_site</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>

    <span class="nb">print</span> <span class="s2">&#34;&#34;</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="nb">print</span> <span class="n">log2vis</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">UnicodeEncodeError</span><span class="p">:</span>
        <span class="nb">print</span> <span class="n">log2vis</span><span class="p">(</span><span class="n">unicode</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="s2">&#34;utf-8&#34;</span><span class="p">))</span>
</code></pre></div>]]></content:encoded></item><item><title>Sour chewing gum</title><link>https://lutzky.net/2007/12/19/sour-chewing-gum/</link><pubDate>Wed, 19 Dec 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/12/19/sour-chewing-gum/</guid><description>On an online board, friends posted a photo from a party a while back, as I&amp;rsquo;m chewing some extra-sour chewing gum:
חמוצקי נולד I find this suitable for use in macro form. For example, in the Computer Security course, we&amp;rsquo;re going to compromise a windows-based server using a buffer overflow vulnerability. Unfortunately, this means we&amp;rsquo;re going to have to use (as per the course&amp;rsquo;s demands) Visual Studio 2003. My response (now known as חמוצקי):</description><content:encoded><![CDATA[<p>On an online board, friends posted a photo from a party a while back, as I&rsquo;m chewing some extra-sour chewing gum:</p>
<figure>
  <a href="/2007/12/19/sour-chewing-gum/dscf6400ff0.jpg">
    <img loading="lazy" src="/2007/12/19/sour-chewing-gum/dscf6400ff0.jpg" />
  </a><figcaption>חמוצקי נולד</figcaption></figure>
<p>I find this suitable for use in macro form. For example, in the Computer
Security course, we&rsquo;re going to compromise a windows-based server using a
buffer overflow vulnerability. Unfortunately, this means we&rsquo;re going to have to
use (as per the course&rsquo;s demands) Visual Studio 2003. My response (now known as חמוצקי):</p>
<figure>
  <a href="/2007/12/19/sour-chewing-gum/lutz2as3.gif">
    <img loading="lazy" src="/2007/12/19/sour-chewing-gum/lutz2as3.gif" />
  </a><figcaption>חמוצקי</figcaption></figure>
]]></content:encoded></item><item><title>Means of control</title><link>https://lutzky.net/2007/12/17/means-of-control/</link><pubDate>Mon, 17 Dec 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/12/17/means-of-control/</guid><description>New URL - not interesting. You&amp;rsquo;d notice by now, as you&amp;rsquo;ve been redirected. Guess my new E-mail. OpenID - interesting, but I don&amp;rsquo;t have anything particularily interesting to say about it right now.
This, however, is interesting: &amp;ldquo;10 things christians and atheists can (and must) agree on&amp;rdquo;, a nicely written piece over at cracked.com. But this isn&amp;rsquo;t blogspam, I&amp;rsquo;ll actually share my two cents. (or shnekel, if you like)
I have a serious problem with religion; It is my opinion that it is an overly powerful means of control.</description><content:encoded><![CDATA[<p>New URL - not interesting. You&rsquo;d notice by now, as you&rsquo;ve been redirected.
Guess my new E-mail. OpenID - interesting, but I don&rsquo;t have anything
particularily interesting to say about it right now.</p>
<p>This, however, <em>is</em> interesting: &ldquo;<a href="http://www.cracked.com/article_15663_god-fuse-10-things-christians-atheists-can-must-agree-on.html">10 things christians and atheists can (and
must) agree on</a>&rdquo;, a nicely written piece over at cracked.com. But this isn&rsquo;t
blogspam, I&rsquo;ll actually share my two cents. (or
<a href="http://www.shnekel.org/">shnekel</a>, if you like)</p>
<p>I have a serious problem with religion; It is my opinion that it is an overly
powerful means of control. Whether it has evolved as such or not is hard to
tell. But today it seems to pose a very serious threat to the world.</p>
<p>Now, don&rsquo;t get me wrong - control of this type is very important and useful.
Specifically, it manifests itself in a basic moral system which, many believe,
has served mankind well. You know, &ldquo;thou shalt not murder&rdquo;, stuff like that.
Some may even say that it was a central factor in overcoming our primal urges,
and development into the ever-so-slightly more sophisticated society we are
today.</p>
<p>However, there are other, more dangerous manifestations of this control.
Specifically, it seems all-too-easy nowadays to get up and say &ldquo;This-and-that
god has spoken to me - we must kill those-and-them&rdquo;. &ldquo;God has spoken to me, we
must, uh, enlighten these our-religious-character-rejecting
other-religion-followers. There&rsquo;s some oil in it for us, too&rdquo;. &ldquo;This land has
been promised to us this-and-that years ago, we must kill all
other-religion-dwellers&rdquo;.</p>
<p>Of course, the link here is politics. When used as a series of anecdotes,
morals, stories, hell - even as a way of life - religious is mostly harmless.
However, when a religious leader becomes a political figure, the temptation is
simply too great, and religion becomes used as a tool of the agenda. It doesn&rsquo;t
take a whole staff of advisors and a big media budget to convince the public
now - it only takes a proper connection with arbitrary dogma to do that.</p>
<p>Throughout the years, the secular public has wished for separation of church
and state. But noone has yet stated it better than George Carlin - &ldquo;Keep thy
religion (or, in accordance with the linked post, thy lack thereof) to
thyself.&rdquo;</p>
]]></content:encoded></item><item><title>Vacation</title><link>https://lutzky.net/2007/11/04/vacation/</link><pubDate>Sun, 04 Nov 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/11/04/vacation/</guid><description>The most recent events in my life which I would consider to be vacations would be the second Lebanon war and my basic training. I love the Technion, but I think it&amp;rsquo;s high time for some R&amp;amp;R. With no upcoming tests hovering over my head, homework pressure low-to-nonexistent, and my girlfriend&amp;rsquo;s birthday Murphy&amp;rsquo;s-law-bendingly coinciding with her getting some leave, this is a perfect opportunity to try my hand at a real vacation.</description><content:encoded><![CDATA[<p>The most recent events in my life which I would consider to be vacations would
be the second Lebanon war and my basic training. I love the Technion, but I
think it&rsquo;s high time for some R&amp;R. With no upcoming tests hovering over my
head, homework pressure low-to-nonexistent, and my girlfriend&rsquo;s birthday
Murphy&rsquo;s-law-bendingly coinciding with her getting some leave, this is a
perfect opportunity to try my hand at a real vacation.</p>
<p>Okay, so it&rsquo;s just two days, but I could hardly ask for anything better. The
location is a Tzimmer recommended by friends and family. My parents have
graciously lent me the car for the purpose. Last but not least, I&rsquo;ve gotten my
hands on some massage oil. :-)</p>
<p>Studying at the Technion can get rather hectic. But hell, I have just one more
year to go, after which I undergo lime-tinted metamorphosis. Perhaps low-key,
nearby, short-term vacations are all I can afford. But with good friends, a
wonderful girlfriend, and a geeky way of getting excited at seemingly mundane
things, I can&rsquo;t complain. Even with EE atrocities in my recent past and, in all
likelihood, my near future, I can&rsquo;t help but wear an annoying smile on my face.</p>
]]></content:encoded></item><item><title>Computability - Typed Lectures and Tutorials</title><link>https://lutzky.net/2007/10/31/computability-typed-lectures-and-tutorials/</link><pubDate>Wed, 31 Oct 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/10/31/computability-typed-lectures-and-tutorials/</guid><description>All links in this post have been lost to the mists of time. I&amp;rsquo;ve kept it here out of pure nostalgia.
I&amp;rsquo;m typing the lectures of the course 236343 Computability Theory this semester. Attached are my lectures notes in PDF form:
Computability Lecture Notes Computability Tutorial Notes
If you also type the notes and would like to collaborate with me, I use a git repository stored here:
http://yasmin.technion.ac.il/ohad/git/computability.git</description><content:encoded><![CDATA[<blockquote>
<p>All links in this post have been lost to the mists of time. I&rsquo;ve kept it here
out of pure nostalgia.</p>
</blockquote>
<p>I&rsquo;m typing the lectures of the course 236343 Computability Theory this
semester. Attached are my lectures notes in PDF form:</p>
<p><a href="http://yasmin.technion.ac.il/ohad/winter_2007/computability/computability_lecture.pdf">Computability Lecture Notes</a>
<a href="http://yasmin.technion.ac.il/ohad/winter_2007/computability/computability_tutorial.pdf">Computability Tutorial Notes</a></p>
<p>If you also type the notes and would like to collaborate with me, I use a git
repository stored here:</p>
<p><a href="http://yasmin.technion.ac.il/ohad/git/computability.git">http://yasmin.technion.ac.il/ohad/git/computability.git</a></p>
<p>To use it, install <code>git-core</code> and curl, and run</p>
<pre tabindex="0"><code class="language-console" data-lang="console">git clone http://yasmin.technion.ac.il/ohad/git/computability.git
</code></pre><p>Any changes you have - send to me as patches, or push to your own repository
and send me a link. (Drawings would be most welcome, and you&rsquo;re obviously
welcome to add your name to the list of typers)</p>
<p>If you need git storage, try <a href="http://repo.or.cz">repo.or.cz</a>, or ask the T2
admins to install git :)</p>
]]></content:encoded></item><item><title>Encrypted my Wi-fi</title><link>https://lutzky.net/2007/10/28/encrypted-my-wi-fi/</link><pubDate>Sun, 28 Oct 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/10/28/encrypted-my-wi-fi/</guid><description>Reading some backlog on this blog, I found the following gem:
It’s a sad state of affairs that people go ahead and limit access to their wireless network. I keep mine wide open - מי שאוכל לבד, מת לבד.
Yeah&amp;hellip; not so anymore. For about four weeks (just a bit before the semester started), my net connection was working excrutiatingly slow. Now, we&amp;rsquo;re four roommates here, so we started blaming each other.</description><content:encoded><![CDATA[<p>Reading some backlog on this blog, I found the following gem:</p>
<blockquote>
<p>It’s a sad state of affairs that people go ahead and limit access to their
wireless network. I keep mine wide open - מי שאוכל לבד, מת לבד.</p>
</blockquote>
<p>Yeah&hellip; not so anymore. For about four weeks (just a bit before the semester
started), my net connection was working excrutiatingly slow. Now, we&rsquo;re four
roommates here, so we started blaming each other. But then I had a guess - I
encrypted my connection with WPA/TKIP, and presto; the connection is now once
again too fast for my browser to handle (&hellip;which sent me back to Epiphany).
Guys, if you mooch wi-fi, please&hellip; be nice about it :(</p>
]]></content:encoded></item><item><title>On Threading vs. Processing</title><link>https://lutzky.net/2007/10/13/on-threading-vs-processing/</link><pubDate>Sat, 13 Oct 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/10/13/on-threading-vs-processing/</guid><description>Writing multi-threaded applications in Python is often a headache because of the Global Interpreter Lock - only one Python thread can run at any given moment, which makes multi-threading useful only in the case where all modules but one actually run C code. However, thanks to the impressive new Python Magazine, I&amp;rsquo;ve stumbled across a package called processing, paraphrasing python&amp;rsquo;s built-in threading package. Essentially, the package provides an API identical to Python&amp;rsquo;s threading, but uses processes and pipes (or other mechanisms on non-posix operating systems) instead.</description><content:encoded><![CDATA[<p>Writing multi-threaded applications in Python is often a headache because of
the Global Interpreter Lock - only one Python thread can run at any given
moment, which makes multi-threading useful only in the case where all modules
but one actually run C code. However, thanks to the impressive new <a href="http://pythonmagazine.com">Python
Magazine</a>, I&rsquo;ve stumbled across a package called
<code>processing</code>, paraphrasing python&rsquo;s built-in <code>threading</code> package. Essentially,
the package provides an API identical to Python&rsquo;s threading, but uses processes
and pipes (or other mechanisms on non-posix operating systems) instead. What
the magazine does not cover is the fact that this can also benefit GUI
applications; updating a progressbar in the application doesn&rsquo;t need to slow
down heavy computations being done in a separate thread. To show how easy the
integration is, take the following example which shows usage of either threads
or processes at the user&rsquo;s choice:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">processing</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">Queue</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">gtk</span>
<span class="kn">import</span> <span class="nn">gobject</span>

<span class="n">gtk</span><span class="o">.</span><span class="n">gdk</span><span class="o">.</span><span class="n">threads_init</span><span class="p">()</span>

<span class="n">USE_PROCESSING</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">WORKER_DELAY</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">GUI_DELAY</span> <span class="o">=</span> <span class="mf">0.5</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">sq</span><span class="p">):</span>
	<span class="nb">print</span> <span class="s2">&#34;Init other thread&#34;</span>
	<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
	<span class="k">while</span> <span class="n">sq</span><span class="o">.</span><span class="n">empty</span><span class="p">():</span>
		<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">WORKER_DELAY</span><span class="p">)</span>
		<span class="n">q</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
		<span class="nb">print</span> <span class="s2">&#34;Other thread: </span><span class="si">%d</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">i</span>
		<span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">update_label</span><span class="p">((</span><span class="n">l</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">sq</span><span class="p">)):</span>
	<span class="nb">print</span> <span class="s2">&#34;Updating label&#34;</span>
	<span class="k">try</span><span class="p">:</span>
		<span class="n">i</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">get_nowait</span><span class="p">()</span>
		<span class="n">l</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Number in thread: </span><span class="si">%d</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
	<span class="k">except</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Empty</span><span class="p">:</span>
		<span class="n">l</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Queue is empty!&#34;</span><span class="p">)</span>
	<span class="k">except</span> <span class="n">processing</span><span class="o">.</span><span class="n">Queue</span><span class="o">.</span><span class="n">Empty</span><span class="p">:</span>
		<span class="n">l</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Queue is empty!&#34;</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">sq</span><span class="o">.</span><span class="n">empty</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">sq</span><span class="p">):</span>
	<span class="n">sq</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
	<span class="n">gtk</span><span class="o">.</span><span class="n">main_quit</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
	<span class="k">if</span> <span class="n">USE_PROCESSING</span><span class="p">:</span>
		<span class="n">q</span> <span class="o">=</span> <span class="n">processing</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
		<span class="n">sq</span> <span class="o">=</span> <span class="n">processing</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
		<span class="n">p</span> <span class="o">=</span> <span class="n">processing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">f</span><span class="p">,</span>
			<span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">q</span><span class="p">,</span> <span class="n">sq</span><span class="p">])</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="n">q</span> <span class="o">=</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
		<span class="n">sq</span> <span class="o">=</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
		<span class="n">p</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">f</span><span class="p">,</span>
			<span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">q</span><span class="p">,</span> <span class="n">sq</span><span class="p">])</span>

	<span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
	<span class="n">w</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Window</span><span class="p">()</span>
	<span class="n">l</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Label</span><span class="p">()</span>
	<span class="n">gobject</span><span class="o">.</span><span class="n">timeout_add</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="mi">1000</span><span class="o">*</span><span class="n">GUI_DELAY</span><span class="p">),</span>
		<span class="n">update_label</span><span class="p">,</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">sq</span><span class="p">))</span>
	<span class="n">w</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
	<span class="n">w</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;destroy&#39;</span><span class="p">,</span> <span class="n">close</span><span class="p">,</span> <span class="n">sq</span><span class="p">)</span>
	<span class="n">w</span><span class="o">.</span><span class="n">show_all</span><span class="p">()</span>
	<span class="nb">print</span> <span class="s2">&#34;Mainloop!&#34;</span>
	<span class="n">gtk</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</code></pre></div>]]></content:encoded></item><item><title>Tough Question</title><link>https://lutzky.net/2007/09/25/tough-question/</link><pubDate>Tue, 25 Sep 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/09/25/tough-question/</guid><description>My girlfriend just asked me what just might be the hardest question I&amp;rsquo;ve heard all semester; What do I like better, The Simpsons or beer?</description><content:encoded>&lt;p>My girlfriend just asked me what just might be the hardest question I&amp;rsquo;ve heard all semester;
What do I like better, The Simpsons or beer?&lt;/p></content:encoded></item><item><title>Really liking this git thing</title><link>https://lutzky.net/2007/09/18/really-liking-this-git-thing/</link><pubDate>Tue, 18 Sep 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/09/18/really-liking-this-git-thing/</guid><description>I&amp;rsquo;ve been a very big proponent of Subversion so far, especially as a tool for collaborating on coding homework. However, I&amp;rsquo;ve recently been trying out Linus&amp;rsquo;s git. It&amp;rsquo;s very nice so far, and really seems to be catching on. Some good points:
Fast as all hell (much faster than Bazaar, although I haven&amp;rsquo;t given that the proper attention) No need for a central server; hell, no need for an internet connection at all, everything can be done over USB keys or whatnot No real need to configure any special server; just install git on it Very nice alternative to configuring write-control for all of the users Very easy branching and merging, finally!</description><content:encoded><![CDATA[<p>I&rsquo;ve been a very big proponent of Subversion so far, especially as a tool for
collaborating on coding homework. However, I&rsquo;ve recently been trying out
Linus&rsquo;s <a href="http://git.or.cz/">git</a>. It&rsquo;s very nice so far, and really seems to be
catching on. Some good points:</p>
<ul>
<li>Fast as all hell (much faster than Bazaar, although I haven&rsquo;t given that the
proper attention)</li>
<li>No need for a central server; hell, no need for an internet connection at
all, everything can be done over USB keys or whatnot</li>
<li>No real need to configure any special server; just install git on it</li>
<li>Very nice alternative to configuring write-control for all of the users</li>
<li>Very easy branching and merging, finally! SVN really shows its weakness here</li>
</ul>
<p>One thing I couldn&rsquo;t find out how to do is limiting read-access to git
repositories without special server configuration. It would be nice if git had
support for <code>.htpasswd</code>-compatible authentication, those are pretty easy to use.</p>
]]></content:encoded></item><item><title>Exception handling, decorators, and python</title><link>https://lutzky.net/2007/09/16/exception-handling-decorators-and-python/</link><pubDate>Sun, 16 Sep 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/09/16/exception-handling-decorators-and-python/</guid><description>Lately I&amp;rsquo;ve been working on a project that has me using DBus a lot. After trying to figure out how to work DBus with C, and seeing how easy it is to do in Python, we figured we&amp;rsquo;d try to use embedded Python to do this. Fortunately, it&amp;rsquo;s very simple to use - especially thanks to this guide.
It later turned out to be much easier to do in C, as described in Faster Languages.</description><content:encoded><![CDATA[<p>Lately I&rsquo;ve been working on a project that has me using DBus a lot. After
trying to figure out how to work DBus with C, and seeing how easy it is to do
in Python, we figured we&rsquo;d try to use embedded Python to do this. Fortunately,
it&rsquo;s very simple to use - especially thanks to <a href="http://www.developer.com/lang/other/article.php/2217941">this guide</a>.</p>
<blockquote>
<p>It later turned out to be much easier to do in C, as described in <em><a href="/2008/04/16/faster-languages">Faster Languages</a></em>.</p>
</blockquote>
<p>Now, we couldn&rsquo;t have the Python code throwing exceptions outwards, so we had
each function return, along with its actual return value (if any), a numeric
code identifying the error. Unfortunately, this made the code get really big,
really fast - especially once DBus exceptions are thrown into the mix. But once
I learned how to use decorators, I accomplished something like this diff:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gi">+@wrap_exceptions((False,))
</span><span class="gi"></span> def checkSomething():
<span class="gd">-    global error_string
</span><span class="gd">-
</span><span class="gd">-    error_string = &#34;&#34;
</span><span class="gd">-
</span><span class="gd">-    try:
</span><span class="gd">-        return (try_doing_something_over_dbus(), RET_OK)
</span><span class="gd">-    except dbus.DBusException, e:
</span><span class="gd">-        error_string = str(e)
</span><span class="gd">-        if _nm_dbus_exception(e, &#34;ServiceUnknown&#34;):
</span><span class="gd">-            return (False, RET_SERVICE_NOT_RUNNING)
</span><span class="gd">-        return (False, RET_ERROR)
</span><span class="gd">-    except Exception, e:
</span><span class="gd">-        error_string = str(e)
</span><span class="gd">-        return (False, RET_ERROR)
</span><span class="gd">-
</span><span class="gd"></span><span class="gi">+    return (try_doing_something_over_dbus(), RET_OK)
</span></code></pre></div><p>Now, the duplicate DBus/non-DBus exception handling, global <code>error_string</code>,
etc. - that happened in a lot of functions. Unfortunately, they didn&rsquo;t all
return their values in the same way. Some just returned a <code>RET_VALUE</code>, but most
had other values before it in the tuple (not the ideal design, come to think of
it&hellip;). Here&rsquo;s the decorator I wrote:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">wrap_exceptions</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prepend_tuple</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prepend_tuple</span> <span class="o">=</span> <span class="n">prepend_tuple</span>

    <span class="k">def</span> <span class="nf">tuplize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">retval</span><span class="p">):</span>
        <span class="c1"># Change retval into a default tuple form, if necessary</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">prepend_tuple</span><span class="p">:</span> <span class="k">return</span> <span class="n">retval</span>
        <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">prepend_tuple</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="n">retval</span><span class="p">])</span>

    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">exception_wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kargs</span><span class="p">):</span>
            <span class="k">global</span> <span class="n">error_string</span>

            <span class="n">error_string</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kargs</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">dbus</span><span class="o">.</span><span class="n">DBusException</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
                <span class="c1"># Check known DBus Exceptions first</span>
                <span class="k">if</span> <span class="n">_nm_dbus_exception</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="s2">&#34;ServiceUnknown&#34;</span><span class="p">):</span>
                    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tuplize</span><span class="p">(</span><span class="n">RET_SERVICE_NOT_RUNNING</span><span class="p">)</span>

                <span class="c1"># Unknown exceptions (DBus)</span>
                <span class="n">error_string</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="c1"># Includes get_dbus_name</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tuplize</span><span class="p">(</span><span class="n">RET_ERROR</span><span class="p">)</span>
            <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
                <span class="c1"># Unknown exceptions (non-DBus)</span>
                <span class="n">error_string</span> <span class="o">=</span> <span class="nb">repr</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tuplize</span><span class="p">(</span><span class="n">RET_ERROR</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">exception_wrapped</span>
</code></pre></div>]]></content:encoded></item><item><title>Two reasons Apple suck</title><link>https://lutzky.net/2007/09/16/two-reasons-apple-suck/</link><pubDate>Sun, 16 Sep 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/09/16/two-reasons-apple-suck/</guid><description>First of all, new iPods won&amp;rsquo;t work on Linux. Now, while it&amp;rsquo;s very obvious that the idea is to block competition against other music vendors, that makes it even less legitimate. Good thing we&amp;rsquo;re starting to see some very nice cheap players out there - I&amp;rsquo;ve been rather impressed with the Meizu M6 MiniPlayer.
Secondly, they didn&amp;rsquo;t think of this: Indexed search within the &amp;ldquo;Open&amp;rdquo; dialog. It&amp;rsquo;s in Ubuntu Gutsy, and really makes desktop search (implemented with Tracker in gutsy) worthwhile.</description><content:encoded><![CDATA[<p>First of all, <a href="http://www.boingboing.net/2007/09/14/new-ipods-reengineer.html">new iPods won&rsquo;t work on
Linux</a>. Now,
while it&rsquo;s very obvious that the idea is to block competition against other
music vendors, that makes it even less legitimate. Good thing we&rsquo;re starting to
see some very nice cheap players out there - I&rsquo;ve been rather impressed with
the <a href="http://en.meizu.com/product_m6.asp">Meizu M6 MiniPlayer</a>.</p>
<p>Secondly, they didn&rsquo;t think of this: <a href="http://www.gnome.org/start/2.20/notes/en/index.html#rnusers-file-management">Indexed search within the &ldquo;Open&rdquo;
dialog</a>.
It&rsquo;s in Ubuntu Gutsy, and really makes desktop search (implemented with Tracker
in gutsy) worthwhile. Especially when attaching files in GMail :)</p>
]]></content:encoded></item><item><title>NaNuchKa</title><link>https://lutzky.net/2007/07/27/nanuchka/</link><pubDate>Fri, 27 Jul 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/07/27/nanuchka/</guid><description>Despite having a critical midterm Sunday, as well as being sick, I could not, and should not have, give up on the NaNuchKa show. Some of the best music I&amp;rsquo;ve ever heard, no doubt, and with the unexpectedly intimate setting, I had the opportunity to get to know the truly incredible Yula after the show. They&amp;rsquo;re playing in Tel-Aviv today, at the Koltura, where I was supposed to&amp;hellip; Fantastic music, at any rate.</description><content:encoded><![CDATA[<p>Despite having a critical midterm Sunday, as well as being sick, I could not,
and should not have, give up on the <a href="http://myspace.com/nanuchka">NaNuchKa</a>
show. Some of the best music I&rsquo;ve ever heard, no doubt, and with the
unexpectedly intimate setting, I had the opportunity to get to know the truly
incredible Yula after the show. They&rsquo;re playing in Tel-Aviv today, at the
Koltura, where I was supposed to&hellip; Fantastic music, at any rate. Keep your
ears open!</p>
]]></content:encoded></item><item><title>Some things make you feel good</title><link>https://lutzky.net/2007/07/23/some-things-make-you-feel-good/</link><pubDate>Mon, 23 Jul 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/07/23/some-things-make-you-feel-good/</guid><description>Some things renew your faith in people, in the time you spend with them. Amazingly small things, considering their grand scope. Making things worse is known to be easy, and rebuilding is one of the hardest things we have to do in life. But sometimes, when things turn out to be completely different than they seem - new perspective is gained, old perspective is found again, and like something out of an old Disney cartoon, kitschy clouds of gloom make way for kitschy rays of sunshine.</description><content:encoded><![CDATA[<p>Some things renew your faith in people, in the time you spend with them.
Amazingly small things, considering their grand scope. Making things worse is
known to be easy, and rebuilding is one of the hardest things we have to do in
life. But sometimes, when things turn out to be completely different than they
seem - new perspective is gained, old perspective is found again, and like
something out of an old Disney cartoon, kitschy clouds of gloom make way for
kitschy rays of sunshine. Complete with the smiling sun and everything. Like
freakin' Roger Rabbit :)</p>
<p>Finally, the story gets the ending it deserves.</p>
<p><img loading="lazy" src="http://imgs.xkcd.com/comics/letting_go.png" alt="Letting Go"  />
</p>
]]></content:encoded></item><item><title>All hail the cow!</title><link>https://lutzky.net/2007/06/07/all-hail-the-cow/</link><pubDate>Thu, 07 Jun 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/06/07/all-hail-the-cow/</guid><description>Silly post about a cow called Paradox.</description><content:encoded><![CDATA[<figure>
  <a href="/2007/06/07/all-hail-the-cow/534994007_ef57770ac3.jpg">
    <img loading="lazy" src="/2007/06/07/all-hail-the-cow/534994007_ef57770ac3.jpg" />
  </a><figcaption><a href="http://www.flickr.com/photos/paradox_the_cow/">Paradox the cow</a></figcaption></figure>
<figure>
  <a href="/2007/06/07/all-hail-the-cow/535038697_9b471a95b1_o.jpg">
    <img loading="lazy" src="/2007/06/07/all-hail-the-cow/535038697_9b471a95b1_o.jpg" />
  </a><figcaption>Another action shot with Paradox</figcaption></figure>
<p>I present to you, the only creature which is more of a celebrity in the
undergrad CS world than I am&hellip; <em>The Cow</em>. (Paradox)</p>
<p><strong>Edit:</strong> Yes, that&rsquo;s me. No, that&rsquo;s not my bass. That&rsquo;s a very good friend&rsquo;s
Fender Fat Stratocaster. So smooooth&hellip;</p>
<p><strong>Edit:</strong> Photo by <a href="http://flickr.com/photos/talgoldman">some chum</a> ;)</p>
]]></content:encoded></item><item><title>Some music posted to myspace</title><link>https://lutzky.net/2007/06/02/some-music-posted-to-myspace/</link><pubDate>Sat, 02 Jun 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/06/02/some-music-posted-to-myspace/</guid><description>Recording this morning was excellent! Awesome studio, not expensive at all, and a whole lot of fun. We&amp;rsquo;ve posted one song at our myspace page, and it seems that Lior has found an apt name for the CD (hint) ;)
For those of you who don&amp;rsquo;t want to visit Myspace (can&amp;rsquo;t blame you), here&amp;rsquo;s the song we posted, as well as an extra track (my personal favorite), Falsely Accused.
The deal Falsely Accused I really want to point out the incredible recording studio we used - it&amp;rsquo;s a place called MIXסולידי in Tel Hanania.</description><content:encoded><![CDATA[<p>Recording this morning was excellent! Awesome studio, not expensive at all, and
a whole lot of fun. We&rsquo;ve posted one song at <a href="http://myspace.com/switchblade777">our myspace
page</a>, and it seems that Lior has found an
apt name for the CD (hint) ;)</p>
<p>For those of you who don&rsquo;t want to visit Myspace (can&rsquo;t blame you), here&rsquo;s the
song we posted, as well as an extra track (my personal favorite), Falsely
Accused.</p>
<ul>
<li><a href="/2007/06/02/some-music-posted-to-myspace/Switchblade%20-%20Old%20School%20Daze%20-%2002%20-%20The%20Deal.mp3">The deal</a></li>
<li><a href="/2007/06/02/some-music-posted-to-myspace/Switchblade%20-%20Old%20School%20Daze%20-%2006%20-%20Falsely%20Accused.mp3">Falsely Accused</a></li>
</ul>
<p>I really want to point out the <strong>incredible</strong> recording studio we used - it&rsquo;s a
place called MIXסולידי in Tel Hanania. The man charged us very little, and the
equipment and space are excellent. As you can probably tell, those are just
demo recordings - recorded &ldquo;live&rdquo;, with plenty of mistakes, and with very
minimal balance and sound tweaking. We&rsquo;ll definitely be going back there to
record a more serious version.</p>
]]></content:encoded></item><item><title>Some band stuff</title><link>https://lutzky.net/2007/05/31/some-band-stuff/</link><pubDate>Thu, 31 May 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/05/31/some-band-stuff/</guid><description>This Saturday we&amp;rsquo;re going to record our material, and hopefully a cover we&amp;rsquo;ve been working on - Venom&amp;rsquo;s excellent &amp;ldquo;School Daze&amp;rdquo;. We took some photos yesterday, visible here: http://www.myspace.com/switchblade777/photos/albums/my-photos/8265381
We have a show at the Koltura Club on July 12th.2
Link modified to accomodate mists of time.&amp;#160;&amp;#x21a9;&amp;#xfe0e;
Poster lost in the mists of time, show ended up being cancelled at the last moment.&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description><content:encoded><![CDATA[<p>This Saturday we&rsquo;re going to record our material, and hopefully a cover we&rsquo;ve
been working on - Venom&rsquo;s excellent &ldquo;School Daze&rdquo;. We took some photos
yesterday, visible here:
<a href="http://www.myspace.com/switchblade777/photos/albums/my-photos/826538">http://www.myspace.com/switchblade777/photos/albums/my-photos/826538</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>We have a show at the Koltura Club on July 12th.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Link modified to accomodate mists of time.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Poster lost in the mists of time, show ended up being cancelled at the last moment.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><title>Myspace sucks</title><link>https://lutzky.net/2007/05/17/myspace-sucks/</link><pubDate>Thu, 17 May 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/05/17/myspace-sucks/</guid><description>Life is good, for the most part. And as a technology enthusiast, there are many new and cool things to see online. For example, there&amp;rsquo;s the new Schools site, part of the Vaya project which helps Israeli schools use Linux; this site uses the up-and-coming Lahak CMS, built on the Django framework, and looks very promising to the eyes of the bidi-lingual webmaster.
However, some things just plain suck. One of them is myspace; today, in an attempt to make it more legible, I found that My Band&amp;rsquo;s Page implements all of its styling changes by a &amp;ldquo;style&amp;rdquo; tag hidden within the &amp;ldquo;Members&amp;rdquo; text block.</description><content:encoded><![CDATA[<p>Life is good, for the most part. And as a technology enthusiast, there are many
new and cool things to see online. For example, there&rsquo;s the new
<a href="http://schools.whatsup.org.il">Schools</a> site, part of the Vaya project which
helps Israeli schools use Linux; this site uses the up-and-coming
<a href="http://lahak.python-hosting.com">Lahak</a> CMS, built on the Django framework,
and looks very promising to the eyes of the bidi-lingual webmaster.</p>
<p>However, some things just plain suck. One of them is myspace; today, in an
attempt to make it more legible, I found that <a href="http://myspace.com/switchblade777">My Band&rsquo;s
Page</a> implements all of its styling changes
by a &ldquo;style&rdquo; tag hidden within the &ldquo;Members&rdquo; text block. Myspace doesn&rsquo;t filter
this out - nor does it provide any other means of changing the styling. This,
combined with myspace&rsquo;s horrid administration interface, makes editing
incredible unwieldy. I&rsquo;m considering opening another Wordpress site for the
band here on this server&hellip;</p>
<p>And on that topic - Wordpress 2.2 is out. Shinier. Faster. Built-in support for
sidebar modules. And K2 broke :(. I love K2&hellip; Even though now that sidebars
are implemented, the only thing I really need is a very simple template that
allows me an ordinary, rectangular logo. <strong>Update:</strong> I didn&rsquo;t even notice, but
the excellent K2 guys released a fix. However, it seems that when you copy the
plugin they created directly, it inadvertantly adds a space to the end of the
file - and PHP proceeds to barf. Hard to believe people still use this junk to
develop websites&hellip; They should use <a href="http://railsenvy.com">other junk</a>.</p>
]]></content:encoded></item><item><title>On the matter of a really long vacation</title><link>https://lutzky.net/2007/04/24/on-the-matter-of-a-really-long-vacation/</link><pubDate>Tue, 24 Apr 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/04/24/on-the-matter-of-a-really-long-vacation/</guid><description>By now I&amp;rsquo;ve lost count of how long ago my last class was. The strike has begun immediately after passover, and is certainly beginning to take its toll. For one thing, I have no homework deadlines - a rare situation indeed for the Technion student. Furthermore, contemplations are rising about whether or not this coming summer semester will be held, as the current semester will most likely leak into it. This is of special interest to me, as I&amp;rsquo;m behind on my degree, which is problematic because of my military scholarship.</description><content:encoded><![CDATA[<p>By now I&rsquo;ve lost count of how long ago my last class was. The strike has begun
immediately after passover, and is certainly beginning to take its toll. For
one thing, I have no homework deadlines - a rare situation indeed for the
Technion student. Furthermore, contemplations are rising about whether or not
this coming summer semester will be held, as the current semester will most
likely leak into it. This is of special interest to me, as I&rsquo;m behind on my
degree, which is problematic because of my military scholarship. This is
shaping up to be the second time in which, while I&rsquo;ve been authorized by the
military to take a summer semester for completion, I am not able to. However,
one cannot trivially dismiss this strike; in a country which is known worldwide
mostly for its technological exports and frequent bloodbaths, one shouldn&rsquo;t
take the matter of tuition lightly.</p>
<p>The vacation was not, however, boring - I got to spend a lot of time with my
lovely girlfriend, a chance to see friends I have not seen in a long time, and
a lot of posts racked up in various forums. The vacation actually expanded far
enough to contain independence day, so I managed to experience the closest
thing to a hangover I&rsquo;d ever had (But that was some great scotch). Actually,
independence day could have been truly superb; the whole thing got me thinking
about what the perfect night out would be: It&rsquo;s obviously best with my
girlfriend. It would probably start with a rock show of sorts, continue with
food and beer, and end in my girlfriend&rsquo;s bed. Better yet - if I&rsquo;m <em>in</em> the
show. Better still - if there&rsquo;s no reason to get up early the following day.</p>
<p>Another item of interest is that I&rsquo;ve joined a band. Hopefully I&rsquo;ll be able to
keep up the 3-hours-on-Saturday rehearsals. It&rsquo;s a &ldquo;Trash Metal&rdquo; band which has
evidently had really bad experience with bass players. Unfortunately, we seem
to have a <a href="http://myspace.com/switchblade777">myspace page</a>. It looks&hellip;
myspaceish. However, I really think the group has potential, as well as
excellent influences. Furthermore, I&rsquo;m an attention whore :D. Hopefully I&rsquo;ll be
able to help influence the band into more of a heavy-metal direction by
harassing them with melodic basslines.</p>
<p>Very little geek news this time, other than the fact that <a href="http://ubuntu.com">Feisty
Fawn</a> is out. My verdict - get it. It&rsquo;s awesome. Period.
Suspend works much better, NetworkManager is now installed by default, a lot of
things have really been polished, and - can you believe it - Sudoku :)! If you
already run Ubuntu, I&rsquo;d advise against using the update manager - it works, but
it takes a long time, and cannot run unattended. Also, a word of caution to
server admins though - sqlite3 is the new default, so if you have sqlite2
databases you&rsquo;ll need to convert them (use the sqlite and sqlite3 binaries to
do this) - otherwise you&rsquo;ll get &ldquo;file is not a database, or is encrypted&rdquo;
errors.</p>
<p>Whew - that&rsquo;s much better. My thoughts have been depleted into the bits and
bytes before you. I&rsquo;ll just <a href="http://gadial.net">plug a friend&rsquo;s blog</a> and hit
the publish button now ;)</p>
]]></content:encoded></item><item><title>Grub menu.lst editor</title><link>https://lutzky.net/2007/04/19/grub-menu-lst-editor/</link><pubDate>Thu, 19 Apr 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/04/19/grub-menu-lst-editor/</guid><description>A lot of people ask me how to change the default operating system booted after installing Linux. The answer they get in Ubuntu&amp;rsquo;s case, &amp;ldquo;Edit /boot/grub/menu.lst, it&amp;rsquo;s self-explanatory&amp;rdquo;, is often unsatisfactory. Attached is the solution :)
Actual script lost in the mists of time&amp;hellip;
Download the file, open a terminal, and run gksudo python grubmenu.py
I&amp;rsquo;ll try and make a package of this soon, so it becomes a menu entry and that much easier to use.</description><content:encoded><![CDATA[<p>A lot of people ask me how to change the default operating system booted after
installing Linux. The answer they get in Ubuntu&rsquo;s case, &ldquo;Edit
<code>/boot/grub/menu.lst</code>, it&rsquo;s self-explanatory&rdquo;, is often unsatisfactory.
Attached is the solution :)</p>
<blockquote>
<p>Actual script lost in the mists of time&hellip;</p>
</blockquote>
<p>Download the file, open a terminal, and run <code>gksudo python grubmenu.py</code></p>
<p>I&rsquo;ll try and make a package of this soon, so it becomes a menu entry and that
much easier to use.</p>
]]></content:encoded></item><item><title>Yasmin back up</title><link>https://lutzky.net/2007/04/16/yasmin-back-up/</link><pubDate>Mon, 16 Apr 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/04/16/yasmin-back-up/</guid><description>Why was it down, you ask? Well, it was out here in the lab, because of a shortage of network ports in the server room. From the acpid log:
[Sun Apr 15 18:53:07 2007] received event &amp;quot;button/power PWRF 00000080 00000001&amp;quot;
That is, at 18:53, someone simply pushed the power button. The server promptly closed all processes and properly shut itself down. I&amp;rsquo;ve moved it into the server room now&amp;hellip;</description><content:encoded><![CDATA[<p>Why was it down, you ask? Well, it was out here in the lab, because of a
shortage of network ports in the server room. From the acpid log:</p>
<p><code>[Sun Apr 15 18:53:07 2007] received event &quot;button/power PWRF 00000080 00000001&quot;</code></p>
<p>That is, at 18:53, someone simply pushed the power button. The server promptly
closed all processes and properly shut itself down. I&rsquo;ve moved it into the
server room now&hellip;</p>
]]></content:encoded></item><item><title>IPython</title><link>https://lutzky.net/2007/03/04/ipython/</link><pubDate>Sun, 04 Mar 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/03/04/ipython/</guid><description>The more I use Python, the nicer it becomes. I&amp;rsquo;m currently working on a project for a course, which involves somewhat heavy-duty database and algorithm work. Python is my language of choice for it - let&amp;rsquo;s hope it works out well.
In the meantime, I&amp;rsquo;ve found a really nice python shell called iPython (available in apt) - it adds a bunch of stuff to the python shell which I sorely missed from irb - autocompletion, auto-indentation, and - it seems - adds a whole lot more.</description><content:encoded><![CDATA[<p>The more I use Python, the nicer it becomes. I&rsquo;m currently working on a project
for a course, which involves somewhat heavy-duty database and algorithm work.
Python is my language of choice for it - let&rsquo;s hope it works out well.</p>
<p>In the meantime, I&rsquo;ve found a really nice python shell called iPython
(available in apt) - it adds a bunch of stuff to the python shell which I
sorely missed from irb - autocompletion, auto-indentation, and - it seems -
adds a whole lot more.</p>
<p>Looks like I&rsquo;ll have to check django out as well. I&rsquo;ve been working with Ruby
on Rails for quite a while now (and that&rsquo;s how I got introduced to Ruby in the
first place). Odd as it may be&hellip; do I have a new favorite language?</p>
]]></content:encoded></item><item><title>Using Jabber from within the Technion</title><link>https://lutzky.net/2007/02/27/using-jabber-from-within-the-technion/</link><pubDate>Tue, 27 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/27/using-jabber-from-within-the-technion/</guid><description>A very neat find for those of you who want to use Jabber from within the Technion, but with your client of choice rather than a web-based one: Many Jabber servers, including Google Talk, support using Port 443 over SSL. Since the Technion does not block outbound SSL connections, this will work there as well. Be sure to mark the appropriate &amp;lsquo;Use old SSL protocol&amp;rsquo; option in your jabber client (that&amp;rsquo;s what it&amp;rsquo;s called in gaim and pidgin, at any rate).</description><content:encoded><![CDATA[<p>A very neat find for those of you who want to use Jabber from within the
Technion, but with your client of choice rather than a web-based one: Many
Jabber servers, including Google Talk, support using Port 443 over SSL. Since
the Technion does not block outbound SSL connections, this will work there as
well. Be sure to mark the appropriate &lsquo;Use old SSL protocol&rsquo; option in your
jabber client (that&rsquo;s what it&rsquo;s called in gaim and pidgin, at any rate).</p>
]]></content:encoded></item><item><title>Before reinstalling your server for RAID</title><link>https://lutzky.net/2007/02/26/before-reinstalling-your-server-for-raid/</link><pubDate>Mon, 26 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/26/before-reinstalling-your-server-for-raid/</guid><description>Check that the RAID it supports is actual Raid. My experience today:
Decide that secondary server should gradually become more and more primary Decide that since it has two 160GB hard drives and built-in RAID, we should use that for mirroring Mail (both!) users of the secondary server that it&amp;rsquo;ll be down for rebuilding Set up RAID array from BIOS, clearing all old information Insert installation CD Notice that installation still sees two hard drives Discover that built-in NVRaid is actually software RAID Disable built in RAID in favor of LVM, proceed to reinstall :(</description><content:encoded><![CDATA[<p>Check that the RAID it supports is actual Raid. My experience today:</p>
<ol>
<li>Decide that secondary server should gradually become more and more primary</li>
<li>Decide that since it has two 160GB hard drives and built-in RAID, we should use that for mirroring</li>
<li>Mail (both!) users of the secondary server that it&rsquo;ll be down for rebuilding</li>
<li>Set up RAID array from BIOS, clearing all old information</li>
<li>Insert installation CD</li>
<li>Notice that installation still sees two hard drives</li>
<li>Discover that built-in NVRaid is actually software RAID</li>
<li>Disable built in RAID in favor of LVM, proceed to reinstall :(</li>
</ol>
]]></content:encoded></item><item><title>Bass guitar</title><link>https://lutzky.net/2007/02/25/bass-guitar/</link><pubDate>Sun, 25 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/25/bass-guitar/</guid><description>I brought my Fender Squier Jazz Bass up to my Technion apartment. I hope it won&amp;rsquo;t have too much of an adverse effect on my studying&amp;hellip; playing it (loud) is great for stress, and I&amp;rsquo;m taking a jazz improvisation course next semester.
By the way - if any of you record with one of these, I highly recommend Arour, using a low-pass LADSPA filter. Also, activating both pickups on about 80% does wonders against hum if you connect directly.</description><content:encoded><![CDATA[<p>I brought my Fender Squier Jazz Bass up to my Technion apartment. I hope it
won&rsquo;t have too much of an adverse effect on my studying&hellip; playing it (loud) is
great for stress, and I&rsquo;m taking a jazz improvisation course next semester.</p>
<p>By the way - if any of you record with one of these, I highly recommend
<a href="http://ardour.org">Arour</a>, using a low-pass LADSPA filter. Also, activating
both pickups on about 80% does wonders against hum if you connect directly.</p>
]]></content:encoded></item><item><title>Really liking the whole Python thing</title><link>https://lutzky.net/2007/02/25/really-liking-the-whole-python-thing/</link><pubDate>Sun, 25 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/25/really-liking-the-whole-python-thing/</guid><description>I&amp;rsquo;ve converted my Antigibberish script1 (converts &amp;ldquo;broken hebrew&amp;rdquo; into proper hebrew, useful for sent-offline ICQ messages) to Python&amp;hellip; it&amp;rsquo;s quite a nice language, and the interpreter is FAST! I&amp;rsquo;m really torn between it and Ruby :(
Used to have a copy of antigibberish.py, but it&amp;rsquo;s been lost in the mists of time. It used to do the equivalent of this:
iconv -f utf-8 -t iso8859-1 | iconv -f iso8859-8 -t utf-8 &amp;#160;&amp;#x21a9;&amp;#xfe0e;</description><content:encoded><![CDATA[<p>I&rsquo;ve converted my <em>Antigibberish script</em><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
(converts &ldquo;broken hebrew&rdquo; into proper hebrew, useful for sent-offline ICQ
messages) to Python&hellip; it&rsquo;s quite a nice language, and the interpreter is FAST!
I&rsquo;m really torn between it and Ruby :(</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Used to have a copy of <code>antigibberish.py</code>, but it&rsquo;s been lost in
the mists of time. It used to do the equivalent of this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">iconv -f utf-8 -t iso8859-1 <span class="p">|</span> iconv -f iso8859-8 -t utf-8
</code></pre></div>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></li>
</ol>
</section>
]]></content:encoded></item><item><title>Here's hoping</title><link>https://lutzky.net/2007/02/14/heres-hoping/</link><pubDate>Wed, 14 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/14/heres-hoping/</guid><description>def factor(grade, params = {}) return 100 if params.empty? # Optimistic, eh? case params[:type] when :pass return 55 when :fail return 54 when :root params[:gamma] = 0.5 end grade = grade.to_f return params[:proc].call(grade) if params[:proc] grade *= params[:coefficient] if params[:coefficient] if params[:gamma] grade /= 100 grade **= params[:gamma] grade *= 100 end if params[:offset] grade += params[:offset] end return grade if params[:idnoclip] [ grade, 100 ].min end</description><content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">factor</span><span class="p">(</span><span class="n">grade</span><span class="p">,</span> <span class="n">params</span> <span class="o">=</span> <span class="p">{})</span>
  <span class="k">return</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">params</span><span class="o">.</span><span class="n">empty?</span> <span class="c1"># Optimistic, eh?</span>

  <span class="k">case</span> <span class="n">params</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span>
  <span class="k">when</span> <span class="ss">:pass</span>
    <span class="k">return</span> <span class="mi">55</span>
  <span class="k">when</span> <span class="ss">:fail</span>
    <span class="k">return</span> <span class="mi">54</span>
  <span class="k">when</span> <span class="ss">:root</span>
    <span class="n">params</span><span class="o">[</span><span class="ss">:gamma</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
  <span class="k">end</span>

  <span class="n">grade</span> <span class="o">=</span> <span class="n">grade</span><span class="o">.</span><span class="n">to_f</span>

  <span class="k">return</span> <span class="n">params</span><span class="o">[</span><span class="ss">:proc</span><span class="o">].</span><span class="n">call</span><span class="p">(</span><span class="n">grade</span><span class="p">)</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:proc</span><span class="o">]</span>

  <span class="n">grade</span> <span class="o">*=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:coefficient</span><span class="o">]</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:coefficient</span><span class="o">]</span>

  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:gamma</span><span class="o">]</span>
    <span class="n">grade</span> <span class="o">/=</span> <span class="mi">100</span>
    <span class="n">grade</span> <span class="o">**=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:gamma</span><span class="o">]</span>
    <span class="n">grade</span> <span class="o">*=</span> <span class="mi">100</span>
  <span class="k">end</span>

  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:offset</span><span class="o">]</span>
    <span class="n">grade</span> <span class="o">+=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:offset</span><span class="o">]</span>
  <span class="k">end</span>

  <span class="k">return</span> <span class="n">grade</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:idnoclip</span><span class="o">]</span>
  <span class="o">[</span> <span class="n">grade</span><span class="p">,</span> <span class="mi">100</span> <span class="o">].</span><span class="n">min</span>
<span class="k">end</span>
</code></pre></div>]]></content:encoded></item><item><title>Internet in Haifa Bay Central</title><link>https://lutzky.net/2007/02/10/internet-in-haifa-bay-central/</link><pubDate>Sat, 10 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/10/internet-in-haifa-bay-central/</guid><description>In the Haifa Bay Central bus station (מרכזית המפרץ), it&amp;rsquo;s possible to get an internet connection. HTTPS works automatically, and setting the proxy to proxy.technion.ac.il:8080 works for HTTP. I was unsuccessful in using corkscrew to get SSH connections to tunnel over it as well, but perhaps there is still a way.</description><content:encoded><![CDATA[<p>In the Haifa Bay Central bus station (מרכזית המפרץ), it&rsquo;s possible to get an
internet connection. HTTPS works automatically, and setting the proxy to
<code>proxy.technion.ac.il:8080</code> works for HTTP. I was unsuccessful in using
corkscrew to get SSH connections to tunnel over it as well, but perhaps there
is still a way.</p>
]]></content:encoded></item><item><title>Beautiful ideas</title><link>https://lutzky.net/2007/02/08/beautiful-ideas/</link><pubDate>Thu, 08 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/08/beautiful-ideas/</guid><description>This man has some beautiful design ideas for the Linux desktop.</description><content:encoded>&lt;p>This man has &lt;a href="http://njpatel.blogspot.com/2007/02/while-i-have-your-attention_07.html">some beautiful design ideas&lt;/a> for the Linux desktop.&lt;/p></content:encoded></item><item><title>Why Vista worries me</title><link>https://lutzky.net/2007/02/07/why-vista-worries-me/</link><pubDate>Wed, 07 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/07/why-vista-worries-me/</guid><description>I&amp;rsquo;ve heard the latest Security Now, regarding the debate between Dave Marsh and Peter Guttman on DRM in Windows Vista. While a few good points were made, the major one - in my opinion - was not.
DRM, in a practical sense, is deeply flawed: The idea is to give you your media - say, a WMA piece of music - and a program to play it with - say, Windows Media Player - but encrypt the media.</description><content:encoded><![CDATA[<p>I&rsquo;ve heard <a href="http://www.twit.tv/sn77">the latest Security Now</a>, regarding the
debate between Dave Marsh and Peter Guttman on DRM in Windows Vista. While a
few good points were made, the major one - in my opinion - was not.</p>
<p>DRM, in a practical sense, is deeply flawed: The idea is to give you your
media - say, a WMA piece of music - and a program to play it with - say, Windows
Media Player - but encrypt the media. Now, naturally, Media Player will need
the decryption key for the media, and the idea is that Media Player will verify
that you are allowed to listen to the song, and only then decrypt it - as it is
played.</p>
<p>However, something is clearly wrong here - both the encrypted media and the
decryption key are sitting locally on your computer. It&rsquo;s like giving you a
locked box, as well as a butler (which will live in your house, where you
presumably have a shotgun) with the key, and telling the butler not to open the
box for anyone unauthorized. That is, you can open the Windows Media Player
executable with your favorite hex editor, and dig away for the key. This is, of
course, very complicated to do - but there are advanced ways of finding these
keys, and once they&rsquo;re found - they&rsquo;re out. That&rsquo;s why we keep hearing about
WMA and iTunes' equivalent format being cracked every once in a while, when
they change it. No matter how sophisticated the DRM, you still get both the
locked box and the key. They might build bigger butlers, but we can build
deadlier shotguns. (Sorry for the violent analogy, but DRM kinda does that to
me ;))</p>
<p>So, what can the *AA/Microsoft/Apple/DRM scapegoats inc. do about this? Well,
they could supposedly have Windows recognize that you are trying to view the
Windows Media Player executable, and stop you (I&rsquo;d be surprised if they haven&rsquo;t
done this yet). However, currently you can still, for example, run Linux on the
computer, and use that to view the executable. And if, by some crazy
coincidence, all variants of Linux stop you from viewing the executable - you
can pick your favorite, change the source code so it doesn&rsquo;t, and use that. To
stop you from running whatever unprotected operating system you want, changes
to the hardware must be made.</p>
<p>This is exactly what worries me about Vista. For the first time, we are seeing
major effects like HDMI/HDCP, where the operating system interacts with the
hardware directly to figure out exactly what the user is or isn&rsquo;t allowed to
do. Also, Vista boasts the &ldquo;Trustworthy Computing&rdquo; project, which is all too
reminiscent of &ldquo;Trusted Computing&rdquo; - a project in which, through integrating
protection from the bottom of the hardware (with a TPM, Trusted Platform Module
chip) to the top of the software, the computer verifies that it is only running
authorized operating systems, which run only authorized programs.</p>
<p>Now, the media companies would love this. Say HD-DVD&rsquo;s been completely cracked,
and an alternative, open-source, unprotected player has been released. If your
system is TPM-protected, it simply won&rsquo;t allow this software to run. Your own
compiled applications can be forbidden from running as well, seeing as their
source code just might be the HD-DVD cracking code. Unauthorized operating
systems would, naturally, not be allowed to run.</p>
<p>Now, I&rsquo;m not explicitly blaming Microsoft for this. Fact of the matter is, the
protection they&rsquo;ve built into Vista, although probably (for the reasons I&rsquo;ve
mentioned) insufficient, was required by the media companies in order for
HD-DVD support to be (legally/technically) possible in Vista. Would Microsoft
go so far as to enable the horror scenario I&rsquo;ve pictured above? Probably not.
But I do believe we all need to be aware of the risks, just to be on the safe
side.</p>
]]></content:encoded></item><item><title>I know where waldo is</title><link>https://lutzky.net/2007/02/05/i-know-where-waldo-is/</link><pubDate>Mon, 05 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/05/i-know-where-waldo-is/</guid><description>Well, penny knows. But I have proof she knows&amp;hellip;
http://www.wisdom.weizmann.ac.il/~naor/PUZZLES/waldo.html</description><content:encoded><![CDATA[<p>Well, penny knows. But I have proof she knows&hellip;</p>
<p><a href="http://www.wisdom.weizmann.ac.il/~naor/PUZZLES/waldo.html">http://www.wisdom.weizmann.ac.il/~naor/PUZZLES/waldo.html</a></p>
]]></content:encoded></item><item><title>On Vista</title><link>https://lutzky.net/2007/02/04/on-vista/</link><pubDate>Sun, 04 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/04/on-vista/</guid><description>Everyone knew this was going to be an interesting one to watch. Die-hard Microsoft fans were sure Vista would be the final nail in the Open Source coffin, die-hard Linux fans were sure that the release would be Microsoft&amp;rsquo;s demise. Myself - I&amp;rsquo;m sitting and enjoying the show.
It&amp;rsquo;s always very interesting to show Beryl to non-Linux users. They are almost always highly impressed, and are often completely in shock that Linux is a graphical system - many people still believe Linux is command-line only.</description><content:encoded><![CDATA[<p>Everyone knew this was going to be an interesting one to watch. Die-hard
Microsoft fans were sure Vista would be the final nail in the Open Source
coffin, die-hard Linux fans were sure that the release would be Microsoft&rsquo;s
demise. Myself - I&rsquo;m sitting and enjoying the show.</p>
<p>It&rsquo;s always very interesting to show Beryl to non-Linux users. They are almost
always highly impressed, and are often completely in shock that Linux is a
graphical system - many people still believe Linux is command-line only. But
the funniest thing is that they always seem to care more about useless,
spinning, transparent desktop cubes than, say, security. This holds for Vista&rsquo;s
flashy new graphics, as well - mainstream media seems to be focusing on Vista&rsquo;s
GUI a lot more than they are about its controversial new security features.
Very interesting, keeping in mind that Windows has never been &ldquo;not pretty
enough&rdquo; in consumer&rsquo;s eyes, but rather too unstable or virus-prone.</p>
<p>Controversial security? Yup. And I&rsquo;m not even talking about the actually
controversy-worth topics, like DRM&hellip; I&rsquo;m talking about the system asking if
you&rsquo;re sure you want to set the clock. I&rsquo;ve heard more noise about this than
the fact that all of Vista&rsquo;s new features pale in comparison to 7-year-old OS X
which, incidentally, also &ldquo;asks if you&rsquo;re sure&rdquo; that you want to set the clock.
Nobody complains about that however. Why? In my opinion - it&rsquo;s the password
prompt.</p>
<p>Just as people complained about Windows XP&rsquo;s &ldquo;Fisher-Price&rdquo; theme, they&rsquo;re now
complaining about being treated like little kids. &ldquo;Are you <em>sure</em> you want to
set your clock?&rdquo; - how condescending of the operating system. The reason it
works well in Linux and OS X is that the system phrases the exact same question
completely differently - &ldquo;You are attempting to run &ldquo;system-config-date&rdquo; which
requires administrative privileges&rdquo;. Cryptic, right? I think they changed that
for Ubuntu, too (I&rsquo;m writing this off a Fedora box). But most users won&rsquo;t have
a hard time understanding that this, coupled with the password entry box, means
that the system wants to make sure you are indeed someone allowed to set the
clock. Hell, I believe that most people won&rsquo;t have a problem making the logical
leap from there to &ldquo;hmm, perhaps setting the clock (im)properly can really mess
up my system&rdquo;. Either way, it&rsquo;s much more pleasing than Vista&rsquo;s seemingly
endless, senseless sequences of &ldquo;Are you sure?&rdquo; dialog boxes. A password prompt
like this tells the user - &ldquo;You&rsquo;re opening the hood here, watch your step&rdquo;, the
idea being that the user takes a hint and, realizing he has arrived at a
password-protected part of his system, will indeed watch his proverbial step.</p>
<p>But nobody is going to ditch windows over a couple of dialog boxes. There are
much more interesting reasons to do that - I&rsquo;ve heard of much instability,
inavailability of drivers, confusions in the user interface&hellip; all of the
things that Microsoft worked very hard to get rid of when XP was released,
making Vista look like a step back. But most of all - it&rsquo;s the timing. Vista&rsquo;s
2007 release has given the world time to hear about shiny new Linux
distributions, macs that run all of their old software, indexing services at
least as powerful as Vista&rsquo;s (now that WinFS has gone down the drain), more
advanced graphical &ldquo;shinyness&rdquo; which works on older systems, and the horrors of
DRM (thanks for that one, Sony). With nothing really new to give them, a high
price tag (because it often includes a new computer), and several years of not
being in the habit of buying a new OS, people have very little motivation to
upgrade to Vista.</p>
<p>But I don&rsquo;t think that Microsoft and Windows are going anywhere, anytime soon.
I do think Vista&rsquo;s lost the battle - but to XP. Vista&rsquo;s launch made people
realize how successful XP was as an operating system, and the sheer momentum
will keep people there. If Microsoft locks people out of technologies like
DirectX 10 by making them Vista-only, this will keep people leaking away to OS
X and Linux. But in the immediate future, I don&rsquo;t think any OS will be taking a
serious bite out of the XP userbase.</p>
]]></content:encoded></item><item><title>Courtney Love on Piracy</title><link>https://lutzky.net/2007/02/02/courtney-love-on-piracy/</link><pubDate>Fri, 02 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/02/courtney-love-on-piracy/</guid><description>This is absolutely antique (2000), but it&amp;rsquo;s good to hear an artist with a clue.
http://archive.salon.com/tech/feature/2000/06/14/love/print.html</description><content:encoded><![CDATA[<p>This is absolutely antique (2000), but it&rsquo;s good to hear an artist with a clue.</p>
<p><a href="http://archive.salon.com/tech/feature/2000/06/14/love/print.html">http://archive.salon.com/tech/feature/2000/06/14/love/print.html</a></p>
]]></content:encoded></item><item><title>Pmount-hal + cd</title><link>https://lutzky.net/2007/02/01/pmount-hal-cd/</link><pubDate>Thu, 01 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/01/pmount-hal-cd/</guid><description>If you&amp;rsquo;re like me, and don&amp;rsquo;t use Gnome or KDE, then you probably use the pmount or pmount-hal applications to mount removable media. Here&amp;rsquo;s a neat thing to add to your .bash_aliases:
function pmh { pmount-hal $1 UDI=`hal-find-by-property --key block.device --string $1` cd &amp;#34;`hal-get-property --udi $UDI--key volume.mount_point`&amp;#34; }</description><content:encoded><![CDATA[<p>If you&rsquo;re like me, and don&rsquo;t use Gnome or KDE, then you probably use the pmount
or pmount-hal applications to mount removable media. Here&rsquo;s a neat thing to add
to your <code>.bash_aliases</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="k">function</span> pmh <span class="o">{</span>
    pmount-hal <span class="nv">$1</span>
    <span class="nv">UDI</span><span class="o">=</span><span class="sb">`</span>hal-find-by-property --key block.device --string <span class="nv">$1</span><span class="sb">`</span>
    <span class="nb">cd</span> <span class="s2">&#34;`hal-get-property --udi </span><span class="nv">$UDI</span><span class="s2"> --key volume.mount_point`&#34;</span>
<span class="o">}</span>
</code></pre></div>]]></content:encoded></item><item><title>I do NOT kick puppies!</title><link>https://lutzky.net/2007/01/31/i-do-not-kick-puppies/</link><pubDate>Wed, 31 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/31/i-do-not-kick-puppies/</guid><description>I do type mesmerizingly fast, though&amp;hellip; :)
Wanted poster I am told these were scattered around Taub&amp;hellip; I haven&amp;rsquo;t been there to day, but it feels good to be infamous.</description><content:encoded><![CDATA[<p>I do type mesmerizingly fast, though&hellip; :)</p>
<figure>
  <a href="/2007/01/31/i-do-not-kick-puppies/poster.jpg">
    <img loading="lazy" src="/2007/01/31/i-do-not-kick-puppies/poster.jpg" />
  </a><figcaption>Wanted poster</figcaption></figure>
<p>I am told these were scattered around Taub&hellip; I haven&rsquo;t been there to day, but it feels good to be infamous.</p>
]]></content:encoded></item><item><title>I might need these tomorrow...</title><link>https://lutzky.net/2007/01/30/i-might-need-these-tomorrow/</link><pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/30/i-might-need-these-tomorrow/</guid><description>My lecture slides. Have a peek if you like :)
sybilproof Reputation Mechanisms - Seminar</description><content:encoded>&lt;p>My lecture slides. Have a peek if you like :)&lt;/p>
&lt;a href="/2007/01/30/i-might-need-these-tomorrow/sybils.pdf">sybilproof Reputation Mechanisms - Seminar&lt;/a></content:encoded></item><item><title>Samurai Jack - Ingenious!</title><link>https://lutzky.net/2007/01/30/samurai-jack-ingenious/</link><pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/30/samurai-jack-ingenious/</guid><description>When approaching a port, the Scotsman:
You will never find a more wretched hive of scum and villany. And the crab cakes ain&amp;rsquo;t too bad, either!
Later on:
Is it fast? It sure is. But it&amp;rsquo;s gonna cost ya - 10,000 up-front. 10,000? We could buy our own ship for that! But who&amp;rsquo;s gonna sail it? I can. I piloted (some smaller kind of ship) back when I was a kid.</description><content:encoded><![CDATA[<p>When approaching a port, the Scotsman:</p>
<blockquote>
<p>You will never find a more wretched hive of scum and villany. And the crab
cakes ain&rsquo;t too bad, either!</p>
</blockquote>
<p>Later on:</p>
<blockquote>
<ul>
<li>Is it fast?</li>
<li>It sure is. But it&rsquo;s gonna cost ya - 10,000 up-front.</li>
<li>10,000? We could buy our own ship for that!</li>
<li>But who&rsquo;s gonna sail it?</li>
<li>I can. I piloted (some smaller kind of ship) back when I was a kid.</li>
</ul>
</blockquote>
<p>(and if you haven&rsquo;t seen Star Wars, you&rsquo;re just not gonna get it)</p>
]]></content:encoded></item><item><title>3D effects for coders?</title><link>https://lutzky.net/2007/01/25/3d-effects-for-coders/</link><pubDate>Thu, 25 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/25/3d-effects-for-coders/</guid><description>My new work desktop has a GeForce 4 MX, so I naturally installed Beryl on it. The graphics card has relatively little RAM, so it finds handling my 1280x1024 resolution difficult when additional texture memory is needed - so using something like Firefox really slows it down when Beryl is activated, making me keep it off most of the time. However, for coding, I&amp;rsquo;m finding that Beryl is very useful - it actually helps me that the code windows are transparent, so that I can see what&amp;rsquo;s underneath them, and the &amp;ldquo;Expose&amp;rdquo; effect still leaves text legible, which is great for reading off a lot of terminals at once.</description><content:encoded><![CDATA[<p>My new work desktop has a GeForce 4 MX, so I naturally installed Beryl on it.
The graphics card has relatively little RAM, so it finds handling my 1280x1024
resolution difficult when additional texture memory is needed - so using
something like Firefox really slows it down when Beryl is activated, making me
keep it off most of the time. However, for coding, I&rsquo;m finding that Beryl is
very useful - it actually helps me that the code windows are transparent, so
that I can see what&rsquo;s underneath them, and the &ldquo;Expose&rdquo; effect still leaves
text legible, which is great for reading off a lot of terminals at once. So is
Beryl&hellip; a programmer&rsquo;s tool?</p>
]]></content:encoded></item><item><title>Software Perfection - Lost in the details</title><link>https://lutzky.net/2007/01/25/software-perfection-lost-in-the-details/</link><pubDate>Thu, 25 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/25/software-perfection-lost-in-the-details/</guid><description>Sometimes imperfections in Software drive me nuts. It&amp;rsquo;s what drove me away from Windows. It&amp;rsquo;s what keeps me switching back and forth between desktop environments. It&amp;rsquo;s what has me wasting a lot of time getting the software to do what I want, instead of getting anything done. I even have two particularily good examples.
Firefox and Opera are my two favorite browsers. Opera is actually not as good, in my taste, as Firefox.</description><content:encoded><![CDATA[<p>Sometimes imperfections in Software drive me nuts. It&rsquo;s what drove me away from
Windows. It&rsquo;s what keeps me switching back and forth between desktop
environments. It&rsquo;s what has me wasting a lot of time getting the software to do
what I want, instead of getting anything done. I even have two particularily
good examples.</p>
<p>Firefox and Opera are my two favorite browsers. Opera is actually not as good,
in my taste, as Firefox. Firefox&rsquo;s slew of extensions (especially my latest
favorites - <a href="http://del.icio.us/help/firefox/extension">Del.icio.us bookmarks</a>
and <a href="http://www.getfirebug.com/">Firebug</a>), better font handling (on Linux) and
Open-Source nature keep it ahead, if all things were equal. However,  Opera
is much faster on my laptop. <strong>Way</strong> faster. And with the kind of browsing I
usually do - zillions of tabs open and all, that difference counts.</p>
<p>My other good example is LaTeX. I have the <a href="http://latex-beamer.sf.net">Beamer</a>
package, which makes absolutely stunning presentations in my favorite style of
document creation - writing and compiling source code. However, one little
thing drives me nuts about it - the symbols in math mode, even if I set it to
Serif (Beamer uses sans-serif fonts by default), are not the default ones,
which I prefer. For example, the symbol for &ldquo;\in&rdquo; (a member of a set) looks
horrible in my opinion. This tiny little thing had me chasing font preferences
around for half an hour, to no avail.</p>
<p>Graphviz. Ruby on Rails. Networkmanager. Openbox. IVMan. The list goes on&hellip;
almost every piece of software I use has a little imperfection - not
necessarily a bug, usually a missing features - that drives me crazy. Maybe I
should quit my degree so I have time to fix all of those?</p>
]]></content:encoded></item><item><title>Waiting for the bus</title><link>https://lutzky.net/2007/01/25/waiting-for-the-bus/</link><pubDate>Thu, 25 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/25/waiting-for-the-bus/</guid><description>I&amp;rsquo;m going home for the weekend, as usual. Unfortunately, the first bus of my route comes by at highly unpredictable times - I&amp;rsquo;ve had it be an hour late on me once. There are plenty of Wi-fi networks around the station - either WPA, WEP or MAC-whitelisted&amp;hellip; fortunately, someone was using the latter long enough for me to catch him with Kismet. Thank you, stranger! :)
It&amp;rsquo;s a sad state of affairs that people go ahead and limit access to their wireless network.</description><content:encoded><![CDATA[<p>I&rsquo;m going home for the weekend, as usual. Unfortunately, the first bus of my
route comes by at highly unpredictable times - I&rsquo;ve had it be an hour late on
me once. There are plenty of Wi-fi networks around the station - either WPA,
WEP or MAC-whitelisted&hellip; fortunately, someone was using the latter long enough
for me to catch him with Kismet. Thank you, stranger! :)</p>
<p>It&rsquo;s a sad state of affairs that people go ahead and limit access to their
wireless network. I keep mine wide open - מי שאוכל לבד, מת לבד.</p>
]]></content:encoded></item><item><title>Alright, American Dad!</title><link>https://lutzky.net/2007/01/23/alright-american-dad/</link><pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/23/alright-american-dad/</guid><description>Just finished downloading an episode of American Dad off Bittorrent. TV has ancient episodes of Family Guy. Took about an hour though&amp;hellip; I tells ya, I&amp;rsquo;d pay for this kind of service if it were faster&amp;hellip; ;)</description><content:encoded><![CDATA[<p>Just finished downloading an episode of American Dad off Bittorrent. TV has
ancient episodes of Family Guy. Took about an hour though&hellip; I tells ya, I&rsquo;d
pay for this kind of service if it were faster&hellip; ;)</p>
]]></content:encoded></item><item><title>As for Python</title><link>https://lutzky.net/2007/01/23/as-for-python/</link><pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/23/as-for-python/</guid><description>Myself, I&amp;rsquo;m a Ruby hacker. I send everyone within earshot to TryRuby, code my sites using Rails, am surprised that I&amp;rsquo;m using a php-based blog&amp;hellip; you get the picture. Ruby is sometimes called the Japanese Python, and comparisons are inevitable. I know very little about Python, but I do know that&amp;hellip;
It has a larger community More GUI applications are written in it More bindings are available for it Its interpreter is much faster Not a far inferior language Ruby certainly does have its advantages over it - trivial class expansion, extremely concise syntax, seemingly better-suited for heavy usage of closures, and Matz.</description><content:encoded><![CDATA[<p>Myself, I&rsquo;m a Ruby hacker. I send everyone within earshot to
<a href="http://tryruby.hobix.com">TryRuby</a>, code my sites using Rails, am surprised
that I&rsquo;m using a php-based blog&hellip; you get the picture. Ruby is sometimes
called the Japanese Python, and comparisons are inevitable. I know very little
about Python, but I do know that&hellip;</p>
<ul>
<li>It has a larger community</li>
<li>More GUI applications are written in it</li>
<li>More bindings are available for it</li>
<li>Its interpreter is much faster</li>
<li>Not a far inferior language</li>
</ul>
<p>Ruby certainly does have its advantages over it - trivial class expansion,
extremely concise syntax, seemingly better-suited for heavy usage of closures,
and Matz. Ya gotta love Matz.</p>
<p>I will be giving Python a try soon&hellip; I love learning new programming
languages. That&rsquo;s why I&rsquo;m taking Programming Languages this coming semester.</p>
]]></content:encoded></item><item><title>Openbox CVS</title><link>https://lutzky.net/2006/08/26/openbox-cvs/</link><pubDate>Sat, 26 Aug 2006 00:00:00 +0000</pubDate><guid>https://lutzky.net/2006/08/26/openbox-cvs/</guid><description>(Hebrew) A bit of excessive geekery</description><content:encoded><![CDATA[<blockquote>
<p>This post is written in Hebrew, which was the blog&rsquo;s language at the time.</p>
</blockquote>
<!-- raw HTML omitted -->
<p>קצת גיקיות יתרה, ברשותכם ;)</p>
<p>התקנתי את הגירסה מ-CVS של מנהל החלונות האהוב עליי, Openbox, לקראת הגרסה המתעתדת לצאת 3.3, ומאוד התרשמתי לטובה:
‏</p>
<ul>
<li>נוספה תמיכה ב-Pango, אז עברית סוף-סוף עובדת כמו שצריך (יש לקמפל עם הדגל with-pango</li>
<li>הפאץ' ל-Split gradients נכנס, מה שנותן ל-Themes ממש יפים לעבוד. מה שכן, הם שינו את שם ההגדרה מ-&ldquo;split&rdquo; ל-&ldquo;splitvertical&rdquo;, אז צריך לשנות את זה בקובץ themerc של כל theme רלוונטי
מצ&quot;ב תמונת-מסך. שמייח :)</li>
</ul>
<p>(Screenshot was saved on Imageshack, and had been deleted)</p>
<p>עריכה: אני רוצה גם לציין לשבח את <a href="https://web.archive.org/web/20061119211209/http://obmenu.sf.net/">Obmenu</a>, תוכנה שמאוד מקלה על עריכת התפריטים של Openbox.</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>אהבתי את שני אלה</title><link>https://lutzky.net/2006/08/15/katyusha-damage_copy/</link><pubDate>Tue, 15 Aug 2006 00:00:00 +0000</pubDate><guid>https://lutzky.net/2006/08/15/katyusha-damage_copy/</guid><description>(Hebrew) Comparative Katyusha damage</description><content:encoded><![CDATA[<blockquote>
<p>This post is written in Hebrew, which was the blog&rsquo;s language at the time. Context: <a href="https://en.wikipedia.org/wiki/2006_Lebanon_War">2006 Lebanon War</a></p>
</blockquote>
<!-- raw HTML omitted -->
<p>החבר&rsquo;ה הטובים ב-lgf מראים - הפלא ופלא - איך בהשוואה בין נזק פגיעות ישירות של קטיושות וטילי אוויר-קרקע ישראליים, <a href="http://littlegreenfootballs.com/weblog/?entry=22100">הקטיושה עושה הרבה יותר נזק</a>.</p>
<p>בנוסף, אל תכנסו לבלוג של אחמדיניג&rsquo;אד עם אקספלורר. <a href="http://olehgirl.blogspot.com/2006/08/pres-ahmadinejad-trying-to-infect.html">זה מסוכן</a>.</p>
<p>מוות לקיצונים ;)</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>בושה וחרפה למרצ</title><link>https://lutzky.net/2006/08/15/shame-on-meretz_copy/</link><pubDate>Tue, 15 Aug 2006 00:00:00 +0000</pubDate><guid>https://lutzky.net/2006/08/15/shame-on-meretz_copy/</guid><description>(Hebrew) Shame on Meretz</description><content:encoded><![CDATA[<blockquote>
<p>This post is written in Hebrew, which was the blog&rsquo;s language at the time.</p>
</blockquote>
<!-- raw HTML omitted -->
<p><a href="http://www.ynet.co.il/articles/0,7340,L-3291668,00.html">מרצ מציעה: להוציא את שיתוף הקבצים אל מחוץ לחוק</a>. הכותרת אולי נשמעת מטעה, יחשוב לו הקורא התמים - הרי וודאי וּוודאי שלמרץ אין בעיה עם שיתוף קבצים באופן כללי, וכמובן שהמאבק שלהם מרוסן לעניין עבירות בנושא קניין רוחני. אך לא ולא - הסעיף הרביעי בהצעת החוק שלהם מוציא מחוץ לחוק תוכנות ושירותים לשיתוף קבצים. בכלל. זה שמאל זה? זו פרימיטיוויוּת מחשבתית חמורה ממה שאנחנו רואים מה-RIAA.</p>
<p>לזכותם יאמר כי הם תומכים בפתרון בדמות מיסוי של הגולשים - אבל עושה רושם שהם ממהרים לוותר בחזית זו. אכזבה עמוקה ממפלגה שראיתי בה סיכוי לרפורמה ב&quot;קניין רוחני&quot; ותמיכה בתוכנה חופשית.</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>המצב של פלאש בלינוקס</title><link>https://lutzky.net/2006/08/14/flash-in-linux_copy/</link><pubDate>Mon, 14 Aug 2006 00:00:00 +0000</pubDate><guid>https://lutzky.net/2006/08/14/flash-in-linux_copy/</guid><description>(Hebrew) The absolute state of Flash in Linux</description><content:encoded><![CDATA[<blockquote>
<p>This post is written in Hebrew, which was the blog&rsquo;s language at the time.</p>
</blockquote>
<!-- raw HTML omitted -->
<p>בהתחלה פלאש היה משהו קטן וחמוד. השתמשתי בו בכיתה ו' בשביל &ldquo;פרוייקט סיום&rdquo; על גלגולי אנרגייה, בעוד שאחרים הכינו מכשירים שלא היו מביישים את The Incredible Machine. זה המשיך בכל מיני משחקים קטנים באתר של Shockwave. לאט לאט זה הפך למעצבן, כשאנשים החליטו ש-HTML זה סתם כמה טאגים ששמים כדי שהדפדפן יציג את הפלאש שהוא בעצם האתר. או לחילופין, החליטו שפלאש זה אחלה מדיום לפרסומות, מה שהוביל להופעת AdBlock.</p>
<p>אבל בזמן האחרון עושה רושם שסוף-סוף מצאו את הייעוד האמיתי של פלאש - סרטוני ווידאו היתוליים. והגרסה האחרונה של פלאש עושה את זה נהדר - באמצעות Codec קנייני חדש ומתוחכם, הסרטים יורדים חיש-קל. הביצועים טובים, העומס על המערכת מינימלי&hellip; בקיצור - כולם נהנים.</p>
<p>אבל לא לכולם יש את הגרסא האחרונה הזו. לא לכולם אפילו יש את גרסה 8. משתמשי לינוקס תקועים עם גרסה 7 - וגרסה גרועה של גרסה 7. כל אובייקט פלאש תופס ה-מ-ו-ן משאבי מערכת. הם עובדים לאט, הסאונד לא מסונכרן (אלא אם משתמשים ב-aoss, מה שמוסיף לפגוע ביציבות), וה-Codec החדש והנפלא הזה - שכחו ממנו. באתרי הווידאו שבכל זאת דואגים לתמוך בפלאש 7 אפשר לראות את הסרטים יורדים לאט-לאט. ב-Youtube, למעשה, אפילו את זה אי אפשר לראות - צריך לנחש מתי הסרט סיים לרדת.</p>
<p>גרוע מכך, Adobe (הבעלים החדשים של פלאש) כל פעם אומרים ש&quot;הגרסה החדשה ללינוקס יוצאת בקרוב&quot;. כך הם אמרו בפלאש 8. כשלא יצא, אמרו שיהיה 8.5. עכשיו הם אומרים את אותו הדבר ב-9. כרגע תאריך היעד המפורסם הוא &ldquo;מוקדם ב-2007&rdquo;, והם אפילו טרחו להעלות בלוג של אחד מהמפתחים.</p>
<p>מעניין מאוד מה שהולך בבלוג הזה, אגב - הם אומרים שהם עובדים נורא קשה על לגרום לתאימות עם מצלמות ווידאו בלינוקס, ולוודא שכמה שיותר מצלמות עובדות. עכשיו, תגידו לי - מישהו כאן אי פעם ראה סרטון פלאש שאשכרה משתמש במצלמת ווידאו? איפהשהו? שימו לינק בתגובות. גרוע מכך - הם אומרים שכרגע הם לא משחררים גרסת בטא כי למרות שהסאונד מסונכרן פרפקט ו-Youtube עובד די טוב, עדיין יש הרבה בעיות יציבות. אז יש לי חדשות בשבילכם חברים - גם בגירסה הנוכחית יש המון בעיות יציבות! שחררו את זה מצידי בגירסת &ldquo;סופר-היפר-אלפה-אל-תגעו-יא-חארות&rdquo;!</p>
<p>ורק עוד נקודה אחת. אומרים בפורומים אחרים שזה בעיה של קהילת הקוד הפתוח שלא פיתחנו גרסה משלנו לפלאש. למרבה הצער, פלאש משתמש במספר אלמנטים קנייניים - החשוב ביניהם הוא הקודק החדש של הווידאו. מה לעשות, כאן אנחנו תלויים ב-Adobe.</p>
<p>זהו, יצא הקיטור. בחזרה ל-Youtube. 🙂</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>דווקא היה נחמד, שקט וכאלה</title><link>https://lutzky.net/2006/08/12/nice-and-quiet_copy/</link><pubDate>Sat, 12 Aug 2006 00:00:00 +0000</pubDate><guid>https://lutzky.net/2006/08/12/nice-and-quiet_copy/</guid><description>(Hebrew) Oh but it was nice and quiet. (wartime)</description><content:encoded><![CDATA[<blockquote>
<p>This post is written in Hebrew, which was the blog&rsquo;s language at the time. Context: <a href="https://en.wikipedia.org/wiki/2006_Lebanon_War">2006 Lebanon War</a></p>
</blockquote>
<!-- raw HTML omitted -->
<p>ממש שקט. לא שמתי שעון מעורר, כי סמכתי על הנסראללה המעורר. בכלל, הישוב שלי מחובר לאזעקות של כל הארץ (כי הוא באמצע שום מקום) אז אנחנו מקבלים גם אזעקות של קרית שמונה.</p>
<p>כבר היה כל כך שקט, שאבא שלי קצת הלך לישון&hellip; ואז אני שומע דרך המזגן אזעקה, צועק &ldquo;אזעקה&rdquo;, ואמא שלי אומרת להיות בשקט כי אבא ישן&hellip;</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>החבוב עם הקסדה הירוקה - עכשיו הבלוג</title><link>https://lutzky.net/2006/08/11/green-helmet-guy/</link><pubDate>Fri, 11 Aug 2006 00:00:00 +0000</pubDate><guid>https://lutzky.net/2006/08/11/green-helmet-guy/</guid><description>(Hebrew) The green helmet guy - now with his own blog.</description><content:encoded><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>כולנו ראינו אותו בטלוויזיה ובתמונות. קראנו את הכתבות, ראינו את הצילומים של איך שהוא מוריד את הגופות מהאמבולנס כדי שיצלמו שוב, עם פוקוס יותר טוב ובלי שאנשים יסתירו. איך במשך שעות הוא סוחב אותה גופה הלוך ושוב בשביל המצלמות. ושאיכשהו הוא תמיד מצליח להגיע לכל זירה מצולמת.</p>
<p>ועכשיו יש לו <a href="http://greenhelmetguy.blogspot.com/">בלוג משלו</a>! 🙂</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>מקליטים בומים</title><link>https://lutzky.net/2006/08/11/recording-booms_copy/</link><pubDate>Fri, 11 Aug 2006 00:00:00 +0000</pubDate><guid>https://lutzky.net/2006/08/11/recording-booms_copy/</guid><description>(Hebrew) Loudness fight - artillery vs bass guitar</description><content:encoded><![CDATA[<blockquote>
<p>This post is written in Hebrew, which was the blog&rsquo;s language at the time.</p>
</blockquote>
<!-- raw HTML omitted -->
<p>מלחמה. נסראללה שולח עלינו בומים. אנחנו שולחים עליו בומים (כל 10 שניות יציאה שלנו אתמול בלילה, והתריסים רועדים). ואני בבית, עושה בומים משלי. זה לא כמו לנגן עם חברים, זה לא כמו להופיע, אבל לפחות סוף סוף גיליתי איך לגרום לזה להישמע נורמאלי.</p>
<p>הציוד - בס ג’אז של סקוייר. אדום. כבל LP - גם אדום. מקטין LP ולפטופ.</p>
<p>התוכנה - <a href="http://ardour.org">Ardour</a>, יחד עם כמה פלאגינים של LADSPA.</p>
<p>אז מה שגיליתי זה ככה -</p>
<ul>
<li>להפעיל את שני הפיקאפים על אותו ווליום, ושלא יהיה עד הסוף. ככה הם מבטלים את ההמהום.</li>
<li>להשתמש ב-lowpass filter כדי לבטל את הרחשים הגבוהים</li>
<li>להשתמש ב-compressor, ולבחור אותו בקפידה. ככה ישמעו את ה-hammer-ons/pull-offs הרבה יותר טוב, ואפשר לנגן חלש או חזק בלי שזה ירד מהסקאלה</li>
</ul>
<p>במסע להוציא את האינפורמציה הזו עליתי על <a href="http://drop-alive.blogspot.com/">אחלה להקה מאיטליה</a>. שווה האזנה.</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>Russian stress mark</title><link>https://lutzky.net/russian-stress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lutzky.net/russian-stress/</guid><description> This is a handy little page for copying the stress mark (acute mark) to clipboard. Useful if your Russian keyboard doesn't support it.
́ function copyIt() { document.getElementById('copyBuffer').select(); document.execCommand('copy'); } Copy</description><content:encoded><![CDATA[
<p>This is a handy little page for copying the stress mark (acute mark) to clipboard. Useful if your Russian
    keyboard doesn't support it.</p>
<textarea id="copyBuffer">́</textarea>

<script>
    function copyIt() {
        document.getElementById('copyBuffer').select();
        document.execCommand('copy');
    }                                                                                   
</script>

<button onClick="copyIt()">Copy</button>]]></content:encoded></item></channel></rss>