<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>c - Tag - Shallow and Pedantic</title><link>https://lutzky.net/tags/c/</link><description>c - Tag - Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>lutzky@gmail.com (Ohad Lutzky)</managingEditor><webMaster>lutzky@gmail.com (Ohad Lutzky)</webMaster><lastBuildDate>Wed, 15 May 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/tags/c/" rel="self" type="application/rss+xml"/><item><title>Multiple library versions</title><link>https://lutzky.net/posts/multiple-library-versions/</link><pubDate>Wed, 15 May 2013 00:00:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/posts/multiple-library-versions/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>Working with vendor code in C can get very tricky, especially when you except breaking changes to occur. Especially when you have multiple binaries depending on that vendor code, updating at different times, necessitating different live versions. Let&rsquo;s explore.</p>
<h2 id="introduction">Introduction</h2>
<p>Assume you&rsquo;re working with an external vendor, who is providing you with code
for a wonderful function <code>getFoo</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// foo.h version 1.2.3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">getFoo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// foo.c version 1.2.3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">getFoo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// TODO improve performance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="mi">42</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You use this function in many of your products - for example, in your
best-selling <code>barApp</code> application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// barApp.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">getFoo</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>So <code>barApp</code>, and other applications, would want to use a <code>foo</code> library.  It
makes sense to provide this function in a shared library (<code>libfoo.so</code>).
However, this library will change in the future, in several ways:</p>
<ol>
<li>Binary-compatible changes
<ul>
<li>Performance improvements (<code>sleep</code> will be removed)</li>
<li>Additional functionality will become available (new functions)</li>
</ul>
</li>
<li>Binary-incompatibile changes - at the very least, recompilation will be necessary
<ul>
<li>For C, this is usually caused by changes to macros</li>
<li>For C++, a plethora of reasons: Virtual function reimplementation, function
inlining, new private data members&hellip;</li>
</ul>
</li>
<li>Source-incompatible changes - these will require you to change your source
code (in <code>barApp</code>):
<ul>
<li>Functions (which you use) being removed or renamed</li>
<li>Semantic changes - <code>getFoo</code> could return 43</li>
</ul>
</li>
</ol>
<p>This gets even more complicated due to the fact that <code>barApp</code> is an operational,
mission-critical application for your organization. Developers may need to
hotfix older versions of <code>barApp</code>, which use older versions of <code>libfoo</code>. The build
servers and developer boxes will need to be able to have multiple versions of
<code>libfoo</code> installed simultaneously.</p>
<h2 id="compiling-installing-and-using-a-shared-library-properly">Compiling, installing, and using a shared library properly</h2>
<p>First, the upstream vendor should compile <code>libfoo.so</code> with an <code>SONAME</code>, like so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcc -shared -Wl,-soname,libfoo.so.1 -o libfoo.so.1.2.3 foo.c
</span></span><span class="line"><span class="cl">objdump -x libfoo.so.1.2.3 <span class="p">|</span> grep SONAME
</span></span><span class="line"><span class="cl"><span class="c1"># SONAME               libfoo.so.1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The guarantee the upstream vendor should give is this: As long as <code>SONAME</code>
doesn&rsquo;t change, binary compatibility will be retained.</p>
<p>Now, you (or, preferably, your package manager) should install the package on your machine like so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p /usr/include/foo1
</span></span><span class="line"><span class="cl">cp foo.h /usr/include/foo1
</span></span><span class="line"><span class="cl">cp libfoo.so.1.2.3 /usr/lib
</span></span><span class="line"><span class="cl">ldconfig -v <span class="p">|</span> grep libfoo
</span></span><span class="line"><span class="cl"><span class="c1"># libfoo.so.1 -&gt; libfoo.so.1.2.3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, traditionally <em>another</em> symlink <code>libfoo.so</code> -&gt; <code>libfoo.so.1.2.3</code> would be
created, so you could compile <code>barApp</code> with <code>-lfoo</code>. However, here&rsquo;s an
alternative:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcc -I/usr/include/foo1 -l:libfoo.so.1 barApp.c -o barApp
</span></span><span class="line"><span class="cl">ldd barApp
</span></span><span class="line"><span class="cl"><span class="c1"># linux-vdso.so.1 =&gt;  (0x00007fff8edfe000)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># libfoo.so.1 =&gt; /usr/lib/libfoo.so.1 (0x00007fb367cce000)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb367906000)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># /lib64/ld-linux-x86-64.so.2 (0x00007fb367ef2000)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now <code>barApp</code> is compiled, and looks for <code>libfoo.so.1</code> - it will find it thanks
to the symlink created by <code>ldconfig</code>, and use <code>libfoo.so.1.2.3</code>.</p>
<h2 id="aftermath">Aftermath</h2>
<h3 id="binary-compatible-updates">Binary-compatible updates</h3>
<p>Suppose a new, compatible, faster version of <code>libfoo</code> is released - say version
\1.3.0, which has removed that pesky <code>sleep</code>. Well, just place it in <code>/usr/lib</code>
and rerun <code>ldconfig</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cp libfoo.so.1.3.0 /usr/lib
</span></span><span class="line"><span class="cl">ldconfig -v <span class="p">|</span> grep libfoo
</span></span><span class="line"><span class="cl"><span class="c1"># -&gt; libfoo.so.1 -&gt; libfoo.so.1.3.0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The symlink has been updated, and now all applications (<code>barApp</code>, for example)
which were linked against <code>libfoo.so.1</code> will have improved performance.</p>
<h3 id="incompatible-updates">Incompatible updates</h3>
<p>Suppose a new, incompatible version 2.0.0 of <code>libfoo</code> is released, which would
force the newer <code>barApp2.0</code> to be recompiled against the new, different
headers. No problem:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p /usr/include/foo2
</span></span><span class="line"><span class="cl">cp foo.h /usr/include/foo2
</span></span><span class="line"><span class="cl">cp libfoo.so.2.0.0 /usr/lib
</span></span><span class="line"><span class="cl">ldconfig -v <span class="p">|</span> grep libfoo
</span></span><span class="line"><span class="cl"><span class="c1"># -&gt; libfoo.so.2 -&gt; libfoo.so.2.0.0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -&gt; libfoo.so.1 -&gt; libfoo.so.1.3.0</span>
</span></span><span class="line"><span class="cl">gcc -I/usr/include/foo2 -l:libfoo.so.2 barApp2.0.c -o barApp2.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>Both versions of <code>libfoo</code> are installed simultaneously, and do not conflict.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>The <a href="http://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-sharedlibs-runtime" target="_blank" rel="noopener noreffer ">Debian policy guide</a> states that <code>-dev</code> packages should include
the <code>libfoo.so</code> symlink. However, this would cause a conflict between the
<code>-dev</code> packages for two different generations of <code>libfoo</code>. I am curious as to
how this problem is solved &ldquo;in the wild&rdquo;, as I&rsquo;m sure Debian have good reasons
for suggesting this.</p>
]]></description></item><item><title>Faster Languages</title><link>https://lutzky.net/posts/faster-languages/</link><pubDate>Wed, 16 Apr 2008 00:49:00 +0000</pubDate><author>Ohad Lutzky</author><guid>https://lutzky.net/posts/faster-languages/</guid><description><![CDATA[<p>Due to an exercise in an AI course, I&rsquo;m forced to confront an old nemesis -
C++. Part of the reason is that the exercise contains a time-limited
tournament, and the code needs to run very quickly. Another reason is, I guess,
the fact that C++ serves as a sort of lowest common denominator in the course
(which used, by the way, to be taught in LISP, along with the language).</p>
<p>I never liked C++ language much. As a matter of fact, I prefer C. I&rsquo;ve been
going over some old code for a project, which needed to use DBus to talk to
NetworkManager. <a href="/2007/09/16/exception-handling-decorators-and-python/" rel="">Back then</a> I wrote it using Python, embedded in C - it
seemed easier at the time, due to lack of documentation. After hunting around,
I figured out how to do most of the stuff I wanted in C, using DBus&rsquo;s GLib API.</p>
<p>In this process, the most helpful bit of documentation turned out to be GLib&rsquo;s.
GLib looks like a wonderful library to get big-program stuff done relatively
nicely in C, without mucking about in C++. Exception handling (of sorts),
object-oriented programming (of sorts) as well as garbage collection (of sorts)
are implemented in a usable way, and extremely well-documented.</p>
<p>At the end of the day, I was able to turn this Python gem:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dbus</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_nm_device_interface</span><span class="p">(</span><span class="n">dev_object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Returns an interface to the device object dev_object&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dbus</span><span class="o">.</span><span class="n">Interface</span><span class="p">(</span><span class="n">dev_object</span><span class="p">,</span> <span class="n">NM_DEVICE_IFACE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_nm_get_object</span><span class="p">(</span><span class="n">object_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Returns an object with the given object path using the NM service&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dbus</span><span class="o">.</span><span class="n">SystemBus</span><span class="p">()</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">NM_SERVICE</span><span class="p">,</span> <span class="n">object_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_nm</span><span class="p">():</span> <span class="k">return</span> <span class="n">_nm_get_object</span><span class="p">(</span><span class="n">NM_OBJECT_PATH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_nm_dbus_exception</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">guessed_exception</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Checks if the DBus exception e is (exactly) of type guessed_exception&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">get_dbus_name</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="n">guessed_exception</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># If it doesn&#39;t have a get_dbus_name, it probably isn&#39;t the DBus</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># exception we&#39;re looking for.</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_nm_all_device_interfaces</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a list of interfaces to all devices NM sees&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[</span> <span class="n">_nm_device_interface</span><span class="p">(</span><span class="n">_nm_get_object</span><span class="p">(</span><span class="n">devicename</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="n">devicename</span> <span class="ow">in</span> <span class="n">_nm</span><span class="p">()</span><span class="o">.</span><span class="n">getDevices</span><span class="p">()</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">dbus</span><span class="o">.</span><span class="n">DBusException</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">_nm_dbus_exception</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="s2">&#34;NoDevices&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">[]</span> <span class="c1"># No devices means list of devices is empty</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span> <span class="k">raise</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>&hellip;into this C gem:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#define DBUS_SERVICE_NM &#34;org.freedesktop.NetworkManager&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define DBUS_PATH_NM &#34;/org/freedesktop/NetworkManager&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define DBUS_INTERFACE_NM &#34;org.freedesktop.NetworkManager&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define NM_ERR_NODEVICES &#34;org.freedesktop.NetworkManager.NoDevices&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">gboolean</span> <span class="nf">is_remote_dbus_exception</span><span class="p">(</span><span class="n">GError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">exception_name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">g_assert</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="o">-&gt;</span><span class="n">domain</span> <span class="o">!=</span> <span class="n">DBUS_GERROR</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">                        <span class="n">error</span><span class="o">-&gt;</span><span class="n">code</span> <span class="o">!=</span> <span class="n">DBUS_GERROR_REMOTE_EXCEPTION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">exception_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">dbus_g_error_get_name</span><span class="p">(</span><span class="n">error</span><span class="p">),</span> <span class="n">exception_name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">GPtrArray</span> <span class="o">*</span> <span class="nf">get_nm_devices</span><span class="p">(</span><span class="n">DBusGConnection</span> <span class="o">*</span><span class="n">connection</span><span class="p">,</span> <span class="n">GError</span> <span class="o">**</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">GError</span> <span class="o">*</span><span class="n">tmp_error</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DBusGProxy</span> <span class="o">*</span><span class="n">proxy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">GPtrArray</span> <span class="o">*</span><span class="n">ptr_array</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">g_return_val_if_fail</span><span class="p">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">proxy</span> <span class="o">=</span> <span class="n">dbus_g_proxy_new_for_name</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">connection</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">DBUS_SERVICE_NM</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">DBUS_PATH_NM</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">DBUS_INTERFACE_NM</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">dbus_g_proxy_call</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s">&#34;getDevices&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp_error</span><span class="p">,</span> <span class="n">G_TYPE_INVALID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">dbus_g_type_get_collection</span><span class="p">(</span><span class="s">&#34;GPtrArray&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">DBUS_TYPE_G_PROXY</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">ptr_array</span><span class="p">,</span> <span class="n">G_TYPE_INVALID</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">tmp_error</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">is_remote_dbus_exception</span><span class="p">(</span><span class="n">tmp_error</span><span class="p">,</span> <span class="n">NM_ERR_NODEVICES</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">g_error_free</span><span class="p">(</span><span class="n">tmp_error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">g_propagate_error</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">tmp_error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">g_object_unref</span><span class="p">(</span><span class="n">proxy</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ptr_array</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The C code runs much faster, and I suspect is more maintainable then its
original counterpart (which uses embedded python in C).</p>
]]></description></item></channel></rss>