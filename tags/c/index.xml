<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c on Shallow and Pedantic</title><link>https://lutzky.net/tags/c/</link><description>Recent content in c on Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 May 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Multiple library versions</title><link>https://lutzky.net/2013/05/15/multiple-library-versions/</link><pubDate>Wed, 15 May 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/05/15/multiple-library-versions/</guid><description>Working with vendor code in C can get very tricky, especially when you except breaking changes to occur. Especially when you have multiple binaries depending on that vendor code, updating at different times, necessitating different live versions. Let&amp;rsquo;s explore.
Introduction Assume you&amp;rsquo;re working with an external vendor, who is providing you with code for a wonderful function getFoo:
// foo.h version 1.2.3 int getFoo(); // foo.c version 1.2.3 int getFoo() { sleep(1000); // TODO improve performance return 42 } You use this function in many of your products - for example, in your best-selling barApp application:</description></item><item><title>Faster Languages</title><link>https://lutzky.net/2008/04/16/faster-languages/</link><pubDate>Wed, 16 Apr 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/04/16/faster-languages/</guid><description>Due to an exercise in an AI course, I&amp;rsquo;m forced to confront an old nemesis - C++. Part of the reason is that the exercise contains a time-limited tournament, and the code needs to run very quickly. Another reason is, I guess, the fact that C++ serves as a sort of lowest common denominator in the course (which used, by the way, to be taught in LISP, along with the language).</description></item></channel></rss>