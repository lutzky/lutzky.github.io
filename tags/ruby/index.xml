<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on Shallow and Pedantic</title><link>https://lutzky.net/tags/ruby/</link><description>Recent content in ruby on Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Oct 2008 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Delegating methods in Ruby</title><link>https://lutzky.net/2008/10/18/delegating-methods-in-ruby/</link><pubDate>Sat, 18 Oct 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/10/18/delegating-methods-in-ruby/</guid><description>Sometimes, when constructing a compound object, we are interested in exporting functionality while retaining encapsulation. For example, suppose we have a Secretary class:
class Secretary def send_fax(destination, fax_contents) puts &amp;#39;Sending fax &amp;#34;%s&amp;#34; to %s&amp;#39; % [fax_contents, destination] end def answer_call(call) # ... end # ... end Our Secretary provides a lot of useful functionality, that our Boss class would like to have. Boss would like to be able to say that he can send a fax, without having the user explicitly request his Secretary beforehand.</description></item><item><title>Three things I didn't know Ruby does</title><link>https://lutzky.net/2008/07/25/three-things-i-didnt-know-ruby-does/</link><pubDate>Fri, 25 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/25/three-things-i-didnt-know-ruby-does/</guid><description>Edit: I was misled!
Illustrated here. Hints below.
&amp;gt;&amp;gt; def inspect_x_and_y(x,y); puts &amp;quot;x: %p, y: %p&amp;quot; % [x, y]; end =&amp;gt; nil &amp;gt;&amp;gt; inspect_x_and_y(y={&amp;quot;hello&amp;quot; =&amp;gt; &amp;quot;world&amp;quot;},x=[1,2,3]) x: {&amp;quot;hello&amp;quot;=&amp;gt;&amp;quot;world&amp;quot;}, y: [1, 2, 3] The bits I didn&amp;rsquo;t know about:
&amp;quot;Format strings using a %% sign, %s, %s!&amp;quot; % [ &amp;quot;just like in python&amp;quot;, &amp;quot;but with arrays&amp;quot; ] The %p formatting character is the same as inspect. You can call methods with method_name(param2=val2, param1=val1), also like in python.</description></item><item><title>Gettext oddities with Ruby</title><link>https://lutzky.net/2008/07/20/gettext-oddities-with-ruby/</link><pubDate>Sun, 20 Jul 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/07/20/gettext-oddities-with-ruby/</guid><description>I was having a lot of trouble with gettext in Ruby, mostly due to lacking documentation. Here are some useful things I figured out while writing TTime. I ended up having a single gettext_settings.rb, included from every file which uses gettext. Here it is (with some extra notes)
#!/usr/bin/ruby begin require &amp;#39;gettext&amp;#39; require &amp;#39;pathname&amp;#39; include GetText # This fixes a swarm of problems on Windows GetText.locale.charset = &amp;#34;UTF-8&amp;#34; # Ruby&amp;#39;s gettext acts in a sane # method - add a path to the set of paths # scanned.</description></item></channel></rss>