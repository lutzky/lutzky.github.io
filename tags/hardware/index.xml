<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Hardware - Tag - Shallow and Pedantic</title><link>https://lutzky.net/tags/hardware/</link><description>Hardware - Tag - Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/tags/hardware/" rel="self" type="application/rss+xml"/><item><title>Front Door Display</title><link>https://lutzky.net/posts/front-door-display/</link><pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/front-door-display/</guid><description><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Let&rsquo;s make a tiny display for stuff you check right before leaving home!</p>
<p>I keep forgetting to turn off my alarm as I leave home, and then scrambling to
turn it off<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Even if I do remember to turn it off, I&rsquo;m
never quite sure that I did, so I take my phone out, open the appropriate app,
and check. It would be super convenient if I had a little indicator near the
door, so I (or anyone else leaving) could check more quickly. A single red LED
would technically do the job&hellip; but wouldn&rsquo;t be wife-approved.</p>
<p>I love <a href="https://lutzky.net/posts/pitemp/#stage-2-pioled" target="_blank" rel="noopener noreffer ">tiny OLED displays</a>. Let&rsquo;s use one of
those! I got an <a href="https://www.aliexpress.com/item/1005004839191268.html" target="_blank" rel="noopener noreffer ">ESP8266 with an onboard OLED display</a>,
and thanks to <a href="https://esphome.io/" target="_blank" rel="noopener noreffer ">ESPhome</a>, having a display of the alarm status is easy
enough. There&rsquo;s still plenty of room on the display, so I figured I can add a
couple of other things I quickly check before leaving home: Weather and tram
times. I used the <a href="https://www.dafont.com/edit-undo.font" target="_blank" rel="noopener noreffer ">Edit Undo font</a> and some <a href="https://fonts.google.com/icons" target="_blank" rel="noopener noreffer ">Material
Icons</a> for a bit of styling. I ended up having to mess with
exact spacing <em>a lot</em> until I was happy with it; it would be super helpful if
there were a simulator like <a href="https://wokwi.com/" target="_blank" rel="noopener noreffer ">wokwi</a> for ESPHome to iterate on this more quickly!</p>
<figure><a class="lightgallery" href="/posts/front-door-display/no-case.png" title="/posts/front-door-display/no-case.png" data-thumbnail="/posts/front-door-display/no-case.png" data-sub-html="<h2>The resulting device without a case</h2>">
        
    </a><figcaption class="image-caption">The resulting device without a case</figcaption>
    </figure>
<p>Next step is to create a case for it. This is necessary both for wife-approval
and for cleaner mounting to the wall. I use <a href="https://onshape.com" target="_blank" rel="noopener noreffer ">Onshape</a> for this, as it&rsquo;s both
free and parametric - that is, I can change numbers later to adjust the design
without fully re-doing it; and if there&rsquo;s one thing I&rsquo;ve learned about designing
for 3D printing, is that it takes a few iterations to get it right: Print, learn
that it <em>almost</em> works, adjust, repeat.</p>
<figure><a class="lightgallery" href="/posts/front-door-display/case-iterations.png" title="/posts/front-door-display/case-iterations.png" data-thumbnail="/posts/front-door-display/case-iterations.png" data-sub-html="<h2>Iterating on the case design in Onshape</h2>">
        
    </a><figcaption class="image-caption">Iterating on the case design in Onshape</figcaption>
    </figure>
<p>With this design, I got some nice <a href="https://www.youtube.com/watch?v=8dhFhU7Nl_0" target="_blank" rel="noopener noreffer ">shadow lines</a>. I had originally planned to
use screws, but it turned out to be fairly annoying: While the PCB does have
holes for mounting screws, there isn&rsquo;t a lot of room for nuts; it ended up being
simpler to make a fully plastic snap-fit design. Snap-fit, especially with 3D
printing, is an even worse source of trial-and-error iterations, as there seems
to be a fine line between &ldquo;doesn&rsquo;t snap&rdquo; and &ldquo;snaps off altogether&rdquo;, especially
with smaller designs.</p>
<p>It doesn&rsquo;t help that I&rsquo;m using a somewhat older Ultimaker 5 printer with PLA
material; I know there are more modern and robust printers, but the Ultimaker 5
is maintained by experts at our maker room, which only allows PLA, and I figured
it should be doable. Thankfully, I was right! I&rsquo;m really happy with the final
result, and it&rsquo;s proving to be at-a-glance useful every day.</p>
<figure><a class="lightgallery" href="/posts/front-door-display/final.png" title="/posts/front-door-display/final.png" data-thumbnail="/posts/front-door-display/final.png" data-sub-html="<h2>Final result</h2>">
        
    </a><figcaption class="image-caption">Final result</figcaption>
    </figure>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The alarm app has added a feature, after I created the device described in this post, to turn it off if any indoors motion is detected at the appropriate time, mostly solving this issue.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description></item><item><title>Newborn parenting software - part 3</title><link>https://lutzky.net/posts/software-parenting-3/</link><pubDate>Sun, 10 Oct 2021 09:00:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/software-parenting-3/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>As noted in the <a href="https://lutzky.net/posts/software-parenting-2/" rel="">previous post</a>, I decided that the implementation is more appropriate for a microcontroller than a full-fledged computer. While the Arduino is probably the best-known microcontroller, the standard one doesn&rsquo;t have wifi (the one with wifi is ~$50). The ESP8266, on the other hand, is a microcontroller chip with wifi capabilities, available<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> on dev boards like the NodeMCU for about $2 apiece - so I bought a few of them. The ESP8266 is sometimes used as a wifi add-on for Arduino, but it&rsquo;s quite capable as a microcontroller on its own (and the newer ESP32 is faster).</p>
<p>So what&rsquo;s the difference between a (very small) computer and a microcontroller? A Raspberry Pi boots off an SD card, usually to a full-fledged Linux operating system; you&rsquo;d operate it either directly with a monitor and keyboard, or connect remotely using SSH. You can install/create software on it as you would on a &ldquo;full-size&rdquo; computer, and I usually do this in Go (although Python is more popular). Conversely, a microcontroller will usually run only one program, which you need to build on a separate computer, connect it over USB to the microcontroller board, and flash it. This has a number of advantages, including simplicity and pretty-much-instant boot.</p>
<p>Coding for the ESP8266 can be done using the same tooling as Arduino - namely, in C++<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, on the Arduino IDE. However, during this project I learned of <a href="https://platformio.org/" target="_blank" rel="noopener noreffer ">PlatformIO</a>, which is far more comfortable to work with: It&rsquo;s integrated into VSCode, and git, auto-formatting, autocomplete and <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim" target="_blank" rel="noopener noreffer ">VIM keybindings</a> all work nicely. It also provides a more organized approach to unit testing (practically absent in Arduino IDE) and per-project dependency management (you can list what each project needs and have it auto-install). This made the project fun enough for a few iterations.</p>
<p>One quirk of working with the BabyBuddy API is that reporting a diaper change requires supplying the time of change, even if our intention is &ldquo;right now&rdquo;. That&rsquo;s easy enough on a Linux system, but microcontrollers don&rsquo;t generally have clocks. Thankfully, libraries such as <a href="https://github.com/mcxiaoke/ESPDateTime" target="_blank" rel="noopener noreffer ">ESPDateTime</a> provide NTP support baked right into your program. At this point, the NodeMCU version worked, and replaced the previous implementation:</p>
<figure><a class="lightgallery" href="/posts/software-parenting-3/feature-poobuttons-v2.jpg" title="/posts/software-parenting-3/feature-poobuttons-v2.jpg" data-thumbnail="/posts/software-parenting-3/feature-poobuttons-v2.jpg" data-sub-html="<h2>Poobuttons v2 - nodeMCU on breadboard</h2>">
        
    </a><figcaption class="image-caption">Poobuttons v2 - nodeMCU on breadboard</figcaption>
    </figure>
<p>Indeed, this version fits neatly onto a single (full-sized) breadboard. It&rsquo;s not quite <a href="https://www.youtube.com/watch?v=PE-_rJqvDhQ" target="_blank" rel="noopener noreffer ">Ben Eater</a> grade, but the NodeMCU is pretty good for breadboard mounting, and using solid-core jumpers let me make it much neater than the previous iteration. However, at this point we realized there was a missing feature: We were never quite sure if we had pressed the button, especially if we were performing a diaper change together<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> . A couple of LEDs can only convey so much information.</p>
<p>I decided to repurpose my <a href="https://lutzky.net/2021/03/14/pitemp/" target="_blank" rel="noopener noreffer ">shitty cardboard LCD case</a> for this project. These tactile buttons have quite short feet - they don&rsquo;t make it through the cardboard, and I insisted on avoiding using a perfboard and soldering iron - as, at the time, I had neither. I ultimately decided to reuse the mini-breadboard from <a href="https://lutzky.net/posts/software-parenting-2/" rel="">the previous version</a>; like many (all?) breadboards, its bottom is an adhesive pad; I didn&rsquo;t even bother to remove the resistors from V1, they add a certain design flare to it. With a few iterations on the UI, it was wife-approved: Custom characters are fully supported in C++ (though, not in Go), so I got nice labels for the tactile buttons, as well as a heartbeat<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> to indicate that NTP is still working.</p>
<figure><a class="lightgallery" href="/posts/software-parenting-3/poobuttons-v3.jpg" title="/posts/software-parenting-3/poobuttons-v3.jpg" data-thumbnail="/posts/software-parenting-3/poobuttons-v3.jpg" data-sub-html="<h2>Poobuttons v3 - nodeMCU with LCD in cardboard</h2>">
        
    </a><figcaption class="image-caption">Poobuttons v3 - nodeMCU with LCD in cardboard</figcaption>
    </figure>
<p>Overall, the project has been a blast, and the result is everyday-useful. Working on it has made me realize how much I need my own space for late-night electronics projects, but that&rsquo;s a project for another day.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Actually available - as in, as opposed to Raspberry Pi 0w, they&rsquo;re in stock in many places at the moment.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Unfortunately, <a href="https://tinygo.org/docs/reference/microcontrollers/nodemcu/" target="_blank" rel="noopener noreffer ">TinyGo does not yet support wifi</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>We call this procedure <a href="https://www.youtube.com/watch?v=BI75uWxEajA" target="_blank" rel="noopener noreffer ">Formula 1</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>2nd row from the bottom, rightmost column; you can see it fading out in this shot. It blinks every second. Although the photo doesn&rsquo;t show it, the LCD&rsquo;s contrast is actually great in-person.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>Newborn parenting software - part 2</title><link>https://lutzky.net/posts/software-parenting-2/</link><pubDate>Tue, 05 Oct 2021 21:57:09 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/software-parenting-2/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>With BabyBuddy now installed and running properly (see <a href="https://lutzky.net/posts/software-parenting-1/" rel="">previous post</a>), and an always-on display showing the latest information, we now got into the swing of using it. We loved the timeline for &ldquo;what happened while I as sleeping&rdquo;; we loved the food amount reports; and because we had a consistent &ldquo;feed, then change, then wait 15 minutes with baby upright to reduce spit-up&rdquo; system, the display&rsquo;s &ldquo;time since last change&rdquo; box was super useful as well. However, as you might imagine, we did <em>not</em> love handling a freshly-re-diapered baby with one hand while using the other to unlock the phone and navigate to the &ldquo;yes he pooped now&rdquo; page in a web app.</p>
<p>My first idea was to create voice commands for the Nest Home Mini in the room. However, it&rsquo;s prone to misunderstanding us; you have to enunciate, and even then the speech recognition is mostly tuned to preexisting Google Assistant commands, and tends to guess that we aren&rsquo;t really saying words like &ldquo;pee&rdquo; or &ldquo;poo&rdquo;. Furthermore, the baby might be crying, or worse yet - lightly sleeping, at risk of being woken up by our voice (or the assistant&rsquo;s). What we needed was a button (well, two - one for pee and one for poo).</p>
<p>I had a Raspberry Pi ZeroW lying around <a href="https://lutzky.net/posts/pitemp/" rel="">from a previous project</a> and decided to use it for this (the small OLED display wasn&rsquo;t used for this project, but I didn&rsquo;t find a good reason to take it off yet; more on that later). With bits I had from a generic &ldquo;learn electronics&rdquo; kit (which I bought for the specific purpose of having such bits), I created the user interface: Two buttons, a green LED for &ldquo;OK&rdquo;, a red LED for &ldquo;something went wrong&rdquo;; all tied together by some jumper cables and a mini breadboard. The Raspberry Pi would handle communicating with BabyBuddy&rsquo;s API (over wifi), reading the buttons, and driving the LEDs. The setup was indeed quite similar to PiTemp&rsquo;s with the software written in Go, cross-compiled, and run on startup using systemd.</p>
<figure><a class="lightgallery" href="/posts/software-parenting-2/feature-poobuttons-rpi0w.jpg" title="/posts/software-parenting-2/feature-poobuttons-rpi0w.jpg" data-thumbnail="/posts/software-parenting-2/feature-poobuttons-rpi0w.jpg" data-sub-html="<h2>PooButtons on Raspberry Pi ZeroW</h2>">
        
    </a><figcaption class="image-caption">PooButtons on Raspberry Pi ZeroW</figcaption>
    </figure>
<p>One annoying quirk with the Raspberry Pi Zero for this is that it would register phantom button presses; they&rsquo;d be quite rare, fewer than 5 a day, but that&rsquo;s certainly enough to mess up diaper reporting. I&rsquo;m not sure if it&rsquo;s something about the particular GPIO pins I used (GPIO24, GPIO22), and disconnecting the OLED display didn&rsquo;t work. I ended up following the old joke:</p>
<blockquote>
<p>How many software engineers does it take to change a lightbulb?</p>
<p>None, it&rsquo;s a hardware problem.</p>
<p>How many hardware engineers does it take to change a lightbulb?</p>
<p>None, they&rsquo;ll fix it in the software drivers.</p>
</blockquote>
<p>Specifically it ended up looking something like this (with another goroutine listening on the resulting channel):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">debounceTime</span> <span class="p">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stableTime</span>   <span class="p">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">listenButtons</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pull</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">PullUp</span>
</span></span><span class="line"><span class="cl">  <span class="nx">edge</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">FallingEdge</span>
</span></span><span class="line"><span class="cl">  <span class="nx">level</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">Low</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">pin</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="nx">gpio</span><span class="p">.</span><span class="nx">PinIO</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pinButton1</span><span class="p">,</span>  <span class="c1">// GPIO24
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">pinButton2</span><span class="p">,</span>  <span class="c1">// GPIO22
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">n</span> <span class="o">:=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pin</span> <span class="o">:=</span> <span class="nx">pin</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">debounceTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">In</span><span class="p">(</span><span class="nx">pull</span><span class="p">,</span> <span class="nx">edge</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Failed to set pin to input: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">WaitForEdge</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Got edge, waiting %v for stability&#34;</span><span class="p">,</span> <span class="nx">stableTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">stableTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">Read</span><span class="p">()</span> <span class="o">==</span> <span class="nx">level</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal was stable, counting as press&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal did not remain stable, discarding&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;WaitForEdge returned false, ignoring&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s not ideal, but it seemed to work; certainly seemed like it should be library code, for someone smarter to debug. Indeed, it turns out that the <code>periph.io</code> library had a <a href="https://pkg.go.dev/periph.io/x/conn/v3@v3.6.8/gpio/gpioutil#Debounce" target="_blank" rel="noopener noreffer ">Debounce function</a> to help with this, but at the time it <a href="https://github.com/periph/conn/issues/5" target="_blank" rel="noopener noreffer ">wasn&rsquo;t implemented at all</a> (and now that I&rsquo;ve spent some time on it, it&rsquo;s partially implemented).</p>
<p>Ultimately, the device worked rather well, and the button pushes were quite satisfying, especially after a particularly nasty diaper change (AKA a poonami). However, it did leave a lot to be desired: The cabling was flimsy and patchy (the pins coming from the ribbon were easy to disconnect), and using a Raspberry Pi here was overkill. Indeed, I ended up using that Raspberry Pi (and OLED display) as a <a href="https://pikvm.org/" target="_blank" rel="noopener noreffer ">PiKVM</a>, and using a microcontroller for the diaper change buttons instead. More on that in the next post.</p>
]]></description></item><item><title>Charge-only USB cables</title><link>https://lutzky.net/posts/charge-only-usb-cables/</link><pubDate>Thu, 09 Sep 2021 23:45:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/charge-only-usb-cables/</guid><description><![CDATA[<p>Here&rsquo;s how to quickly determine if a USB cable is fully operational or charge-only.</p>
<ol>
<li>Purchase several identical USB gadgets that require data transfer but are
cheap and therefore don&rsquo;t come with their own cables; e.g. a fun microcontroller
like an ESP8266.</li>
<li>Grab a cable from your big box &lsquo;o cables that you can&rsquo;t bring yourself to
throw out</li>
<li>Test it, doesn&rsquo;t work - powers on, but not identified on computer.</li>
<li>Test with two other cables, just to be sure it&rsquo;s not the cable.</li>
<li>Test all of the gadgets you got - same problem across the board.</li>
<li>Suspect your computer; try another one. Try another OS or two.</li>
<li>Read up about debugging the device and whether this is a known fault;
identify online posts about several similar-sounding but ultimately unrelated
issues.</li>
<li>Begin to package gadgets for return/trash, nearly admitting defeat</li>
<li>In a moment of desperation, try hooking up another micro-USB gadget to your
computer. Discover that doesn&rsquo;t work either.</li>
<li>Question own sanity.</li>
<li>Try three other cables from your big box &lsquo;o cables. One finally works with
the other gadget.</li>
<li>Try that cable with the little microcontroller. Still doesn&rsquo;t work.</li>
<li>Discover this is actually yet another cable, which looks identical to the
one that does work.</li>
<li>Become very angry.</li>
<li>Get some brightly-colored electrical tape in two colors.</li>
<li>Use the electrical tape to mark each and every last damned cable in the
damned box, with the two colors denoting &ldquo;worked at least once&rdquo; and &ldquo;POS cable
for charging ancient crap only&rdquo;</li>
<li>You can now easily identify the fully-operational USB cables, as they will
have a brightly-colored electrical tape indicating this!</li>
</ol>
<p>(if any additional unmarked micro-USB cables should appear, go back to step 14)</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw" aria-hidden="true"></i>Info<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This post is backported from Facebook, for the sole reason of, in August 2023, replying
to <a href="https://mastodon.social/@geerlingguy/110973213585771396" target="_blank" rel="noopener noreffer ">this post about a device that makes it easier</a>.</div>
        </div>
    </div>]]></description></item><item><title>PiTemp</title><link>https://lutzky.net/posts/pitemp/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/pitemp/</guid><description><![CDATA[<!-- raw HTML omitted -->
<p>I had been looking for an excuse to mess around with Raspberry Pi for a while, and found one: I wanted a graph of temperature and humidity over time, and - while we&rsquo;re at it - a nice display of those two. Technically speaking, I already have a Nest thermostat which should provide those, but it won&rsquo;t display humidity and there&rsquo;s no easy way to get a graph off it (besides, then I&rsquo;d need another excuse for messing around with a Pi).</p>
<p>The code for the final result is in <a href="https://github.com/lutzky/pitemp" target="_blank" rel="noopener noreffer ">https://github.com/lutzky/pitemp</a>.</p>
<h2 id="stage-1-lcd-and-dht">Stage 1: LCD and DHT</h2>
<p>Hardware:</p>
<ul>
<li>A <a href="https://www.raspberrypi.org/products/raspberry-pi-zero-w/" target="_blank" rel="noopener noreffer ">Raspberry Pi Zero W</a> a friend gave me (that&rsquo;ll become important later on)</li>
<li>A <a href="https://www.amazon.co.uk/gp/product/B07L83K6CF" target="_blank" rel="noopener noreffer ">DHT11</a> temperature &amp; humidity sensor</li>
<li>A <a href="https://www.amazon.co.uk/gp/product/B07QNKCLJM" target="_blank" rel="noopener noreffer ">4x20 character LCD</a>; apparently an HD44780 controller or compatible.</li>
</ul>
<p>This was my first time coding for hardware on the raspberry pi, and it went fairly well.</p>
<h3 id="lcd-quirks">LCD quirks</h3>
<p>Getting the degree symbol (°, ASCII <code>0xb0</code>) was a bit of a challenge. While the official HD44780 spec shows it should be available with &ldquo;ROM Code A02&rdquo; (i.e. Latin mode), it&rsquo;s not clear if this can be toggled in software, and the characters my unit displayed matched &ldquo;ROM Code A00&rdquo; (Japanese)&hellip; mostly, that is. Some characters were malformed, and the <a href="https://github.com/d2r2/go-hd44780" target="_blank" rel="noopener noreffer ">unofficial library I used</a> didn&rsquo;t support custom characters (which the hardware seems to support). Fortunately, the Japanese ROM code had a Handakuten symbol (ﾟ, like the circle from ぽ but as a separate character), which is close enough.</p>
<p>The LCD was also quite slow to refresh, the way I was using it; any faster than 1 hz would lead to corruption, meaning that the &ldquo;second-by-second&rdquo; clock display I wanted wasn&rsquo;t feasible.</p>
<p>Finally, the LCD unit is much, <em>much</em> large than the Raspberry Pi Zero, and has to be wired awkwardly to it. With some covid-lockdown-induced creativity, a twist tie, and a bit of sewing thread (!), I turned the box it came in into a &ldquo;case&rdquo;.</p>
<figure><a class="lightgallery" href="/posts/pitemp/lcd_box.jpg" title="/posts/pitemp/lcd_box.jpg" data-thumbnail="/posts/pitemp/lcd_box.jpg" data-sub-html="<h2>LCD in a cardboard box &ldquo;case&rdquo;</h2>">
        
    </a><figcaption class="image-caption">LCD in a cardboard box &ldquo;case&rdquo;</figcaption>
    </figure>
<h3 id="cross-compilation">Cross compilation</h3>
<p>While the Pi Zero is certainly <em>capable</em> of being a fully-fledged Go development environment, it&rsquo;s not a fast one (and me using a cheap old SD card isn&rsquo;t helping). I got a much faster edit-compile-run loop by working on my main laptop, cross-compiling for ARM, and <code>scp</code>-ing the result over. That&rsquo;s despite Go&rsquo;s hefty statically-build binaries (7-12MB for these, depending on stripping).</p>
<p>Cross compiling is done like so (e.g. in a <a href="https://github.com/lutzky/pitemp/blob/main/build.sh" target="_blank" rel="noopener noreffer ">convenience script</a>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install gcc-arm-linux-gnueabi
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CC</span><span class="o">=</span>arm-linux-gnueabi-gcc <span class="nv">CGO_ENABLED</span><span class="o">=</span><span class="m">1</span> <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARM</span><span class="o">=</span><span class="m">6</span> <span class="nv">GOARCH</span><span class="o">=</span>arm
</span></span><span class="line"><span class="cl">go -o main.arm build main.go
</span></span></code></pre></td></tr></table>
</div>
</div><p>For build-and-run-on-save, this can be used with <code>entr</code>. However, because you can&rsquo;t modify an executable file as it runs (in this case), you need to use a temporary file. On my laptop, I run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">find <span class="p">|</span> entr -c -s <span class="s2">&#34;./build.sh &amp;&amp; scp main.arm TARGET-MACHINE:main.arm.new
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Then, on the pi, I run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ls main.arm.new <span class="p">|</span> sudo entr -r -c -s <span class="s2">&#34;cp main.arm.new main &amp;&amp; exec ./main&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="stage-2-pioled">Stage 2: PiOLED</h2>
<p>I looked for a not-so-ridiculously-large display, and found <a href="https://www.adafruit.com/product/3527" target="_blank" rel="noopener noreffer ">adafruit&rsquo;s PiOLED</a> to be perfect. Its HAT form factor makes for a much tidier device, and the display itself is reminiscent of the 2007 Sansa Clip m300 (albeit monochromatic). Library support is also much better, thanks to <a href="http://periph.io" target="_blank" rel="noopener noreffer ">http://periph.io</a>.</p>
<p>That being said, my friend soldered the Pi&rsquo;s pins on &ldquo;downwards&rdquo;, as this is apparently more convenient when using it on a breadboard. I figured it&rsquo;s time to order my own Pi Zero (you can get them with the pins pre-soldered, facing &ldquo;up&rdquo;); I later found that <a href="https://pkg.go.dev/periph.io/x/devices/v3/ssd1306#Opts" target="_blank" rel="noopener noreffer ">this might be configurable</a>, but it&rsquo;d still be pretty awkward.</p>
<p>The PiOLED library (actually periph.io&rsquo;s ssd1306 library) essentially lets you render an <code>image.Image</code>; since these are also trivially renderable to PNG, I could speed up development even further by adding an HTTP endpoint to serve the current image, even if the hardware isn&rsquo;t present; this also let me zoom into the rendered image instead of squinting at the actual display, making it easier to align things pixel-by-pixel. I eventually ended up separating the code into two binaries - <code>pitemp</code> would communicate with the sensors and provide an HTTP endpoint, whereas <code>pitemp_pioled</code> (and <code>pitemp_lcd</code>) would communicate with <code>pitemp</code> and the physical display (or run in <code>--simulator</code> mode on my laptop, for HTTP-endpoint-only rendering).</p>
<p>I&rsquo;m quite happy with the final result:</p>
<figure><a class="lightgallery" href="/posts/pitemp/feature-pioled.jpg" title="/posts/pitemp/feature-pioled.jpg" data-thumbnail="/posts/pitemp/feature-pioled.jpg" data-sub-html="<h2>PiTemp with PiOLED</h2>">
        
    </a><figcaption class="image-caption">PiTemp with PiOLED</figcaption>
    </figure>
<p>Happy hacking!</p>
]]></description></item><item><title>DD-WRT awesomeness</title><link>https://lutzky.net/posts/dd-wrt-awesomeness/</link><pubDate>Sat, 20 Nov 2010 15:19:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/dd-wrt-awesomeness/</guid><description><![CDATA[<p>Since I&rsquo;ve last posted, I&rsquo;ve moved to a new apartment. First order of business -
get a working internet connection. This is extra-challenging when your
primary machine doesn&rsquo;t even have a wireless network card.</p>
<p>My first hack used my trusty laptop - it has a properly working wireless card,
and could connect to my roommate&rsquo;s router quite easily. It runs Ubuntu, and as
it turns out, that means sharing the connection was dead-simple: Right-click on
the network manager icon, add a new wired connection called &ldquo;Shared&rdquo;, and under
IPv4 settings, choose &ldquo;Shared to other computers&rdquo;. That&rsquo;s it. Once I connected
my desktop to my laptop, it automatically got all of its settings, and I was
good to go.</p>
<p>However, this was kind of annoying - I had to leave my laptop on, the reception
in my room isn&rsquo;t perfect so it would sometimes disconnect (requiring manual
intervention), and my laptop wasn&rsquo;t free for ordinary use (if I wanted my
torrents to keep going).</p>
<p>The solution: I grabbed my (horrible) old D-Link DIR-300 router, and installed
DD-WRT on it. This gave it an awesome &ldquo;client mode&rdquo; feature, which allowed it
to use it the same way I used my laptop to bridge my wireless connection.
Flashing it worked quite well by following the guide (the updated version in
the wiki, that is - it has proper instructions for connecting to RedBoot, the
D-Link flashing interface, from Linux), and another guide helped me set up
Client mode. All seems well, except for two issues:</p>
<p>First, port forwarding doesn&rsquo;t seem to work properly - it works well on the
internal network (that is, I can SSH into my desktop using my laptop), but not
on the internet (SSH port shows up as open, but I can&rsquo;t connect). I&rsquo;m also
guessing that UPnP/NAT-PMP won&rsquo;t work properly. Second, and this is an old
problem - the router has a high-pitched whine. This may have something to do
with the fact that the AC/DC adapter it came with is rated for 12V @ 1A,
whereas the router is rated 5V @ 1.2A. Let&rsquo;s hope it doesn&rsquo;t fry (hasn&rsquo;t for
the 3 years I used it).</p>
]]></description></item><item><title>Android</title><link>https://lutzky.net/posts/android/</link><pubDate>Sat, 04 Sep 2010 09:26:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/android/</guid><description><![CDATA[<p>I&rsquo;ve finally gotten the chance to get one of those newfangled Android phones.</p>
<p>I&rsquo;ve recently &ldquo;bought&rdquo; a <a href="http://en.wikipedia.org/wiki/Samsung_Galaxy" target="_blank" rel="noopener noreffer ">Samsung Galaxy
Android</a> phone (the older i7500,
not the newer i9000 &ldquo;S&rdquo;) model. It&rsquo;s a seriously serious upgrade from my old
<a href="http://en.wikipedia.org/wiki/Nokia_6120_classic" target="_blank" rel="noopener noreffer ">Nokia 6120 Classic</a>, and as I
broke the 6120&rsquo;s screen and reverted back to my trusty old <a href="http://en.wikipedia.org/wiki/Nokia_6070" target="_blank" rel="noopener noreffer ">Nokia
6070</a> (which I couldn&rsquo;t even get to
run the GMail app), I was quite a happy camper switching to a modern phone.</p>
<p>The whole idea of Android has always been very appealing to me - Nokia&rsquo;s
software has been declining in quality, and while Motorola and Samsung have
always made excellent hardware, they could never get the knack of good
software. Google has. Problem solved, right?</p>
<p>The Android software is miles ahead of anything I&rsquo;ve ever seen, including
iPhone. I now have connectivity everywhere, and apps to sync all of my favorite
things - GMail and Google Calendar are included, GTasks is great for tasks,
Paperdroid is great for Read It Later, NewsRob is great for Google Reader. The
Facebook and Twidroyd applications are also quite nice, and the convenience has
me using those networks more. I even have nifty stuff like Transdroid, a
Transmission web client which is actually very good at <strong>adding</strong> torrents
while I&rsquo;m away, so they&rsquo;re done by the time I get home. I get my reading done
with Aldiko and ACV (for comics). Even Israeli sites have some good
applications up, such as YNet and <a href="http://d.co.il/" target="_blank" rel="noopener noreffer ">Dapei Zahav</a> have a nice
Android app, though not as nice as their iPhone ones. And of course, there&rsquo;s
the wonderful <a href="http://waze.co.il/" target="_blank" rel="noopener noreffer ">Waze</a>, which is the most Israeli solution to
the road congestion problem I&rsquo;ve ever seen. I&rsquo;ve even had the chance to do some
on-foot navigation with Google Maps, which is also handy.</p>
<p>The phone itself has a beautiful AMOLED screen, great audio quality (comes with
quite a good set of headphones as well), and looks sleek. The touchscreen is
responsive enough (though not anywhere near new Android devices nor the
iPhone/iPod touch), and it even comes with a free extra 8GB SD card, for a
total of 16GB.</p>
<p>And now, to rant.</p>
<p>Battery life isn&rsquo;t what is should be - the phone is awesome, I want to use it,
and it can barely get through the day - especially if I&rsquo;m doing heavy stuff
like Waze (GPS + Data + screen is always on + voice), but even if I&rsquo;m just
surfing casually. The unlock button is located inconveniently on the bottom
part of the right side, just above the camera button. The home button is
located between the Back and Send buttons, meaning it&rsquo;s very easy to hit by
accident; it&rsquo;s not even labeled. The CPU isn&rsquo;t always fast enough to keep
everything completely smooth, and while this is generally acceptable, it gets
rather irksome in odd places: If you turn on screen auto-rotation (which uses
more battery power), rotation takes a while and might be accidental. However,
there is no <em>manual</em> screen rotation option as far as I can tell.</p>
<p>As a music player (relating to my previous post), the device works well enough -
but I couldn&rsquo;t, for the life of me, get Hebrew support in ID3 tags (no matter
what the encoding is), and only a limited subset of ID3 tag versions is
supported, and everything works much better with Ogg files.</p>
<p>The flaws I&rsquo;ve mentioned are relatively minor and nitpicky - for Waze, you can
use the car charger (which comes with the phone, thankfully). The buttons are
OK after some getting used to (and installing the excellent AnySoftKeyboard),
and operation is generally smooth. However, there is a major issue I can&rsquo;t wrap
my head around - the shipped firmware is 1.5 cupcake, and there are absolutely
zero updates available from Samsung. There is a semi-official leaked 1.6 update
which, as I&rsquo;ve heard, is quite buggy. An awesome guy called
<a href="http://www.drakaz.com/" target="_blank" rel="noopener noreffer ">drakaz</a> has been working on a Froyo (2.2) port for the
Galaxy, which I really should check out, but Samsung&rsquo;s behavior on this topic
is inexcusable in my opinion.</p>
<p>All-in-all, however, I&rsquo;m happy with my phone. It&rsquo;s a joy to use, and the price
is hard to beat - free with my phone plan, provided I can rake up a bill of
150₪ (which I can, with some help from the 70₪ 1GB data plan, which comes in
quite handy). My next phone will, however, probably not be a Samsung.</p>
]]></description></item><item><title>My music player has sunk</title><link>https://lutzky.net/posts/my-music-player-has-sunk/</link><pubDate>Sat, 13 Mar 2010 16:35:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/my-music-player-has-sunk/</guid><description><![CDATA[<p>My <a href="http://en.wikipedia.org/wiki/Meizu_M6_miniPlayer" target="_blank" rel="noopener noreffer ">Meizu Mini M6</a> has died a
tragic death as a result of being left in my shirt pocket, which in turn was -
with the rest of my shirt - in the laundry. I&rsquo;ve had it for three years, so
this would be a good time to review.</p>
<p>My favorite thing about the Mini was the cost. When I bought it, it was far
cheaper than comparable players, at ~400₪ for 8GB. For a player with good video
support, it was a steal. Other pros it had include:</p>
<ul>
<li>Great screen. I used to watch TV shows on it quite a bit</li>
<li>Great audio quality, especially in the lower range - very important for a
bass guitarist</li>
<li>Perfect OS compatibility - shows up as a Mass Storage device, just drag your
files over. This is also how firmware upgrades are performed</li>
<li>EBook reader, of sorts</li>
<li>Quite small and very thin</li>
</ul>
<p>However, the player is full of quirks:</p>
<ul>
<li>
<p>Slow startup time. This is compounded by the fact that to turn it on, you
have to press the &ldquo;Play&rdquo; button for about 3 seconds - too much less or too
much more, and it won&rsquo;t start up.</p>
<p>This is even worse when unplugging it from USB - it would rebuild the library
every time, even if you were just charging it.</p>
</li>
<li>
<p>You can&rsquo;t turn the player on when it&rsquo;s connected to USB. When it&rsquo;s off,
connecting it to USB is for charging only - to access the filesystem, you
have to disconnect it, turn it on, and connect it again. (&hellip;not that the
player is functional when in it&rsquo;s plugged in&hellip;)</p>
</li>
<li>
<p>A few podcast niceties would be very easy to implement and extremely helpful.
There&rsquo;s no way to separate podcasts from the rest of the music, so you don&rsquo;t
get &ldquo;This Week In Tech&rdquo; when you put it on &ldquo;All Music at random&rdquo; mode.  Also,
the player doesn&rsquo;t keep track of positions within audio streams, other than
the last played one.</p>
</li>
<li>
<p>There&rsquo;s no way to delete a song from within the player.</p>
</li>
<li>
<p>The interface is very inconsistent, with the video and audio sections having
completely different key bindings. Long presses and short presses have very
different meanings (but the length isn&rsquo;t all that different), so you have to
be very careful.</p>
</li>
<li>
<p>Pressing various key during startup had interesting, non-obvious effects,
such as rebuilding the music library or <strong>formatting the player without
asking for confirmation</strong>. This isn&rsquo;t in the official documentation, and even
if it were - that&rsquo;s a <strong>very</strong> bad misfeature.</p>
</li>
<li>
<p>The newer version of the player, which I have, did away with the bottom
&ldquo;play&rdquo; button, and moved it to the bottom of the 4-way D-pad, instead of the
&ldquo;Enter&rdquo; key. The &ldquo;Enter&rdquo; key was replaced with a tap on the d-pad.
Unfortunately, such a tap is very similar to a volume change drag, and even
if it weren&rsquo;t - is very easy to perform by accident.</p>
</li>
</ul>
<p>One more feature that I would have liked is one I&rsquo;ve only seen in the iPod
(which I despise for a variety of reasons) - the iPod keeps track of which
songs you&rsquo;ve played all the way through, and remembers that you &ldquo;like&rdquo; them -
this information is later used when building playlists, and is integrated into
iTunes playlists as well.</p>
<p>Now, I might be going to a long course soon, one which will specifically mean
plenty of bus time. So go ahead, guys - recommend a player. :)</p>
]]></description></item><item><title>Broken phone screen - data rescue</title><link>https://lutzky.net/posts/broken-phone-screen-data-rescue/</link><pubDate>Sat, 31 Oct 2009 02:32:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/broken-phone-screen-data-rescue/</guid><description><![CDATA[<p>Last weekend I broke my Nokia 6120&rsquo;s screen. I have a military phone, which is
far cheaper, so I&rsquo;ve decided to keep it offline. However, being the sentimental
guy that I am, I did want to save all of my contacts and SMS messages (in
addition to the photos, which presented less of a problem). This proved to be a
bit of a challenge without the screen working.</p>
<p>Usually, when you connect the phone via USB, it asks if you want &ldquo;PC Suite
mode&rdquo; or &ldquo;Data Transfer mode&rdquo;. The &ldquo;Data Transfer&rdquo; mode has the phone show up
as a standard USB storage device, which allows for easy transfer of MP3 files,
photos and videos to and from the phone, without any nokia-specific software.
However, it only works for the external SD card, so you can&rsquo;t use that to
access SMS messages or contacts.</p>
<p>I usually only need &ldquo;Data Transfer&rdquo; mode, so I changed the default to that.
Today I regret that decision, as it cost me a couple of hours&rsquo; work. I called
the Orange hotline, and they did their best to help me, including trying to
blind-guide me through the menus, which failed because the menus are actually
dynamic and I didn&rsquo;t have the default setup. They actually got me 90% of the
way there - here&rsquo;s the solution I found: Hit the red (disconnect) button, and
type the Soft Reset GSM code: <code>*#7780#</code>. Now press the &ldquo;left menu&rdquo; key (not the
left key, nor the menu key - the left of the two &ldquo;dynamic&rdquo; keys) - this part
was what the Orange hotline missed, because it seemed so obvious. Then hit
12345 (this is the default &ldquo;secret code&rdquo;), and the left menu key again. I found
this by watching a demo of the soft reset on YouTube.</p>
<p>At this point I used VirtualBox and the Nokia PC suite (both are
free-as-in-beer) to do the heavy lifting. I now have a text file with all of my
contacts, a CSV file with all of my SMS messages, and all of my images saved
both to my computer and a DR site. Now I just need to upgrade my military phone
(Mirs)&hellip;</p>
]]></description></item><item><title>Hardware doesn't like me</title><link>https://lutzky.net/posts/hardware-doesnt-like-me/</link><pubDate>Thu, 26 Feb 2009 22:15:00 +0000</pubDate><author>Author</author><guid>https://lutzky.net/posts/hardware-doesnt-like-me/</guid><description><![CDATA[<p>I&rsquo;m a software kind of guy. Here&rsquo;s proof.</p>
<p>Today I went to visit my grandparents, and it turned out their computer
wouldn&rsquo;t boot. BIOS would load up fine, and I could browse the menus fine - but
once it tried to go on from there, it would simply blink what looked like half
a cursor (that is, half of a <code>_</code>-style cursor). I figured it might be the HDD -
so I took it home, and decided to connect it to my own box. Upon disconnecting
my DVD drive, I destroyed the SATA cord - it had an annoying little metal tab
which had to be pushed in before it would release, and it just wouldn&rsquo;t give,
and the connector just broke, exposing and bending the wires.</p>
<p>Checking if the computer still boots, the BIOS took much longer to display hard
drive status, and while Ubuntu would start booting, it would fail in the
process and tell me that my root hard drive (by UUID) isn&rsquo;t available. Looking
at dmesg, the ata2 module was indeed reporting that the hard drive was too
slow - but a few seconds later it would finally access the drive, and mount
properly. This problem, however, disappeared once I connected my grandparents'
drive! (Mounting it would fail, telling me that I either have a hardware error
or need to connect it to a Windows machine, which I don&rsquo;t have, and run some
diagnostic commands). Sure enough, when the HDD is connected by itself, it gets
quite flaky, but once I connect a second drive (back to the DVD, eventually),
everything works properly. This probably has to do with the fact that both
drives are connected on continuations of the same power cord - but I&rsquo;ve never
experienced such a problem, where you <em>must</em> connect devices to <em>both</em>
connectors on the power cord. A hardware guy I know says he&rsquo;s never heard of
such a problem either.</p>
<p>Naturally, these things never happen when I mess with hardware at work, where
there are plenty of spare parts&hellip;</p>
]]></description></item></channel></rss>