<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>software on Shallow and Pedantic</title><link>https://lutzky.net/tags/software/</link><description>Recent content in software on Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/tags/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Newborn parenting software - part 3</title><link>https://lutzky.net/2021/10/10/software-parenting-3/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/10/10/software-parenting-3/</guid><description>Transitioning PooButtons to a microcontroller</description><content:encoded><![CDATA[<p>As noted in the <a href="https://lutzky.net/2021/10/05/software-parenting-2/">previous post</a>, I decided that the implementation is more appropriate for a microcontroller than a full-fledged computer. While the Arduino is probably the best-known microcontroller, the standard one doesn&rsquo;t have wifi (the one with wifi is ~$50). The ESP8266, on the other hand, is a microcontroller chip with wifi capabilities, available<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> on dev boards like the NodeMCU for about $2 apiece - so I bought a few of them. The ESP8266 is sometimes used as a wifi add-on for Arduino, but it&rsquo;s quite capable as a microcontroller on its own (and the newer ESP32 is faster).</p>
<p>So what&rsquo;s the difference between a (very small) computer and a microcontroller? A Raspberry Pi boots off an SD card, usually to a full-fledged Linux operating system; you&rsquo;d operate it either directly with a monitor and keyboard, or connect remotely using SSH. You can install/create software on it as you would on a &ldquo;full-size&rdquo; computer, and I usually do this in Go (although Python is more popular). Conversely, a microcontroller will usually run only one program, which you need to build on a separate computer, connect it over USB to the microcontroller board, and flash it. This has a number of advantages, including simplicity and pretty-much-instant boot.</p>
<p>Coding for the ESP8266 can be done using the same tooling as Arduino - namely, in C++<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, on the Arduino IDE. However, during this project I learned of <a href="https://platformio.org/">PlatformIO</a>, which is far more comfortable to work with: It&rsquo;s integrated into VSCode, and git, auto-formatting, autocomplete and <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">VIM keybindings</a> all work nicely. It also provides a more organized approach to unit testing (practically absent in Arduino IDE) and per-project dependency management (you can list what each project needs and have it auto-install). This made the project fun enough for a few iterations.</p>
<p>One quirk of working with the BabyBuddy API is that reporting a diaper change requires supplying the time of change, even if our intention is &ldquo;right now&rdquo;. That&rsquo;s easy enough on a Linux system, but microcontrollers don&rsquo;t generally have clocks. Thankfully, libraries such as <a href="https://github.com/mcxiaoke/ESPDateTime">ESPDateTime</a> provide NTP support baked right into your program. At this point, the NodeMCU version worked, and replaced the previous implementation:</p>
<figure>
  <a href="/2021/10/10/software-parenting-3/poobuttons-v2.jpg">
    <img loading="lazy" src="/2021/10/10/software-parenting-3/poobuttons-v2.jpg" />
  </a><figcaption>Poobuttons v2 - nodeMCU on breadboard</figcaption></figure>
<p>Indeed, this version fits neatly onto a single (full-sized) breadboard. It&rsquo;s not quite <a href="https://www.youtube.com/watch?v=PE-_rJqvDhQ">Ben Eater</a> grade, but the NodeMCU is pretty good for breadboard mounting, and using solid-core jumpers let me make it much neater than the previous iteration. However, at this point we realized there was a missing feature: We were never quite sure if we had pressed the button, especially if we were performing a diaper change together<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> . A couple of LEDs can only convey so much information.</p>
<p>I decided to repurpose my <a href="https://lutzky.net/2021/03/14/pitemp/">shitty cardboard LCD case</a> for this project. These tactile buttons have quite short feet - they don&rsquo;t make it through the cardboard, and I insisted on avoiding using a perfboard and soldering iron - as, at the time, I had neither. I ultimately decided to reuse the mini-breadboard from <a href="https://lutzky.net/2021/10/05/software-parenting-2/">the previous version</a>; like many (all?) breadboards, its bottom is an adhesive pad; I didn&rsquo;t even bother to remove the resistors from V1, they add a certain design flare to it. With a few iterations on the UI, it was wife-approved: Custom characters are fully supported in C++ (though, not in Go), so I got nice labels for the tactile buttons, as well as a heartbeat<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> to indicate that NTP is still working.</p>
<figure>
  <a href="/2021/10/10/software-parenting-3/poobuttons-v3.jpg">
    <img loading="lazy" src="/2021/10/10/software-parenting-3/poobuttons-v3.jpg" />
  </a><figcaption>Poobuttons v3 - nodeMCU with LCD in cardboard</figcaption></figure>
<p>Overall, the project has been a blast, and the result is everyday-useful. Working on it has made me realize how much I need my own space for late-night electronics projects, but that&rsquo;s a project for another day.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Actually available - as in, as opposed to Raspberry Pi 0w, they&rsquo;re in stock in many places at the moment.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Unfortunately, <a href="https://tinygo.org/docs/reference/microcontrollers/nodemcu/">TinyGo does not yet support wifi</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>We call this procedure <a href="https://www.youtube.com/watch?v=BI75uWxEajA">Formula 1</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>2nd row from the bottom, rightmost column; you can see it fading out in this shot. It blinks every second. Although the photo doesn&rsquo;t show it, the LCD&rsquo;s contrast is actually great in-person.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><title>Newborn parenting software - part 2</title><link>https://lutzky.net/2021/10/05/software-parenting-2/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/10/05/software-parenting-2/</guid><description>Logging diapers with satisfying clicks</description><content:encoded><![CDATA[<p>With BabyBuddy now installed and running properly (see <a href="https://lutzky.net/2021/10/03/software-parenting-1/">previous post</a>), and an always-on display showing the latest information, we now got into the swing of using it. We loved the timeline for &ldquo;what happened while I as sleeping&rdquo;; we loved the food amount reports; and because we had a consistent &ldquo;feed, then change, then wait 15 minutes with baby upright to reduce spit-up&rdquo; system, the display&rsquo;s &ldquo;time since last change&rdquo; box was super useful as well. However, as you might imagine, we did <em>not</em> love handling a freshly-re-diapered baby with one hand while using the other to unlock the phone and navigate to the &ldquo;yes he pooped now&rdquo; page in a web app.</p>
<p>My first idea was to create voice commands for the Nest Home Mini in the room. However, it&rsquo;s prone to misunderstanding us; you have to enunciate, and even then the speech recognition is mostly tuned to preexisting Google Assistant commands, and tends to guess that we aren&rsquo;t really saying words like &ldquo;pee&rdquo; or &ldquo;poo&rdquo;. Furthermore, the baby might be crying, or worse yet - lightly sleeping, at risk of being woken up by our voice (or the assistant&rsquo;s). What we needed was a button (well, two - one for pee and one for poo).</p>
<p>I had a Raspberry Pi ZeroW lying around <a href="https://lutzky.net/2021/03/14/pitemp/">from a previous project</a> and decided to use it for this (the small OLED display wasn&rsquo;t used for this project, but I didn&rsquo;t find a good reason to take it off yet; more on that later). With bits I had from a generic &ldquo;learn electronics&rdquo; kit (which I bought for the specific purpose of having such bits), I created the user interface: Two buttons, a green LED for &ldquo;OK&rdquo;, a red LED for &ldquo;something went wrong&rdquo;; all tied together by some jumper cables and a mini breadboard. The Raspberry Pi would handle communicating with BabyBuddy&rsquo;s API (over wifi), reading the buttons, and driving the LEDs. The setup was indeed quite similar to PiTemp&rsquo;s with the software written in Go, cross-compiled, and run on startup using systemd.</p>
<figure>
  <a href="/2021/10/05/software-parenting-2/poobuttons-rpi0w.jpg">
    <img loading="lazy" src="/2021/10/05/software-parenting-2/poobuttons-rpi0w.jpg" />
  </a><figcaption>PooButtons on Raspberry Pi ZeroW</figcaption></figure>
<p>One annoying quirk with the Raspberry Pi Zero for this is that it would register phantom button presses; they&rsquo;d be quite rare, fewer than 5 a day, but that&rsquo;s certainly enough to mess up diaper reporting. I&rsquo;m not sure if it&rsquo;s something about the particular GPIO pins I used (GPIO24, GPIO22), and disconnecting the OLED display didn&rsquo;t work. I ended up following the old joke:</p>
<blockquote>
<p>How many software engineers does it take to change a lightbulb?</p>
<p>None, it&rsquo;s a hardware problem.</p>
<p>How many hardware engineers does it take to change a lightbulb?</p>
<p>None, they&rsquo;ll fix it in the software drivers.</p>
</blockquote>
<p>Specifically it ended up looking something like this (with another goroutine listening on the resulting channel):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">const</span> <span class="p">(</span>
  <span class="nx">debounceTime</span> <span class="p">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span>
  <span class="nx">stableTime</span>   <span class="p">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">listenButtons</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">pull</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">PullUp</span>
  <span class="nx">edge</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">FallingEdge</span>
  <span class="nx">level</span> <span class="o">:=</span> <span class="nx">gpio</span><span class="p">.</span><span class="nx">Low</span>

  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">pin</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="nx">gpio</span><span class="p">.</span><span class="nx">PinIO</span><span class="p">{</span>
    <span class="nx">pinButton1</span><span class="p">,</span>  <span class="c1">// GPIO24
</span><span class="c1"></span>    <span class="nx">pinButton2</span><span class="p">,</span>  <span class="c1">// GPIO22
</span><span class="c1"></span>  <span class="p">}</span> <span class="p">{</span>
    <span class="nx">n</span> <span class="o">:=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="nx">pin</span> <span class="o">:=</span> <span class="nx">pin</span>

    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">{</span>
        <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">debounceTime</span><span class="p">)</span>

        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">In</span><span class="p">(</span><span class="nx">pull</span><span class="p">,</span> <span class="nx">edge</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
          <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Failed to set pin to input: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">WaitForEdge</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Got edge, waiting %v for stability&#34;</span><span class="p">,</span> <span class="nx">stableTime</span><span class="p">)</span>
          <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">stableTime</span><span class="p">)</span>

          <span class="k">if</span> <span class="nx">pin</span><span class="p">.</span><span class="nf">Read</span><span class="p">()</span> <span class="o">==</span> <span class="nx">level</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal was stable, counting as press&#34;</span><span class="p">)</span>
            <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">n</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;Signal did not remain stable, discarding&#34;</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;WaitForEdge returned false, ignoring&#34;</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>It&rsquo;s not ideal, but it seemed to work; certainly seemed like it should be library code, for someone smarter to debug. Indeed, it turns out that the <code>periph.io</code> library had a <a href="https://pkg.go.dev/periph.io/x/conn/v3@v3.6.8/gpio/gpioutil#Debounce">Debounce function</a> to help with this, but at the time it <a href="https://github.com/periph/conn/issues/5">wasn&rsquo;t implemented at all</a> (and now that I&rsquo;ve spent some time on it, it&rsquo;s partially implemented).</p>
<p>Ultimately, the device worked rather well, and the button pushes were quite satisfying, especially after a particularly nasty diaper change (AKA a poonami). However, it did leave a lot to be desired: The cabling was flimsy and patchy (the pins coming from the ribbon were easy to disconnect), and using a Raspberry Pi here was overkill. Indeed, I ended up using that Raspberry Pi (and OLED display) as a <a href="https://pikvm.org/">PiKVM</a>, and using a microcontroller for the diaper change buttons instead. More on that in the next post.</p>
]]></content:encoded></item><item><title>Newborn parenting software - part 1</title><link>https://lutzky.net/2021/10/03/software-parenting-1/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://lutzky.net/2021/10/03/software-parenting-1/</guid><description>Choosing and hacking on baby tracking apps</description><content:encoded><![CDATA[<p>A few months ago, I became a father. To help overcome some of the challenges of raising a newborn, I decided to employ my standard MO - software; preferably the kind where I understand what it&rsquo;s doing. It&rsquo;s been working well, and I learned a lot doing it - several blog posts' worth, in fact.</p>
<p>For this story to make sense, it bears mentioning that our conditions are pretty much optimal for it: My employer provides a generous parental leave for the non-birth parent; we decided in advance to formula-feed, which allows us to share that load, which means we need to communicate about it; my partner is an early bird whereas I am a night-owl, meaning we essentially have separate shifts necessitating a handoff; and, critically, we&rsquo;re the type of people who <em>like</em> everything being super-organized and scheduled and spreadsheet-y (calms us down, gives us an illusion of control). Furthermore, our baby is remarkably consistent, being hungry right about every 3 hours - so the question we ended up constantly asking (of each other and our phones) was &ldquo;how long since the baby ate&rdquo;.</p>
<p>We knew in advance we&rsquo;d need some sort of a baby tracking app, of which there are <em>many</em>. After some research, I found that few of the free ones are designed to be used from multiple devices (e.g. dad&rsquo;s and mom&rsquo;s phones), which is a hard requirement. We found two contenders: Baby+ and BabyBuddy.</p>
<h2 id="baby">Baby+</h2>
<p><a href="https://philips-digital.com/baby-new/">Baby+</a> is an Android and iPhone app for tracking babies; it follows <a href="https://philips-digital.com/pregnancy-new/">pregnancy+</a>, which we were quite happy with (especially as, before the birth, our responsiveness requirements were looser - I&rsquo;ll get to that). It can track quite a few things, but not Tummy Time for one (in our case it turns out to be pretty important). Like pregnancy+, the design is very aesthetically pleasing, and it regularly shows timely, short, and useful articles for the parents.</p>
<p>While the app does have cloud sync, it doesn&rsquo;t have a web UI (it&rsquo;s phone/tablet-only) nor an open HTTP API for me to reasonably code against. It does have an export function, but it&rsquo;s only really intended for importing by the app itself as backup. It&rsquo;s super-clunky to work with - I know because I ended up using it to perform some analysis with a spreadsheet(&ldquo;how long is the baby going between feeds&rdquo;).</p>
<p>The biggest disadvantage of Baby+ is that it doesn&rsquo;t <em>really</em> support multiple users. From the app&rsquo;s internal FAQ (only available after installing it and setting up an account):</p>
<blockquote>
<p><strong>How can I use this app with my partner?</strong></p>
<p>You can share the app by logging in with the <strong>same email and password</strong>. If you use your device and enter data (e.g. a note) then you need to minimise or close the app for it to send the new data to the server <em>[&hellip;]</em>.</p>
<p><strong>Important</strong>: the app is designed to be used by on person at a a time <em>[&hellip;]</em> otherwise data can be overwritten or deleted. <em>[&hellip;]</em> allow a few mins for the data to sync (the second device should also have the app closed for a few mins at this point so it can fetch the data <em>[&hellip;]</em>).</p>
<p>Please note that you will encounter data loss if you are using the app on two devices at the same time.</p>
</blockquote>
<p>I&rsquo;d guess that the app basically talks to the server on startup, compares timestamps of its entire database, and downloads or uploads the entire database depending on which version is newer. The startup time checks out:</p>
<p>Starting Baby+ on an android phone, after closing it so it syncs, takes about 7 seconds; an eternity in screaming-baby-debug-time. Furthermore, that doesn&rsquo;t include sync time, and old data will be shown for a few more seconds before the sync is complete; that starts off with slight frights (&ldquo;the baby didn&rsquo;t eat for 5 hours?! oh, wait, actually 1 hour&rdquo;), and eventually devolves into distrusting the app.</p>
<p>This felt like a silly problem to have; almost any web-based app would have none of these issues. Furthermore, I thought, there&rsquo;s surely an open-source one where I could fix any annoyances I have myself. Indeed, that would be BabyBuddy.</p>
<h1 id="babybuddy">BabyBuddy</h1>
<p><a href="https://github.com/babybuddy/babybuddy">BabyBuddy</a> is an open-source web app, self-described as &ldquo;to help caregivers track sleep, feedings, diaper changes, and tummy time to learn about and predict baby&rsquo;s needs without (as much) guess work&rdquo;. I describe it as &ldquo;the dumbest-sounding idea ever - sleep-deprived parents of newborns creating and maintaining baby-tracking software as a hobby&rdquo;. It turns out to be wonderful, and is what we use today. It requires self-hosting (but provides a button to do that easily on Heroku), but works remarkably well. It didn&rsquo;t work <em>exactly</em> like I wanted, but that just provided ample opportunity to hack on it.</p>
<p>Before we could use it, I had to make it more mobile-friendly. While it technically worked on phones, it had several usability issues, which I described in <a href="https://github.com/babybuddy/babybuddy/issues/229">#229</a>: horizontal scrolling was needed in places; the &ldquo;Timeline&rdquo; view didn&rsquo;t show a lot of the critical bits of info, requiring more clicks; the contrast was too low for sunlight; and more. Fortunately, through some wonderful collaboration from the author, I was able to quickly get it into a wife-acceptable state and transition us over from Baby+.</p>
<p>As I hacked on the project, I added a <a href="https://gitpod.io">Gitpod</a> <a href="https://github.com/babybuddy/babybuddy/blob/master/.gitpod.yml">config</a> and a link to the README. This allows people to hack on Babybuddy without installing any software whatsoever - everything is done through, essentially, a free tier cloud instance (on which my config will install everything needed) with a browser-builtin VSCode UI. I used this today to whip up <a href="https://github.com/babybuddy/babybuddy/pull/316">another pull request</a>.</p>
<p>In addition to being quick and comfortable to use, BabyBuddy allowed me to set up two integrations that I had in mind. The first is an always-on display, essentially intended as &ldquo;the baby clock&rdquo;. It&rsquo;s positioned by the couch where we usually feed, so it&rsquo;s great as a feeding timer as well. I had started out with an old tablet (Huawei T3 Mediapad) running <a href="https://github.com/thanksmister/wallpanel-android">wallpanel</a> - this is a form of &ldquo;kiosk&rdquo; application, which locks the device into a mode where it always runs the browser on a particular page (the device has no other credentials on it, so it&rsquo;s reasonably safe). The tablet&rsquo;s battery, unfortunately, did <em>not</em> like that - seemingly having the screen on discharges it faster than it can charge, and after a few weeks the tablet refused to charge at all. I&rsquo;ve therefore switched to using an old ASUS C100P Chromebook running <a href="https://chrome.google.com/webstore/detail/kiosk/afhcomalholahplbjhnmahkoekoijban?hl=en">kiosk</a> - this gives the benefit of having a physical keyboard, useful for entering the food amounts.</p>
<p>The second integration I call &ldquo;poobuttons&rdquo; - a couple of tactile buttons on the changing dresser which tell BabyBuddy to mark a diaper (they are labeled &ldquo;poo&rdquo; and &ldquo;pee&rdquo;). This is both easier than fumbling with a phone touchscreen and, frankly, way more satisfying. The next posts will detail the iterations of these buttons and how I built them.</p>
<p>This has been a wonderful and challenging journey so far. I wonder what else I&rsquo;ll find myself building.</p>
]]></content:encoded></item><item><title>Egged Getter 0.1</title><link>https://lutzky.net/2008/02/01/egged-getter-0-1/</link><pubDate>Fri, 01 Feb 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/02/01/egged-getter-0-1/</guid><description>The Egged Getter has been lost in the mists of time. However, it&amp;rsquo;s code has largely been integrated into TransportDroidIL. An old version of the Python code has been pasted at the end of this post.
Here&amp;rsquo;s a little something I&amp;rsquo;ve been messing with: A simple fetcher script for the Egged (Israeli bus company) site. I&amp;rsquo;ve made a deskbar applet which uses it, which was fun to do :) (I&amp;rsquo;m looking for other cool ideas to implement as deskbar applets)</description><content:encoded><![CDATA[<blockquote>
<p>The Egged Getter has been lost in the mists of time. However, it&rsquo;s code has
largely been integrated into <a href="https://github.com/lutzky/TransportDroidIL">TransportDroidIL</a>. An old version of the Python
code has been pasted at the end of this post.</p>
</blockquote>
<p>Here&rsquo;s a little something I&rsquo;ve been messing with: A simple fetcher script for
the <a href="http://www.egged.co.il">Egged</a> (Israeli bus company) site. I&rsquo;ve made a
deskbar applet which uses it, which was fun to do :) (I&rsquo;m looking for other
cool ideas to implement as deskbar applets)</p>
<p>You can get it at
<a href="http://lutzky.net/files/egged_getter">http://lutzky.net/files/egged_getter</a>.
The readme file includes installation instructions (&hellip;which involve placing
the two included scripts in
<code>~/.gnome2/deskbar-plugin/modules-2.20-compatible/</code>.</p>
<p>There&rsquo;s also a <a href="http://git.or.cz">git</a> repository here:
<a href="http://git.lutzky.net/?p=ohad/egged_getter.git">http://git.lutzky.net/?p=ohad/egged_getter.git</a>.
I don&rsquo;t think I&rsquo;ve mentioned git on the blog before&hellip; It&rsquo;s freaking awesome.
It made me really despise subversion :). Besides the abundance of information
on <a href="http://git.or.cz">the main site</a>, there&rsquo;s <a href="http://www.youtube.com/watch?v=4XpnKHJAok8">an excellent (and very amusing)
talk by Linus about it</a>. Also, I&rsquo;m
giving a talk about it in Haifux - this coming Monday (February 4th), the Taub
building of the Technion, room 6, at 18:30.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>
<span class="c1"># coding: utf-8</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">pyfribidi</span> <span class="kn">import</span> <span class="n">log2vis</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">log2vis</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">return</span> <span class="n">s</span>

<span class="c1"># Original values which worked:</span>
<span class="c1"># User agent (a sane browser agent):</span>
<span class="c1"># USERAGENT=&#34;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b2) Gecko/2007121016 Firefox/3.0b2&#34;</span>
<span class="c1"># Session ID: Can be retrieved from the site, but seems to have a very long</span>
<span class="c1"># keepalive, and isn&#39;t checked anyway.</span>
<span class="c1"># SESSION_ID=&#34;thjbzmnrhrks3a55w1dymvnx&#34;</span>

<span class="n">BUF_LEN</span><span class="o">=</span><span class="mi">2048</span>
<span class="n">HOST</span><span class="o">=</span><span class="s1">&#39;mslworld.egged.co.il&#39;</span>
<span class="n">PORT</span><span class="o">=</span><span class="mi">80</span>

<span class="n">DOUBLE_NEWLINE</span><span class="o">=</span><span class="s2">&#34;</span><span class="se">\r\n\r\n</span><span class="s2">&#34;</span>

<span class="n">USER_AGENT</span><span class="o">=</span><span class="s2">&#34;EggedGetter&#34;</span>
<span class="n">SESSION_ID</span><span class="o">=</span><span class="s2">&#34;0&#34;</span>

<span class="n">JSON_DATA</span><span class="o">=</span><span class="s2">&#34;&#34;&#34;{&#34;str1&#34;:&#34;</span><span class="si">%(query)s</span><span class="s2">&#34;,&#34;strSession&#34;:&#34;</span><span class="si">%(session_id)s</span><span class="s2">&#34;}&#34;&#34;&#34;</span>

<span class="n">_payload</span><span class="o">=</span><span class="s2">&#34;&#34;&#34;POST /eggedtimetable/WebForms/wsUnicell.asmx/getAnswer HTTP/1.1
</span><span class="s2">Host: mslworld.egged.co.il
</span><span class="s2">User-Agent: </span><span class="si">%(user_agent)s</span><span class="s2">
</span><span class="s2">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class="s2">Accept-Language: en-us,en;q=0.5
</span><span class="s2">Accept-Charset: utf-8
</span><span class="s2">Keep-Alive: 300
</span><span class="s2">Connection: keep-alive
</span><span class="s2">Content-Type: application/json; charset=utf-8
</span><span class="s2">Referer: http://mslworld.egged.co.il/eggedtimetable/WebForms/wfrmMain.aspx?width=1280&amp;state=3&amp;taavura=0&amp;language=he&amp;freelang=
</span><span class="s2">Content-Length: </span><span class="si">%(content_length)d</span><span class="s2">
</span><span class="s2">Cookie: ASP.NET_SessionId=</span><span class="si">%(session_id)s</span><span class="s2">
</span><span class="s2">Pragma: no-cache
</span><span class="s2">Cache-Control: no-cache
</span><span class="s2">
</span><span class="s2"></span><span class="si">%(json_data)s</span><span class="s2">&#34;&#34;&#34;</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span><span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">build_json_data</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span> <span class="o">=</span> <span class="n">SESSION_ID</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Build a JSON-formatted query for the egged site.&#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="n">JSON_DATA</span> <span class="o">%</span> <span class="p">{</span>
            <span class="s1">&#39;query&#39;</span><span class="p">:</span><span class="n">query</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;&#34;&#39;</span><span class="p">,</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">&#34;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">),</span>
            <span class="s1">&#39;session_id&#39;</span><span class="p">:</span><span class="n">session_id</span><span class="p">,</span>
            <span class="p">}</span>

<span class="k">def</span> <span class="nf">build_request</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span> <span class="o">=</span> <span class="n">SESSION_ID</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Build an HTTP request for the egged site.&#34;&#34;&#34;</span>

    <span class="n">json_data</span> <span class="o">=</span> <span class="n">build_json_data</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">_payload</span> <span class="o">%</span> <span class="p">{</span>
            <span class="s1">&#39;user_agent&#39;</span><span class="p">:</span><span class="n">USER_AGENT</span><span class="p">,</span>
            <span class="s1">&#39;content_length&#39;</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">json_data</span><span class="p">),</span>
            <span class="s1">&#39;session_id&#39;</span><span class="p">:</span><span class="n">session_id</span><span class="p">,</span>
            <span class="s1">&#39;json_data&#39;</span><span class="p">:</span><span class="n">json_data</span><span class="p">,</span>
            <span class="p">}</span>

<span class="k">def</span> <span class="nf">send_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">session_id</span> <span class="o">=</span> <span class="n">SESSION_ID</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Prepare and send query to site. Returned data is raw.&#34;&#34;&#34;</span>

    <span class="n">http_data</span> <span class="o">=</span> <span class="n">build_request</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>

    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span><span class="n">PORT</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">http_data</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUF_LEN</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">clean_response_html</span><span class="p">(</span><span class="n">response</span><span class="p">,</span><span class="n">linebreak</span><span class="o">=</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span><span class="n">item</span><span class="o">=</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2"> * &#34;</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">response</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">response</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;&#34;&#39;</span><span class="p">:</span> <span class="n">response</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">BR</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\u003c</span><span class="s2">br</span><span class="se">\u003e</span><span class="s2">&#34;</span>
    <span class="n">LI</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\u003c</span><span class="s2">li</span><span class="se">\u003e</span><span class="s2">&#34;</span>
    <span class="n">NBSP</span> <span class="o">=</span> <span class="s2">&#34;&amp;nbsp&#34;</span>
    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">BR</span><span class="p">,</span><span class="n">linebreak</span><span class="p">)</span> \
                   <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">LI</span><span class="p">,</span><span class="n">item</span><span class="p">)</span> \
                   <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">NBSP</span><span class="p">,</span><span class="s2">&#34; &#34;</span><span class="p">)</span> \
                   <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\\</span><span class="s2">&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">query_site</span><span class="p">(</span><span class="n">query</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Query the egged site with query&#34;&#34;&#34;</span>
    <span class="n">site_response</span> <span class="o">=</span> <span class="n">send_query</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
    <span class="n">returned_data</span> <span class="o">=</span> <span class="n">site_response</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">DOUBLE_NEWLINE</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">cleaned_data</span> <span class="o">=</span> <span class="n">clean_response_html</span><span class="p">(</span><span class="n">returned_data</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span> <span class="s2">&#34;Error occured when trying to clean up the following response:&#34;</span>
        <span class="nb">print</span> <span class="s2">&#34;site_response:&#34;</span>
        <span class="nb">print</span> <span class="n">site_response</span>
        <span class="nb">print</span> <span class="s2">&#34;returned_data:&#34;</span>
        <span class="nb">print</span> <span class="n">returned_data</span>
        <span class="k">raise</span>

    <span class="k">return</span> <span class="n">unicode</span><span class="p">(</span><span class="n">cleaned_data</span><span class="p">,</span> <span class="s2">&#34;utf-8&#34;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">unicode</span><span class="p">(</span><span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Enter query for Egged site: &#34;</span><span class="p">),</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">query_site</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>

    <span class="nb">print</span> <span class="s2">&#34;&#34;</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="nb">print</span> <span class="n">log2vis</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">UnicodeEncodeError</span><span class="p">:</span>
        <span class="nb">print</span> <span class="n">log2vis</span><span class="p">(</span><span class="n">unicode</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="s2">&#34;utf-8&#34;</span><span class="p">))</span>
</code></pre></div>]]></content:encoded></item><item><title>Two reasons Apple suck</title><link>https://lutzky.net/2007/09/16/two-reasons-apple-suck/</link><pubDate>Sun, 16 Sep 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/09/16/two-reasons-apple-suck/</guid><description>First of all, new iPods won&amp;rsquo;t work on Linux. Now, while it&amp;rsquo;s very obvious that the idea is to block competition against other music vendors, that makes it even less legitimate. Good thing we&amp;rsquo;re starting to see some very nice cheap players out there - I&amp;rsquo;ve been rather impressed with the Meizu M6 MiniPlayer.
Secondly, they didn&amp;rsquo;t think of this: Indexed search within the &amp;ldquo;Open&amp;rdquo; dialog. It&amp;rsquo;s in Ubuntu Gutsy, and really makes desktop search (implemented with Tracker in gutsy) worthwhile.</description><content:encoded><![CDATA[<p>First of all, <a href="http://www.boingboing.net/2007/09/14/new-ipods-reengineer.html">new iPods won&rsquo;t work on
Linux</a>. Now,
while it&rsquo;s very obvious that the idea is to block competition against other
music vendors, that makes it even less legitimate. Good thing we&rsquo;re starting to
see some very nice cheap players out there - I&rsquo;ve been rather impressed with
the <a href="http://en.meizu.com/product_m6.asp">Meizu M6 MiniPlayer</a>.</p>
<p>Secondly, they didn&rsquo;t think of this: <a href="http://www.gnome.org/start/2.20/notes/en/index.html#rnusers-file-management">Indexed search within the &ldquo;Open&rdquo;
dialog</a>.
It&rsquo;s in Ubuntu Gutsy, and really makes desktop search (implemented with Tracker
in gutsy) worthwhile. Especially when attaching files in GMail :)</p>
]]></content:encoded></item><item><title>Myspace sucks</title><link>https://lutzky.net/2007/05/17/myspace-sucks/</link><pubDate>Thu, 17 May 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/05/17/myspace-sucks/</guid><description>Life is good, for the most part. And as a technology enthusiast, there are many new and cool things to see online. For example, there&amp;rsquo;s the new Schools site, part of the Vaya project which helps Israeli schools use Linux; this site uses the up-and-coming Lahak CMS, built on the Django framework, and looks very promising to the eyes of the bidi-lingual webmaster.
However, some things just plain suck. One of them is myspace; today, in an attempt to make it more legible, I found that My Band&amp;rsquo;s Page implements all of its styling changes by a &amp;ldquo;style&amp;rdquo; tag hidden within the &amp;ldquo;Members&amp;rdquo; text block.</description><content:encoded><![CDATA[<p>Life is good, for the most part. And as a technology enthusiast, there are many
new and cool things to see online. For example, there&rsquo;s the new
<a href="http://schools.whatsup.org.il">Schools</a> site, part of the Vaya project which
helps Israeli schools use Linux; this site uses the up-and-coming
<a href="http://lahak.python-hosting.com">Lahak</a> CMS, built on the Django framework,
and looks very promising to the eyes of the bidi-lingual webmaster.</p>
<p>However, some things just plain suck. One of them is myspace; today, in an
attempt to make it more legible, I found that <a href="http://myspace.com/switchblade777">My Band&rsquo;s
Page</a> implements all of its styling changes
by a &ldquo;style&rdquo; tag hidden within the &ldquo;Members&rdquo; text block. Myspace doesn&rsquo;t filter
this out - nor does it provide any other means of changing the styling. This,
combined with myspace&rsquo;s horrid administration interface, makes editing
incredible unwieldy. I&rsquo;m considering opening another Wordpress site for the
band here on this server&hellip;</p>
<p>And on that topic - Wordpress 2.2 is out. Shinier. Faster. Built-in support for
sidebar modules. And K2 broke :(. I love K2&hellip; Even though now that sidebars
are implemented, the only thing I really need is a very simple template that
allows me an ordinary, rectangular logo. <strong>Update:</strong> I didn&rsquo;t even notice, but
the excellent K2 guys released a fix. However, it seems that when you copy the
plugin they created directly, it inadvertantly adds a space to the end of the
file - and PHP proceeds to barf. Hard to believe people still use this junk to
develop websites&hellip; They should use <a href="http://railsenvy.com">other junk</a>.</p>
]]></content:encoded></item><item><title>Beautiful ideas</title><link>https://lutzky.net/2007/02/08/beautiful-ideas/</link><pubDate>Thu, 08 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/08/beautiful-ideas/</guid><description>This man has some beautiful design ideas for the Linux desktop.</description><content:encoded>&lt;p>This man has &lt;a href="http://njpatel.blogspot.com/2007/02/while-i-have-your-attention_07.html">some beautiful design ideas&lt;/a> for the Linux desktop.&lt;/p></content:encoded></item><item><title>Why Vista worries me</title><link>https://lutzky.net/2007/02/07/why-vista-worries-me/</link><pubDate>Wed, 07 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/07/why-vista-worries-me/</guid><description>I&amp;rsquo;ve heard the latest Security Now, regarding the debate between Dave Marsh and Peter Guttman on DRM in Windows Vista. While a few good points were made, the major one - in my opinion - was not.
DRM, in a practical sense, is deeply flawed: The idea is to give you your media - say, a WMA piece of music - and a program to play it with - say, Windows Media Player - but encrypt the media.</description><content:encoded><![CDATA[<p>I&rsquo;ve heard <a href="http://www.twit.tv/sn77">the latest Security Now</a>, regarding the
debate between Dave Marsh and Peter Guttman on DRM in Windows Vista. While a
few good points were made, the major one - in my opinion - was not.</p>
<p>DRM, in a practical sense, is deeply flawed: The idea is to give you your
media - say, a WMA piece of music - and a program to play it with - say, Windows
Media Player - but encrypt the media. Now, naturally, Media Player will need
the decryption key for the media, and the idea is that Media Player will verify
that you are allowed to listen to the song, and only then decrypt it - as it is
played.</p>
<p>However, something is clearly wrong here - both the encrypted media and the
decryption key are sitting locally on your computer. It&rsquo;s like giving you a
locked box, as well as a butler (which will live in your house, where you
presumably have a shotgun) with the key, and telling the butler not to open the
box for anyone unauthorized. That is, you can open the Windows Media Player
executable with your favorite hex editor, and dig away for the key. This is, of
course, very complicated to do - but there are advanced ways of finding these
keys, and once they&rsquo;re found - they&rsquo;re out. That&rsquo;s why we keep hearing about
WMA and iTunes' equivalent format being cracked every once in a while, when
they change it. No matter how sophisticated the DRM, you still get both the
locked box and the key. They might build bigger butlers, but we can build
deadlier shotguns. (Sorry for the violent analogy, but DRM kinda does that to
me ;))</p>
<p>So, what can the *AA/Microsoft/Apple/DRM scapegoats inc. do about this? Well,
they could supposedly have Windows recognize that you are trying to view the
Windows Media Player executable, and stop you (I&rsquo;d be surprised if they haven&rsquo;t
done this yet). However, currently you can still, for example, run Linux on the
computer, and use that to view the executable. And if, by some crazy
coincidence, all variants of Linux stop you from viewing the executable - you
can pick your favorite, change the source code so it doesn&rsquo;t, and use that. To
stop you from running whatever unprotected operating system you want, changes
to the hardware must be made.</p>
<p>This is exactly what worries me about Vista. For the first time, we are seeing
major effects like HDMI/HDCP, where the operating system interacts with the
hardware directly to figure out exactly what the user is or isn&rsquo;t allowed to
do. Also, Vista boasts the &ldquo;Trustworthy Computing&rdquo; project, which is all too
reminiscent of &ldquo;Trusted Computing&rdquo; - a project in which, through integrating
protection from the bottom of the hardware (with a TPM, Trusted Platform Module
chip) to the top of the software, the computer verifies that it is only running
authorized operating systems, which run only authorized programs.</p>
<p>Now, the media companies would love this. Say HD-DVD&rsquo;s been completely cracked,
and an alternative, open-source, unprotected player has been released. If your
system is TPM-protected, it simply won&rsquo;t allow this software to run. Your own
compiled applications can be forbidden from running as well, seeing as their
source code just might be the HD-DVD cracking code. Unauthorized operating
systems would, naturally, not be allowed to run.</p>
<p>Now, I&rsquo;m not explicitly blaming Microsoft for this. Fact of the matter is, the
protection they&rsquo;ve built into Vista, although probably (for the reasons I&rsquo;ve
mentioned) insufficient, was required by the media companies in order for
HD-DVD support to be (legally/technically) possible in Vista. Would Microsoft
go so far as to enable the horror scenario I&rsquo;ve pictured above? Probably not.
But I do believe we all need to be aware of the risks, just to be on the safe
side.</p>
]]></content:encoded></item><item><title>On Vista</title><link>https://lutzky.net/2007/02/04/on-vista/</link><pubDate>Sun, 04 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/04/on-vista/</guid><description>Everyone knew this was going to be an interesting one to watch. Die-hard Microsoft fans were sure Vista would be the final nail in the Open Source coffin, die-hard Linux fans were sure that the release would be Microsoft&amp;rsquo;s demise. Myself - I&amp;rsquo;m sitting and enjoying the show.
It&amp;rsquo;s always very interesting to show Beryl to non-Linux users. They are almost always highly impressed, and are often completely in shock that Linux is a graphical system - many people still believe Linux is command-line only.</description><content:encoded><![CDATA[<p>Everyone knew this was going to be an interesting one to watch. Die-hard
Microsoft fans were sure Vista would be the final nail in the Open Source
coffin, die-hard Linux fans were sure that the release would be Microsoft&rsquo;s
demise. Myself - I&rsquo;m sitting and enjoying the show.</p>
<p>It&rsquo;s always very interesting to show Beryl to non-Linux users. They are almost
always highly impressed, and are often completely in shock that Linux is a
graphical system - many people still believe Linux is command-line only. But
the funniest thing is that they always seem to care more about useless,
spinning, transparent desktop cubes than, say, security. This holds for Vista&rsquo;s
flashy new graphics, as well - mainstream media seems to be focusing on Vista&rsquo;s
GUI a lot more than they are about its controversial new security features.
Very interesting, keeping in mind that Windows has never been &ldquo;not pretty
enough&rdquo; in consumer&rsquo;s eyes, but rather too unstable or virus-prone.</p>
<p>Controversial security? Yup. And I&rsquo;m not even talking about the actually
controversy-worth topics, like DRM&hellip; I&rsquo;m talking about the system asking if
you&rsquo;re sure you want to set the clock. I&rsquo;ve heard more noise about this than
the fact that all of Vista&rsquo;s new features pale in comparison to 7-year-old OS X
which, incidentally, also &ldquo;asks if you&rsquo;re sure&rdquo; that you want to set the clock.
Nobody complains about that however. Why? In my opinion - it&rsquo;s the password
prompt.</p>
<p>Just as people complained about Windows XP&rsquo;s &ldquo;Fisher-Price&rdquo; theme, they&rsquo;re now
complaining about being treated like little kids. &ldquo;Are you <em>sure</em> you want to
set your clock?&rdquo; - how condescending of the operating system. The reason it
works well in Linux and OS X is that the system phrases the exact same question
completely differently - &ldquo;You are attempting to run &ldquo;system-config-date&rdquo; which
requires administrative privileges&rdquo;. Cryptic, right? I think they changed that
for Ubuntu, too (I&rsquo;m writing this off a Fedora box). But most users won&rsquo;t have
a hard time understanding that this, coupled with the password entry box, means
that the system wants to make sure you are indeed someone allowed to set the
clock. Hell, I believe that most people won&rsquo;t have a problem making the logical
leap from there to &ldquo;hmm, perhaps setting the clock (im)properly can really mess
up my system&rdquo;. Either way, it&rsquo;s much more pleasing than Vista&rsquo;s seemingly
endless, senseless sequences of &ldquo;Are you sure?&rdquo; dialog boxes. A password prompt
like this tells the user - &ldquo;You&rsquo;re opening the hood here, watch your step&rdquo;, the
idea being that the user takes a hint and, realizing he has arrived at a
password-protected part of his system, will indeed watch his proverbial step.</p>
<p>But nobody is going to ditch windows over a couple of dialog boxes. There are
much more interesting reasons to do that - I&rsquo;ve heard of much instability,
inavailability of drivers, confusions in the user interface&hellip; all of the
things that Microsoft worked very hard to get rid of when XP was released,
making Vista look like a step back. But most of all - it&rsquo;s the timing. Vista&rsquo;s
2007 release has given the world time to hear about shiny new Linux
distributions, macs that run all of their old software, indexing services at
least as powerful as Vista&rsquo;s (now that WinFS has gone down the drain), more
advanced graphical &ldquo;shinyness&rdquo; which works on older systems, and the horrors of
DRM (thanks for that one, Sony). With nothing really new to give them, a high
price tag (because it often includes a new computer), and several years of not
being in the habit of buying a new OS, people have very little motivation to
upgrade to Vista.</p>
<p>But I don&rsquo;t think that Microsoft and Windows are going anywhere, anytime soon.
I do think Vista&rsquo;s lost the battle - but to XP. Vista&rsquo;s launch made people
realize how successful XP was as an operating system, and the sheer momentum
will keep people there. If Microsoft locks people out of technologies like
DirectX 10 by making them Vista-only, this will keep people leaking away to OS
X and Linux. But in the immediate future, I don&rsquo;t think any OS will be taking a
serious bite out of the XP userbase.</p>
]]></content:encoded></item><item><title>Software Perfection - Lost in the details</title><link>https://lutzky.net/2007/01/25/software-perfection-lost-in-the-details/</link><pubDate>Thu, 25 Jan 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/01/25/software-perfection-lost-in-the-details/</guid><description>Sometimes imperfections in Software drive me nuts. It&amp;rsquo;s what drove me away from Windows. It&amp;rsquo;s what keeps me switching back and forth between desktop environments. It&amp;rsquo;s what has me wasting a lot of time getting the software to do what I want, instead of getting anything done. I even have two particularily good examples.
Firefox and Opera are my two favorite browsers. Opera is actually not as good, in my taste, as Firefox.</description><content:encoded><![CDATA[<p>Sometimes imperfections in Software drive me nuts. It&rsquo;s what drove me away from
Windows. It&rsquo;s what keeps me switching back and forth between desktop
environments. It&rsquo;s what has me wasting a lot of time getting the software to do
what I want, instead of getting anything done. I even have two particularily
good examples.</p>
<p>Firefox and Opera are my two favorite browsers. Opera is actually not as good,
in my taste, as Firefox. Firefox&rsquo;s slew of extensions (especially my latest
favorites - <a href="http://del.icio.us/help/firefox/extension">Del.icio.us bookmarks</a>
and <a href="http://www.getfirebug.com/">Firebug</a>), better font handling (on Linux) and
Open-Source nature keep it ahead, if all things were equal. However,  Opera
is much faster on my laptop. <strong>Way</strong> faster. And with the kind of browsing I
usually do - zillions of tabs open and all, that difference counts.</p>
<p>My other good example is LaTeX. I have the <a href="http://latex-beamer.sf.net">Beamer</a>
package, which makes absolutely stunning presentations in my favorite style of
document creation - writing and compiling source code. However, one little
thing drives me nuts about it - the symbols in math mode, even if I set it to
Serif (Beamer uses sans-serif fonts by default), are not the default ones,
which I prefer. For example, the symbol for &ldquo;\in&rdquo; (a member of a set) looks
horrible in my opinion. This tiny little thing had me chasing font preferences
around for half an hour, to no avail.</p>
<p>Graphviz. Ruby on Rails. Networkmanager. Openbox. IVMan. The list goes on&hellip;
almost every piece of software I use has a little imperfection - not
necessarily a bug, usually a missing features - that drives me crazy. Maybe I
should quit my degree so I have time to fix all of those?</p>
]]></content:encoded></item></channel></rss>