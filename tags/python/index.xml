<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>python on Shallow and Pedantic</title><link>https://lutzky.net/tags/python/</link><description>Recent content in python on Shallow and Pedantic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Jul 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://lutzky.net/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>FakeFile</title><link>https://lutzky.net/2014/07/02/fakefile/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://lutzky.net/2014/07/02/fakefile/</guid><description>A tiny python library for faking out filesystem operations for tests.</description></item><item><title>Translationese</title><link>https://lutzky.net/2013/03/24/translationese/</link><pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate><guid>https://lutzky.net/2013/03/24/translationese/</guid><description>As part of my M.Sc. studies, I&amp;rsquo;ve recently completed a small laboratory project in natural language processing. I&amp;rsquo;ve learned quite a bit from it, and had a chance to use a few of my favorite technologies.
The project was coded in Python, which is not my favorite programming language - Ruby is. However, since Python is more popular at my workplace, and seems to have a richer ecosystem around it (sometimes, at any rate), I&amp;rsquo;ve grown to love it almost as much over the years.</description></item><item><title>Faster Languages</title><link>https://lutzky.net/2008/04/16/faster-languages/</link><pubDate>Wed, 16 Apr 2008 00:00:00 +0000</pubDate><guid>https://lutzky.net/2008/04/16/faster-languages/</guid><description>Due to an exercise in an AI course, I&amp;rsquo;m forced to confront an old nemesis - C++. Part of the reason is that the exercise contains a time-limited tournament, and the code needs to run very quickly. Another reason is, I guess, the fact that C++ serves as a sort of lowest common denominator in the course (which used, by the way, to be taught in LISP, along with the language).</description></item><item><title>On Threading vs. Processing</title><link>https://lutzky.net/2007/10/13/on-threading-vs-processing/</link><pubDate>Sat, 13 Oct 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/10/13/on-threading-vs-processing/</guid><description>Writing multi-threaded applications in Python is often a headache because of the Global Interpreter Lock - only one Python thread can run at any given moment, which makes multi-threading useful only in the case where all modules but one actually run C code. However, thanks to the impressive new Python Magazine, I&amp;rsquo;ve stumbled across a package called processing, paraphrasing python&amp;rsquo;s built-in threading package. Essentially, the package provides an API identical to Python&amp;rsquo;s threading, but uses processes and pipes (or other mechanisms on non-posix operating systems) instead.</description></item><item><title>Exception handling, decorators, and python</title><link>https://lutzky.net/2007/09/16/exception-handling-decorators-and-python/</link><pubDate>Sun, 16 Sep 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/09/16/exception-handling-decorators-and-python/</guid><description>Lately I&amp;rsquo;ve been working on a project that has me using DBus a lot. After trying to figure out how to work DBus with C, and seeing how easy it is to do in Python, we figured we&amp;rsquo;d try to use embedded Python to do this. Fortunately, it&amp;rsquo;s very simple to use - especially thanks to this guide.
It later turned out to be much easier to do in C, as described in Faster Languages.</description></item><item><title>IPython</title><link>https://lutzky.net/2007/03/04/ipython/</link><pubDate>Sun, 04 Mar 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/03/04/ipython/</guid><description>The more I use Python, the nicer it becomes. I&amp;rsquo;m currently working on a project for a course, which involves somewhat heavy-duty database and algorithm work. Python is my language of choice for it - let&amp;rsquo;s hope it works out well.
In the meantime, I&amp;rsquo;ve found a really nice python shell called iPython (available in apt) - it adds a bunch of stuff to the python shell which I sorely missed from irb - autocompletion, auto-indentation, and - it seems - adds a whole lot more.</description></item><item><title>Really liking the whole Python thing</title><link>https://lutzky.net/2007/02/25/really-liking-the-whole-python-thing/</link><pubDate>Sun, 25 Feb 2007 00:00:00 +0000</pubDate><guid>https://lutzky.net/2007/02/25/really-liking-the-whole-python-thing/</guid><description>I&amp;rsquo;ve converted my Antigibberish script1 (converts &amp;ldquo;broken hebrew&amp;rdquo; into proper hebrew, useful for sent-offline ICQ messages) to Python&amp;hellip; it&amp;rsquo;s quite a nice language, and the interpreter is FAST! I&amp;rsquo;m really torn between it and Ruby :(
Used to have a copy of antigibberish.py, but it&amp;rsquo;s been lost in the mists of time. It used to do the equivalent of this:
iconv -f utf-8 -t iso8859-1 | iconv -f iso8859-8 -t utf-8 &amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item></channel></rss>